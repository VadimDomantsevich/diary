// coverage:ignore-file
// GENERATED CODE - DO NOT MODIFY BY HAND
// ignore_for_file: type=lint
// ignore_for_file: unused_element, deprecated_member_use, deprecated_member_use_from_same_package, use_function_type_syntax_for_parameters, unnecessary_const, avoid_init_to_null, invalid_override_different_default_values_named, prefer_expression_function_bodies, annotate_overrides, invalid_annotation_target, unnecessary_question_mark

part of 'diary_list_bloc.dart';

// **************************************************************************
// FreezedGenerator
// **************************************************************************

T _$identity<T>(T value) => value;

final _privateConstructorUsedError = UnsupportedError(
    'It seems like you constructed your class using `MyClass._()`. This constructor is only meant to be used by freezed and you are not supposed to need it nor use it.\nPlease check the documentation here for more information: https://github.com/rrousselGit/freezed#custom-getters-and-methods');

/// @nodoc
mixin _$DiaryListState {
  @optionalTypeArgs
  TResult when<TResult extends Object?>({
    required TResult Function() initial,
    required TResult Function(DiaryList diaryList, List<DiaryList> lists)
        listLoaded,
    required TResult Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells,
            List<DiaryList> lists)
        columnsLoaded,
    required TResult Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells,
            List<DiaryCell> diaryCells,
            List<GlobalObjectKey<State<StatefulWidget>>> cellsKeys,
            List<DiaryList> lists,
            bool isListThemeViewMode,
            ListTheme? listTheme)
        loaded,
    required TResult Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells,
            List<DiaryCell> diaryCells,
            DiaryCell firstSelectedCell,
            List<DiaryCell> selectedCells,
            List<GlobalObjectKey<State<StatefulWidget>>> cellsKeys,
            List<DiaryList> lists,
            DiaryCellTextSettings defaultTextSettings,
            DiaryCellSettings defaultSettings,
            bool isListThemeViewMode,
            ListTheme? listTheme)
        cellsSelected,
    required TResult Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells,
            List<DiaryCell> diaryCells,
            CapitalCell selectedCapitalCell,
            bool isEditing,
            bool isTextEditing,
            bool isColorEditing,
            bool isBordersEditing,
            bool isBordersStyleEditing,
            List<GlobalObjectKey<State<StatefulWidget>>> cellsKeys,
            List<DiaryList> lists,
            DiaryColumnSettings defaultSettings,
            bool isListThemeViewMode,
            ListTheme? listTheme)
        capitalCellSelected,
    required TResult Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells,
            List<DiaryCell> diaryCells,
            List<GlobalObjectKey<State<StatefulWidget>>> cellsKeys,
            List<DiaryList> lists,
            bool isColumnDeleting,
            bool isColorThemeEditing,
            DiaryList? selectedList)
        listEditing,
    required TResult Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells,
            List<DiaryCell> diaryCells,
            List<GlobalObjectKey<State<StatefulWidget>>> cellsKeys,
            DiaryCell firstSelectedCell,
            List<DiaryCell> selectedCells,
            bool isTextEditing,
            bool isColorEditing,
            bool isBordersEditing,
            bool isBordersStyleEditing,
            List<DiaryList> lists,
            DiaryCellTextSettings defaultTextSettings,
            DiaryCellSettings defaultSettings,
            bool isListThemeViewMode,
            ListTheme? listTheme)
        cellsEditing,
    required TResult Function(List<ListTheme> listThemes) themesLoaded,
  }) =>
      throw _privateConstructorUsedError;
  @optionalTypeArgs
  TResult? whenOrNull<TResult extends Object?>({
    TResult? Function()? initial,
    TResult? Function(DiaryList diaryList, List<DiaryList> lists)? listLoaded,
    TResult? Function(DiaryList diaryList, List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells, List<DiaryList> lists)?
        columnsLoaded,
    TResult? Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells,
            List<DiaryCell> diaryCells,
            List<GlobalObjectKey<State<StatefulWidget>>> cellsKeys,
            List<DiaryList> lists,
            bool isListThemeViewMode,
            ListTheme? listTheme)?
        loaded,
    TResult? Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells,
            List<DiaryCell> diaryCells,
            DiaryCell firstSelectedCell,
            List<DiaryCell> selectedCells,
            List<GlobalObjectKey<State<StatefulWidget>>> cellsKeys,
            List<DiaryList> lists,
            DiaryCellTextSettings defaultTextSettings,
            DiaryCellSettings defaultSettings,
            bool isListThemeViewMode,
            ListTheme? listTheme)?
        cellsSelected,
    TResult? Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells,
            List<DiaryCell> diaryCells,
            CapitalCell selectedCapitalCell,
            bool isEditing,
            bool isTextEditing,
            bool isColorEditing,
            bool isBordersEditing,
            bool isBordersStyleEditing,
            List<GlobalObjectKey<State<StatefulWidget>>> cellsKeys,
            List<DiaryList> lists,
            DiaryColumnSettings defaultSettings,
            bool isListThemeViewMode,
            ListTheme? listTheme)?
        capitalCellSelected,
    TResult? Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells,
            List<DiaryCell> diaryCells,
            List<GlobalObjectKey<State<StatefulWidget>>> cellsKeys,
            List<DiaryList> lists,
            bool isColumnDeleting,
            bool isColorThemeEditing,
            DiaryList? selectedList)?
        listEditing,
    TResult? Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells,
            List<DiaryCell> diaryCells,
            List<GlobalObjectKey<State<StatefulWidget>>> cellsKeys,
            DiaryCell firstSelectedCell,
            List<DiaryCell> selectedCells,
            bool isTextEditing,
            bool isColorEditing,
            bool isBordersEditing,
            bool isBordersStyleEditing,
            List<DiaryList> lists,
            DiaryCellTextSettings defaultTextSettings,
            DiaryCellSettings defaultSettings,
            bool isListThemeViewMode,
            ListTheme? listTheme)?
        cellsEditing,
    TResult? Function(List<ListTheme> listThemes)? themesLoaded,
  }) =>
      throw _privateConstructorUsedError;
  @optionalTypeArgs
  TResult maybeWhen<TResult extends Object?>({
    TResult Function()? initial,
    TResult Function(DiaryList diaryList, List<DiaryList> lists)? listLoaded,
    TResult Function(DiaryList diaryList, List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells, List<DiaryList> lists)?
        columnsLoaded,
    TResult Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells,
            List<DiaryCell> diaryCells,
            List<GlobalObjectKey<State<StatefulWidget>>> cellsKeys,
            List<DiaryList> lists,
            bool isListThemeViewMode,
            ListTheme? listTheme)?
        loaded,
    TResult Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells,
            List<DiaryCell> diaryCells,
            DiaryCell firstSelectedCell,
            List<DiaryCell> selectedCells,
            List<GlobalObjectKey<State<StatefulWidget>>> cellsKeys,
            List<DiaryList> lists,
            DiaryCellTextSettings defaultTextSettings,
            DiaryCellSettings defaultSettings,
            bool isListThemeViewMode,
            ListTheme? listTheme)?
        cellsSelected,
    TResult Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells,
            List<DiaryCell> diaryCells,
            CapitalCell selectedCapitalCell,
            bool isEditing,
            bool isTextEditing,
            bool isColorEditing,
            bool isBordersEditing,
            bool isBordersStyleEditing,
            List<GlobalObjectKey<State<StatefulWidget>>> cellsKeys,
            List<DiaryList> lists,
            DiaryColumnSettings defaultSettings,
            bool isListThemeViewMode,
            ListTheme? listTheme)?
        capitalCellSelected,
    TResult Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells,
            List<DiaryCell> diaryCells,
            List<GlobalObjectKey<State<StatefulWidget>>> cellsKeys,
            List<DiaryList> lists,
            bool isColumnDeleting,
            bool isColorThemeEditing,
            DiaryList? selectedList)?
        listEditing,
    TResult Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells,
            List<DiaryCell> diaryCells,
            List<GlobalObjectKey<State<StatefulWidget>>> cellsKeys,
            DiaryCell firstSelectedCell,
            List<DiaryCell> selectedCells,
            bool isTextEditing,
            bool isColorEditing,
            bool isBordersEditing,
            bool isBordersStyleEditing,
            List<DiaryList> lists,
            DiaryCellTextSettings defaultTextSettings,
            DiaryCellSettings defaultSettings,
            bool isListThemeViewMode,
            ListTheme? listTheme)?
        cellsEditing,
    TResult Function(List<ListTheme> listThemes)? themesLoaded,
    required TResult orElse(),
  }) =>
      throw _privateConstructorUsedError;
  @optionalTypeArgs
  TResult map<TResult extends Object?>({
    required TResult Function(_Initial value) initial,
    required TResult Function(_ListLoaded value) listLoaded,
    required TResult Function(_ColumnsLoaded value) columnsLoaded,
    required TResult Function(_Loaded value) loaded,
    required TResult Function(_CellsSelected value) cellsSelected,
    required TResult Function(_CapitalCellSelected value) capitalCellSelected,
    required TResult Function(_ListEditing value) listEditing,
    required TResult Function(_CellsEditing value) cellsEditing,
    required TResult Function(_ThemesLoaded value) themesLoaded,
  }) =>
      throw _privateConstructorUsedError;
  @optionalTypeArgs
  TResult? mapOrNull<TResult extends Object?>({
    TResult? Function(_Initial value)? initial,
    TResult? Function(_ListLoaded value)? listLoaded,
    TResult? Function(_ColumnsLoaded value)? columnsLoaded,
    TResult? Function(_Loaded value)? loaded,
    TResult? Function(_CellsSelected value)? cellsSelected,
    TResult? Function(_CapitalCellSelected value)? capitalCellSelected,
    TResult? Function(_ListEditing value)? listEditing,
    TResult? Function(_CellsEditing value)? cellsEditing,
    TResult? Function(_ThemesLoaded value)? themesLoaded,
  }) =>
      throw _privateConstructorUsedError;
  @optionalTypeArgs
  TResult maybeMap<TResult extends Object?>({
    TResult Function(_Initial value)? initial,
    TResult Function(_ListLoaded value)? listLoaded,
    TResult Function(_ColumnsLoaded value)? columnsLoaded,
    TResult Function(_Loaded value)? loaded,
    TResult Function(_CellsSelected value)? cellsSelected,
    TResult Function(_CapitalCellSelected value)? capitalCellSelected,
    TResult Function(_ListEditing value)? listEditing,
    TResult Function(_CellsEditing value)? cellsEditing,
    TResult Function(_ThemesLoaded value)? themesLoaded,
    required TResult orElse(),
  }) =>
      throw _privateConstructorUsedError;
}

/// @nodoc
abstract class $DiaryListStateCopyWith<$Res> {
  factory $DiaryListStateCopyWith(
          DiaryListState value, $Res Function(DiaryListState) then) =
      _$DiaryListStateCopyWithImpl<$Res, DiaryListState>;
}

/// @nodoc
class _$DiaryListStateCopyWithImpl<$Res, $Val extends DiaryListState>
    implements $DiaryListStateCopyWith<$Res> {
  _$DiaryListStateCopyWithImpl(this._value, this._then);

  // ignore: unused_field
  final $Val _value;
  // ignore: unused_field
  final $Res Function($Val) _then;
}

/// @nodoc
abstract class _$$_InitialCopyWith<$Res> {
  factory _$$_InitialCopyWith(
          _$_Initial value, $Res Function(_$_Initial) then) =
      __$$_InitialCopyWithImpl<$Res>;
}

/// @nodoc
class __$$_InitialCopyWithImpl<$Res>
    extends _$DiaryListStateCopyWithImpl<$Res, _$_Initial>
    implements _$$_InitialCopyWith<$Res> {
  __$$_InitialCopyWithImpl(_$_Initial _value, $Res Function(_$_Initial) _then)
      : super(_value, _then);
}

/// @nodoc

class _$_Initial implements _Initial {
  const _$_Initial();

  @override
  String toString() {
    return 'DiaryListState.initial()';
  }

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType && other is _$_Initial);
  }

  @override
  int get hashCode => runtimeType.hashCode;

  @override
  @optionalTypeArgs
  TResult when<TResult extends Object?>({
    required TResult Function() initial,
    required TResult Function(DiaryList diaryList, List<DiaryList> lists)
        listLoaded,
    required TResult Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells,
            List<DiaryList> lists)
        columnsLoaded,
    required TResult Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells,
            List<DiaryCell> diaryCells,
            List<GlobalObjectKey<State<StatefulWidget>>> cellsKeys,
            List<DiaryList> lists,
            bool isListThemeViewMode,
            ListTheme? listTheme)
        loaded,
    required TResult Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells,
            List<DiaryCell> diaryCells,
            DiaryCell firstSelectedCell,
            List<DiaryCell> selectedCells,
            List<GlobalObjectKey<State<StatefulWidget>>> cellsKeys,
            List<DiaryList> lists,
            DiaryCellTextSettings defaultTextSettings,
            DiaryCellSettings defaultSettings,
            bool isListThemeViewMode,
            ListTheme? listTheme)
        cellsSelected,
    required TResult Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells,
            List<DiaryCell> diaryCells,
            CapitalCell selectedCapitalCell,
            bool isEditing,
            bool isTextEditing,
            bool isColorEditing,
            bool isBordersEditing,
            bool isBordersStyleEditing,
            List<GlobalObjectKey<State<StatefulWidget>>> cellsKeys,
            List<DiaryList> lists,
            DiaryColumnSettings defaultSettings,
            bool isListThemeViewMode,
            ListTheme? listTheme)
        capitalCellSelected,
    required TResult Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells,
            List<DiaryCell> diaryCells,
            List<GlobalObjectKey<State<StatefulWidget>>> cellsKeys,
            List<DiaryList> lists,
            bool isColumnDeleting,
            bool isColorThemeEditing,
            DiaryList? selectedList)
        listEditing,
    required TResult Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells,
            List<DiaryCell> diaryCells,
            List<GlobalObjectKey<State<StatefulWidget>>> cellsKeys,
            DiaryCell firstSelectedCell,
            List<DiaryCell> selectedCells,
            bool isTextEditing,
            bool isColorEditing,
            bool isBordersEditing,
            bool isBordersStyleEditing,
            List<DiaryList> lists,
            DiaryCellTextSettings defaultTextSettings,
            DiaryCellSettings defaultSettings,
            bool isListThemeViewMode,
            ListTheme? listTheme)
        cellsEditing,
    required TResult Function(List<ListTheme> listThemes) themesLoaded,
  }) {
    return initial();
  }

  @override
  @optionalTypeArgs
  TResult? whenOrNull<TResult extends Object?>({
    TResult? Function()? initial,
    TResult? Function(DiaryList diaryList, List<DiaryList> lists)? listLoaded,
    TResult? Function(DiaryList diaryList, List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells, List<DiaryList> lists)?
        columnsLoaded,
    TResult? Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells,
            List<DiaryCell> diaryCells,
            List<GlobalObjectKey<State<StatefulWidget>>> cellsKeys,
            List<DiaryList> lists,
            bool isListThemeViewMode,
            ListTheme? listTheme)?
        loaded,
    TResult? Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells,
            List<DiaryCell> diaryCells,
            DiaryCell firstSelectedCell,
            List<DiaryCell> selectedCells,
            List<GlobalObjectKey<State<StatefulWidget>>> cellsKeys,
            List<DiaryList> lists,
            DiaryCellTextSettings defaultTextSettings,
            DiaryCellSettings defaultSettings,
            bool isListThemeViewMode,
            ListTheme? listTheme)?
        cellsSelected,
    TResult? Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells,
            List<DiaryCell> diaryCells,
            CapitalCell selectedCapitalCell,
            bool isEditing,
            bool isTextEditing,
            bool isColorEditing,
            bool isBordersEditing,
            bool isBordersStyleEditing,
            List<GlobalObjectKey<State<StatefulWidget>>> cellsKeys,
            List<DiaryList> lists,
            DiaryColumnSettings defaultSettings,
            bool isListThemeViewMode,
            ListTheme? listTheme)?
        capitalCellSelected,
    TResult? Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells,
            List<DiaryCell> diaryCells,
            List<GlobalObjectKey<State<StatefulWidget>>> cellsKeys,
            List<DiaryList> lists,
            bool isColumnDeleting,
            bool isColorThemeEditing,
            DiaryList? selectedList)?
        listEditing,
    TResult? Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells,
            List<DiaryCell> diaryCells,
            List<GlobalObjectKey<State<StatefulWidget>>> cellsKeys,
            DiaryCell firstSelectedCell,
            List<DiaryCell> selectedCells,
            bool isTextEditing,
            bool isColorEditing,
            bool isBordersEditing,
            bool isBordersStyleEditing,
            List<DiaryList> lists,
            DiaryCellTextSettings defaultTextSettings,
            DiaryCellSettings defaultSettings,
            bool isListThemeViewMode,
            ListTheme? listTheme)?
        cellsEditing,
    TResult? Function(List<ListTheme> listThemes)? themesLoaded,
  }) {
    return initial?.call();
  }

  @override
  @optionalTypeArgs
  TResult maybeWhen<TResult extends Object?>({
    TResult Function()? initial,
    TResult Function(DiaryList diaryList, List<DiaryList> lists)? listLoaded,
    TResult Function(DiaryList diaryList, List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells, List<DiaryList> lists)?
        columnsLoaded,
    TResult Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells,
            List<DiaryCell> diaryCells,
            List<GlobalObjectKey<State<StatefulWidget>>> cellsKeys,
            List<DiaryList> lists,
            bool isListThemeViewMode,
            ListTheme? listTheme)?
        loaded,
    TResult Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells,
            List<DiaryCell> diaryCells,
            DiaryCell firstSelectedCell,
            List<DiaryCell> selectedCells,
            List<GlobalObjectKey<State<StatefulWidget>>> cellsKeys,
            List<DiaryList> lists,
            DiaryCellTextSettings defaultTextSettings,
            DiaryCellSettings defaultSettings,
            bool isListThemeViewMode,
            ListTheme? listTheme)?
        cellsSelected,
    TResult Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells,
            List<DiaryCell> diaryCells,
            CapitalCell selectedCapitalCell,
            bool isEditing,
            bool isTextEditing,
            bool isColorEditing,
            bool isBordersEditing,
            bool isBordersStyleEditing,
            List<GlobalObjectKey<State<StatefulWidget>>> cellsKeys,
            List<DiaryList> lists,
            DiaryColumnSettings defaultSettings,
            bool isListThemeViewMode,
            ListTheme? listTheme)?
        capitalCellSelected,
    TResult Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells,
            List<DiaryCell> diaryCells,
            List<GlobalObjectKey<State<StatefulWidget>>> cellsKeys,
            List<DiaryList> lists,
            bool isColumnDeleting,
            bool isColorThemeEditing,
            DiaryList? selectedList)?
        listEditing,
    TResult Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells,
            List<DiaryCell> diaryCells,
            List<GlobalObjectKey<State<StatefulWidget>>> cellsKeys,
            DiaryCell firstSelectedCell,
            List<DiaryCell> selectedCells,
            bool isTextEditing,
            bool isColorEditing,
            bool isBordersEditing,
            bool isBordersStyleEditing,
            List<DiaryList> lists,
            DiaryCellTextSettings defaultTextSettings,
            DiaryCellSettings defaultSettings,
            bool isListThemeViewMode,
            ListTheme? listTheme)?
        cellsEditing,
    TResult Function(List<ListTheme> listThemes)? themesLoaded,
    required TResult orElse(),
  }) {
    if (initial != null) {
      return initial();
    }
    return orElse();
  }

  @override
  @optionalTypeArgs
  TResult map<TResult extends Object?>({
    required TResult Function(_Initial value) initial,
    required TResult Function(_ListLoaded value) listLoaded,
    required TResult Function(_ColumnsLoaded value) columnsLoaded,
    required TResult Function(_Loaded value) loaded,
    required TResult Function(_CellsSelected value) cellsSelected,
    required TResult Function(_CapitalCellSelected value) capitalCellSelected,
    required TResult Function(_ListEditing value) listEditing,
    required TResult Function(_CellsEditing value) cellsEditing,
    required TResult Function(_ThemesLoaded value) themesLoaded,
  }) {
    return initial(this);
  }

  @override
  @optionalTypeArgs
  TResult? mapOrNull<TResult extends Object?>({
    TResult? Function(_Initial value)? initial,
    TResult? Function(_ListLoaded value)? listLoaded,
    TResult? Function(_ColumnsLoaded value)? columnsLoaded,
    TResult? Function(_Loaded value)? loaded,
    TResult? Function(_CellsSelected value)? cellsSelected,
    TResult? Function(_CapitalCellSelected value)? capitalCellSelected,
    TResult? Function(_ListEditing value)? listEditing,
    TResult? Function(_CellsEditing value)? cellsEditing,
    TResult? Function(_ThemesLoaded value)? themesLoaded,
  }) {
    return initial?.call(this);
  }

  @override
  @optionalTypeArgs
  TResult maybeMap<TResult extends Object?>({
    TResult Function(_Initial value)? initial,
    TResult Function(_ListLoaded value)? listLoaded,
    TResult Function(_ColumnsLoaded value)? columnsLoaded,
    TResult Function(_Loaded value)? loaded,
    TResult Function(_CellsSelected value)? cellsSelected,
    TResult Function(_CapitalCellSelected value)? capitalCellSelected,
    TResult Function(_ListEditing value)? listEditing,
    TResult Function(_CellsEditing value)? cellsEditing,
    TResult Function(_ThemesLoaded value)? themesLoaded,
    required TResult orElse(),
  }) {
    if (initial != null) {
      return initial(this);
    }
    return orElse();
  }
}

abstract class _Initial implements DiaryListState {
  const factory _Initial() = _$_Initial;
}

/// @nodoc
abstract class _$$_ListLoadedCopyWith<$Res> {
  factory _$$_ListLoadedCopyWith(
          _$_ListLoaded value, $Res Function(_$_ListLoaded) then) =
      __$$_ListLoadedCopyWithImpl<$Res>;
  @useResult
  $Res call({DiaryList diaryList, List<DiaryList> lists});
}

/// @nodoc
class __$$_ListLoadedCopyWithImpl<$Res>
    extends _$DiaryListStateCopyWithImpl<$Res, _$_ListLoaded>
    implements _$$_ListLoadedCopyWith<$Res> {
  __$$_ListLoadedCopyWithImpl(
      _$_ListLoaded _value, $Res Function(_$_ListLoaded) _then)
      : super(_value, _then);

  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? diaryList = null,
    Object? lists = null,
  }) {
    return _then(_$_ListLoaded(
      diaryList: null == diaryList
          ? _value.diaryList
          : diaryList // ignore: cast_nullable_to_non_nullable
              as DiaryList,
      lists: null == lists
          ? _value._lists
          : lists // ignore: cast_nullable_to_non_nullable
              as List<DiaryList>,
    ));
  }
}

/// @nodoc

class _$_ListLoaded implements _ListLoaded {
  const _$_ListLoaded(
      {required this.diaryList, required final List<DiaryList> lists})
      : _lists = lists;

  @override
  final DiaryList diaryList;
  final List<DiaryList> _lists;
  @override
  List<DiaryList> get lists {
    if (_lists is EqualUnmodifiableListView) return _lists;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_lists);
  }

  @override
  String toString() {
    return 'DiaryListState.listLoaded(diaryList: $diaryList, lists: $lists)';
  }

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$_ListLoaded &&
            (identical(other.diaryList, diaryList) ||
                other.diaryList == diaryList) &&
            const DeepCollectionEquality().equals(other._lists, _lists));
  }

  @override
  int get hashCode => Object.hash(
      runtimeType, diaryList, const DeepCollectionEquality().hash(_lists));

  @JsonKey(ignore: true)
  @override
  @pragma('vm:prefer-inline')
  _$$_ListLoadedCopyWith<_$_ListLoaded> get copyWith =>
      __$$_ListLoadedCopyWithImpl<_$_ListLoaded>(this, _$identity);

  @override
  @optionalTypeArgs
  TResult when<TResult extends Object?>({
    required TResult Function() initial,
    required TResult Function(DiaryList diaryList, List<DiaryList> lists)
        listLoaded,
    required TResult Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells,
            List<DiaryList> lists)
        columnsLoaded,
    required TResult Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells,
            List<DiaryCell> diaryCells,
            List<GlobalObjectKey<State<StatefulWidget>>> cellsKeys,
            List<DiaryList> lists,
            bool isListThemeViewMode,
            ListTheme? listTheme)
        loaded,
    required TResult Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells,
            List<DiaryCell> diaryCells,
            DiaryCell firstSelectedCell,
            List<DiaryCell> selectedCells,
            List<GlobalObjectKey<State<StatefulWidget>>> cellsKeys,
            List<DiaryList> lists,
            DiaryCellTextSettings defaultTextSettings,
            DiaryCellSettings defaultSettings,
            bool isListThemeViewMode,
            ListTheme? listTheme)
        cellsSelected,
    required TResult Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells,
            List<DiaryCell> diaryCells,
            CapitalCell selectedCapitalCell,
            bool isEditing,
            bool isTextEditing,
            bool isColorEditing,
            bool isBordersEditing,
            bool isBordersStyleEditing,
            List<GlobalObjectKey<State<StatefulWidget>>> cellsKeys,
            List<DiaryList> lists,
            DiaryColumnSettings defaultSettings,
            bool isListThemeViewMode,
            ListTheme? listTheme)
        capitalCellSelected,
    required TResult Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells,
            List<DiaryCell> diaryCells,
            List<GlobalObjectKey<State<StatefulWidget>>> cellsKeys,
            List<DiaryList> lists,
            bool isColumnDeleting,
            bool isColorThemeEditing,
            DiaryList? selectedList)
        listEditing,
    required TResult Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells,
            List<DiaryCell> diaryCells,
            List<GlobalObjectKey<State<StatefulWidget>>> cellsKeys,
            DiaryCell firstSelectedCell,
            List<DiaryCell> selectedCells,
            bool isTextEditing,
            bool isColorEditing,
            bool isBordersEditing,
            bool isBordersStyleEditing,
            List<DiaryList> lists,
            DiaryCellTextSettings defaultTextSettings,
            DiaryCellSettings defaultSettings,
            bool isListThemeViewMode,
            ListTheme? listTheme)
        cellsEditing,
    required TResult Function(List<ListTheme> listThemes) themesLoaded,
  }) {
    return listLoaded(diaryList, lists);
  }

  @override
  @optionalTypeArgs
  TResult? whenOrNull<TResult extends Object?>({
    TResult? Function()? initial,
    TResult? Function(DiaryList diaryList, List<DiaryList> lists)? listLoaded,
    TResult? Function(DiaryList diaryList, List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells, List<DiaryList> lists)?
        columnsLoaded,
    TResult? Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells,
            List<DiaryCell> diaryCells,
            List<GlobalObjectKey<State<StatefulWidget>>> cellsKeys,
            List<DiaryList> lists,
            bool isListThemeViewMode,
            ListTheme? listTheme)?
        loaded,
    TResult? Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells,
            List<DiaryCell> diaryCells,
            DiaryCell firstSelectedCell,
            List<DiaryCell> selectedCells,
            List<GlobalObjectKey<State<StatefulWidget>>> cellsKeys,
            List<DiaryList> lists,
            DiaryCellTextSettings defaultTextSettings,
            DiaryCellSettings defaultSettings,
            bool isListThemeViewMode,
            ListTheme? listTheme)?
        cellsSelected,
    TResult? Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells,
            List<DiaryCell> diaryCells,
            CapitalCell selectedCapitalCell,
            bool isEditing,
            bool isTextEditing,
            bool isColorEditing,
            bool isBordersEditing,
            bool isBordersStyleEditing,
            List<GlobalObjectKey<State<StatefulWidget>>> cellsKeys,
            List<DiaryList> lists,
            DiaryColumnSettings defaultSettings,
            bool isListThemeViewMode,
            ListTheme? listTheme)?
        capitalCellSelected,
    TResult? Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells,
            List<DiaryCell> diaryCells,
            List<GlobalObjectKey<State<StatefulWidget>>> cellsKeys,
            List<DiaryList> lists,
            bool isColumnDeleting,
            bool isColorThemeEditing,
            DiaryList? selectedList)?
        listEditing,
    TResult? Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells,
            List<DiaryCell> diaryCells,
            List<GlobalObjectKey<State<StatefulWidget>>> cellsKeys,
            DiaryCell firstSelectedCell,
            List<DiaryCell> selectedCells,
            bool isTextEditing,
            bool isColorEditing,
            bool isBordersEditing,
            bool isBordersStyleEditing,
            List<DiaryList> lists,
            DiaryCellTextSettings defaultTextSettings,
            DiaryCellSettings defaultSettings,
            bool isListThemeViewMode,
            ListTheme? listTheme)?
        cellsEditing,
    TResult? Function(List<ListTheme> listThemes)? themesLoaded,
  }) {
    return listLoaded?.call(diaryList, lists);
  }

  @override
  @optionalTypeArgs
  TResult maybeWhen<TResult extends Object?>({
    TResult Function()? initial,
    TResult Function(DiaryList diaryList, List<DiaryList> lists)? listLoaded,
    TResult Function(DiaryList diaryList, List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells, List<DiaryList> lists)?
        columnsLoaded,
    TResult Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells,
            List<DiaryCell> diaryCells,
            List<GlobalObjectKey<State<StatefulWidget>>> cellsKeys,
            List<DiaryList> lists,
            bool isListThemeViewMode,
            ListTheme? listTheme)?
        loaded,
    TResult Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells,
            List<DiaryCell> diaryCells,
            DiaryCell firstSelectedCell,
            List<DiaryCell> selectedCells,
            List<GlobalObjectKey<State<StatefulWidget>>> cellsKeys,
            List<DiaryList> lists,
            DiaryCellTextSettings defaultTextSettings,
            DiaryCellSettings defaultSettings,
            bool isListThemeViewMode,
            ListTheme? listTheme)?
        cellsSelected,
    TResult Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells,
            List<DiaryCell> diaryCells,
            CapitalCell selectedCapitalCell,
            bool isEditing,
            bool isTextEditing,
            bool isColorEditing,
            bool isBordersEditing,
            bool isBordersStyleEditing,
            List<GlobalObjectKey<State<StatefulWidget>>> cellsKeys,
            List<DiaryList> lists,
            DiaryColumnSettings defaultSettings,
            bool isListThemeViewMode,
            ListTheme? listTheme)?
        capitalCellSelected,
    TResult Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells,
            List<DiaryCell> diaryCells,
            List<GlobalObjectKey<State<StatefulWidget>>> cellsKeys,
            List<DiaryList> lists,
            bool isColumnDeleting,
            bool isColorThemeEditing,
            DiaryList? selectedList)?
        listEditing,
    TResult Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells,
            List<DiaryCell> diaryCells,
            List<GlobalObjectKey<State<StatefulWidget>>> cellsKeys,
            DiaryCell firstSelectedCell,
            List<DiaryCell> selectedCells,
            bool isTextEditing,
            bool isColorEditing,
            bool isBordersEditing,
            bool isBordersStyleEditing,
            List<DiaryList> lists,
            DiaryCellTextSettings defaultTextSettings,
            DiaryCellSettings defaultSettings,
            bool isListThemeViewMode,
            ListTheme? listTheme)?
        cellsEditing,
    TResult Function(List<ListTheme> listThemes)? themesLoaded,
    required TResult orElse(),
  }) {
    if (listLoaded != null) {
      return listLoaded(diaryList, lists);
    }
    return orElse();
  }

  @override
  @optionalTypeArgs
  TResult map<TResult extends Object?>({
    required TResult Function(_Initial value) initial,
    required TResult Function(_ListLoaded value) listLoaded,
    required TResult Function(_ColumnsLoaded value) columnsLoaded,
    required TResult Function(_Loaded value) loaded,
    required TResult Function(_CellsSelected value) cellsSelected,
    required TResult Function(_CapitalCellSelected value) capitalCellSelected,
    required TResult Function(_ListEditing value) listEditing,
    required TResult Function(_CellsEditing value) cellsEditing,
    required TResult Function(_ThemesLoaded value) themesLoaded,
  }) {
    return listLoaded(this);
  }

  @override
  @optionalTypeArgs
  TResult? mapOrNull<TResult extends Object?>({
    TResult? Function(_Initial value)? initial,
    TResult? Function(_ListLoaded value)? listLoaded,
    TResult? Function(_ColumnsLoaded value)? columnsLoaded,
    TResult? Function(_Loaded value)? loaded,
    TResult? Function(_CellsSelected value)? cellsSelected,
    TResult? Function(_CapitalCellSelected value)? capitalCellSelected,
    TResult? Function(_ListEditing value)? listEditing,
    TResult? Function(_CellsEditing value)? cellsEditing,
    TResult? Function(_ThemesLoaded value)? themesLoaded,
  }) {
    return listLoaded?.call(this);
  }

  @override
  @optionalTypeArgs
  TResult maybeMap<TResult extends Object?>({
    TResult Function(_Initial value)? initial,
    TResult Function(_ListLoaded value)? listLoaded,
    TResult Function(_ColumnsLoaded value)? columnsLoaded,
    TResult Function(_Loaded value)? loaded,
    TResult Function(_CellsSelected value)? cellsSelected,
    TResult Function(_CapitalCellSelected value)? capitalCellSelected,
    TResult Function(_ListEditing value)? listEditing,
    TResult Function(_CellsEditing value)? cellsEditing,
    TResult Function(_ThemesLoaded value)? themesLoaded,
    required TResult orElse(),
  }) {
    if (listLoaded != null) {
      return listLoaded(this);
    }
    return orElse();
  }
}

abstract class _ListLoaded implements DiaryListState {
  const factory _ListLoaded(
      {required final DiaryList diaryList,
      required final List<DiaryList> lists}) = _$_ListLoaded;

  DiaryList get diaryList;
  List<DiaryList> get lists;
  @JsonKey(ignore: true)
  _$$_ListLoadedCopyWith<_$_ListLoaded> get copyWith =>
      throw _privateConstructorUsedError;
}

/// @nodoc
abstract class _$$_ColumnsLoadedCopyWith<$Res> {
  factory _$$_ColumnsLoadedCopyWith(
          _$_ColumnsLoaded value, $Res Function(_$_ColumnsLoaded) then) =
      __$$_ColumnsLoadedCopyWithImpl<$Res>;
  @useResult
  $Res call(
      {DiaryList diaryList,
      List<DiaryColumn> diaryColumns,
      List<CapitalCell> capitalCells,
      List<DiaryList> lists});
}

/// @nodoc
class __$$_ColumnsLoadedCopyWithImpl<$Res>
    extends _$DiaryListStateCopyWithImpl<$Res, _$_ColumnsLoaded>
    implements _$$_ColumnsLoadedCopyWith<$Res> {
  __$$_ColumnsLoadedCopyWithImpl(
      _$_ColumnsLoaded _value, $Res Function(_$_ColumnsLoaded) _then)
      : super(_value, _then);

  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? diaryList = null,
    Object? diaryColumns = null,
    Object? capitalCells = null,
    Object? lists = null,
  }) {
    return _then(_$_ColumnsLoaded(
      diaryList: null == diaryList
          ? _value.diaryList
          : diaryList // ignore: cast_nullable_to_non_nullable
              as DiaryList,
      diaryColumns: null == diaryColumns
          ? _value._diaryColumns
          : diaryColumns // ignore: cast_nullable_to_non_nullable
              as List<DiaryColumn>,
      capitalCells: null == capitalCells
          ? _value._capitalCells
          : capitalCells // ignore: cast_nullable_to_non_nullable
              as List<CapitalCell>,
      lists: null == lists
          ? _value._lists
          : lists // ignore: cast_nullable_to_non_nullable
              as List<DiaryList>,
    ));
  }
}

/// @nodoc

class _$_ColumnsLoaded implements _ColumnsLoaded {
  const _$_ColumnsLoaded(
      {required this.diaryList,
      required final List<DiaryColumn> diaryColumns,
      required final List<CapitalCell> capitalCells,
      required final List<DiaryList> lists})
      : _diaryColumns = diaryColumns,
        _capitalCells = capitalCells,
        _lists = lists;

  @override
  final DiaryList diaryList;
  final List<DiaryColumn> _diaryColumns;
  @override
  List<DiaryColumn> get diaryColumns {
    if (_diaryColumns is EqualUnmodifiableListView) return _diaryColumns;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_diaryColumns);
  }

  final List<CapitalCell> _capitalCells;
  @override
  List<CapitalCell> get capitalCells {
    if (_capitalCells is EqualUnmodifiableListView) return _capitalCells;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_capitalCells);
  }

  final List<DiaryList> _lists;
  @override
  List<DiaryList> get lists {
    if (_lists is EqualUnmodifiableListView) return _lists;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_lists);
  }

  @override
  String toString() {
    return 'DiaryListState.columnsLoaded(diaryList: $diaryList, diaryColumns: $diaryColumns, capitalCells: $capitalCells, lists: $lists)';
  }

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$_ColumnsLoaded &&
            (identical(other.diaryList, diaryList) ||
                other.diaryList == diaryList) &&
            const DeepCollectionEquality()
                .equals(other._diaryColumns, _diaryColumns) &&
            const DeepCollectionEquality()
                .equals(other._capitalCells, _capitalCells) &&
            const DeepCollectionEquality().equals(other._lists, _lists));
  }

  @override
  int get hashCode => Object.hash(
      runtimeType,
      diaryList,
      const DeepCollectionEquality().hash(_diaryColumns),
      const DeepCollectionEquality().hash(_capitalCells),
      const DeepCollectionEquality().hash(_lists));

  @JsonKey(ignore: true)
  @override
  @pragma('vm:prefer-inline')
  _$$_ColumnsLoadedCopyWith<_$_ColumnsLoaded> get copyWith =>
      __$$_ColumnsLoadedCopyWithImpl<_$_ColumnsLoaded>(this, _$identity);

  @override
  @optionalTypeArgs
  TResult when<TResult extends Object?>({
    required TResult Function() initial,
    required TResult Function(DiaryList diaryList, List<DiaryList> lists)
        listLoaded,
    required TResult Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells,
            List<DiaryList> lists)
        columnsLoaded,
    required TResult Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells,
            List<DiaryCell> diaryCells,
            List<GlobalObjectKey<State<StatefulWidget>>> cellsKeys,
            List<DiaryList> lists,
            bool isListThemeViewMode,
            ListTheme? listTheme)
        loaded,
    required TResult Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells,
            List<DiaryCell> diaryCells,
            DiaryCell firstSelectedCell,
            List<DiaryCell> selectedCells,
            List<GlobalObjectKey<State<StatefulWidget>>> cellsKeys,
            List<DiaryList> lists,
            DiaryCellTextSettings defaultTextSettings,
            DiaryCellSettings defaultSettings,
            bool isListThemeViewMode,
            ListTheme? listTheme)
        cellsSelected,
    required TResult Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells,
            List<DiaryCell> diaryCells,
            CapitalCell selectedCapitalCell,
            bool isEditing,
            bool isTextEditing,
            bool isColorEditing,
            bool isBordersEditing,
            bool isBordersStyleEditing,
            List<GlobalObjectKey<State<StatefulWidget>>> cellsKeys,
            List<DiaryList> lists,
            DiaryColumnSettings defaultSettings,
            bool isListThemeViewMode,
            ListTheme? listTheme)
        capitalCellSelected,
    required TResult Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells,
            List<DiaryCell> diaryCells,
            List<GlobalObjectKey<State<StatefulWidget>>> cellsKeys,
            List<DiaryList> lists,
            bool isColumnDeleting,
            bool isColorThemeEditing,
            DiaryList? selectedList)
        listEditing,
    required TResult Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells,
            List<DiaryCell> diaryCells,
            List<GlobalObjectKey<State<StatefulWidget>>> cellsKeys,
            DiaryCell firstSelectedCell,
            List<DiaryCell> selectedCells,
            bool isTextEditing,
            bool isColorEditing,
            bool isBordersEditing,
            bool isBordersStyleEditing,
            List<DiaryList> lists,
            DiaryCellTextSettings defaultTextSettings,
            DiaryCellSettings defaultSettings,
            bool isListThemeViewMode,
            ListTheme? listTheme)
        cellsEditing,
    required TResult Function(List<ListTheme> listThemes) themesLoaded,
  }) {
    return columnsLoaded(diaryList, diaryColumns, capitalCells, lists);
  }

  @override
  @optionalTypeArgs
  TResult? whenOrNull<TResult extends Object?>({
    TResult? Function()? initial,
    TResult? Function(DiaryList diaryList, List<DiaryList> lists)? listLoaded,
    TResult? Function(DiaryList diaryList, List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells, List<DiaryList> lists)?
        columnsLoaded,
    TResult? Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells,
            List<DiaryCell> diaryCells,
            List<GlobalObjectKey<State<StatefulWidget>>> cellsKeys,
            List<DiaryList> lists,
            bool isListThemeViewMode,
            ListTheme? listTheme)?
        loaded,
    TResult? Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells,
            List<DiaryCell> diaryCells,
            DiaryCell firstSelectedCell,
            List<DiaryCell> selectedCells,
            List<GlobalObjectKey<State<StatefulWidget>>> cellsKeys,
            List<DiaryList> lists,
            DiaryCellTextSettings defaultTextSettings,
            DiaryCellSettings defaultSettings,
            bool isListThemeViewMode,
            ListTheme? listTheme)?
        cellsSelected,
    TResult? Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells,
            List<DiaryCell> diaryCells,
            CapitalCell selectedCapitalCell,
            bool isEditing,
            bool isTextEditing,
            bool isColorEditing,
            bool isBordersEditing,
            bool isBordersStyleEditing,
            List<GlobalObjectKey<State<StatefulWidget>>> cellsKeys,
            List<DiaryList> lists,
            DiaryColumnSettings defaultSettings,
            bool isListThemeViewMode,
            ListTheme? listTheme)?
        capitalCellSelected,
    TResult? Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells,
            List<DiaryCell> diaryCells,
            List<GlobalObjectKey<State<StatefulWidget>>> cellsKeys,
            List<DiaryList> lists,
            bool isColumnDeleting,
            bool isColorThemeEditing,
            DiaryList? selectedList)?
        listEditing,
    TResult? Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells,
            List<DiaryCell> diaryCells,
            List<GlobalObjectKey<State<StatefulWidget>>> cellsKeys,
            DiaryCell firstSelectedCell,
            List<DiaryCell> selectedCells,
            bool isTextEditing,
            bool isColorEditing,
            bool isBordersEditing,
            bool isBordersStyleEditing,
            List<DiaryList> lists,
            DiaryCellTextSettings defaultTextSettings,
            DiaryCellSettings defaultSettings,
            bool isListThemeViewMode,
            ListTheme? listTheme)?
        cellsEditing,
    TResult? Function(List<ListTheme> listThemes)? themesLoaded,
  }) {
    return columnsLoaded?.call(diaryList, diaryColumns, capitalCells, lists);
  }

  @override
  @optionalTypeArgs
  TResult maybeWhen<TResult extends Object?>({
    TResult Function()? initial,
    TResult Function(DiaryList diaryList, List<DiaryList> lists)? listLoaded,
    TResult Function(DiaryList diaryList, List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells, List<DiaryList> lists)?
        columnsLoaded,
    TResult Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells,
            List<DiaryCell> diaryCells,
            List<GlobalObjectKey<State<StatefulWidget>>> cellsKeys,
            List<DiaryList> lists,
            bool isListThemeViewMode,
            ListTheme? listTheme)?
        loaded,
    TResult Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells,
            List<DiaryCell> diaryCells,
            DiaryCell firstSelectedCell,
            List<DiaryCell> selectedCells,
            List<GlobalObjectKey<State<StatefulWidget>>> cellsKeys,
            List<DiaryList> lists,
            DiaryCellTextSettings defaultTextSettings,
            DiaryCellSettings defaultSettings,
            bool isListThemeViewMode,
            ListTheme? listTheme)?
        cellsSelected,
    TResult Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells,
            List<DiaryCell> diaryCells,
            CapitalCell selectedCapitalCell,
            bool isEditing,
            bool isTextEditing,
            bool isColorEditing,
            bool isBordersEditing,
            bool isBordersStyleEditing,
            List<GlobalObjectKey<State<StatefulWidget>>> cellsKeys,
            List<DiaryList> lists,
            DiaryColumnSettings defaultSettings,
            bool isListThemeViewMode,
            ListTheme? listTheme)?
        capitalCellSelected,
    TResult Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells,
            List<DiaryCell> diaryCells,
            List<GlobalObjectKey<State<StatefulWidget>>> cellsKeys,
            List<DiaryList> lists,
            bool isColumnDeleting,
            bool isColorThemeEditing,
            DiaryList? selectedList)?
        listEditing,
    TResult Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells,
            List<DiaryCell> diaryCells,
            List<GlobalObjectKey<State<StatefulWidget>>> cellsKeys,
            DiaryCell firstSelectedCell,
            List<DiaryCell> selectedCells,
            bool isTextEditing,
            bool isColorEditing,
            bool isBordersEditing,
            bool isBordersStyleEditing,
            List<DiaryList> lists,
            DiaryCellTextSettings defaultTextSettings,
            DiaryCellSettings defaultSettings,
            bool isListThemeViewMode,
            ListTheme? listTheme)?
        cellsEditing,
    TResult Function(List<ListTheme> listThemes)? themesLoaded,
    required TResult orElse(),
  }) {
    if (columnsLoaded != null) {
      return columnsLoaded(diaryList, diaryColumns, capitalCells, lists);
    }
    return orElse();
  }

  @override
  @optionalTypeArgs
  TResult map<TResult extends Object?>({
    required TResult Function(_Initial value) initial,
    required TResult Function(_ListLoaded value) listLoaded,
    required TResult Function(_ColumnsLoaded value) columnsLoaded,
    required TResult Function(_Loaded value) loaded,
    required TResult Function(_CellsSelected value) cellsSelected,
    required TResult Function(_CapitalCellSelected value) capitalCellSelected,
    required TResult Function(_ListEditing value) listEditing,
    required TResult Function(_CellsEditing value) cellsEditing,
    required TResult Function(_ThemesLoaded value) themesLoaded,
  }) {
    return columnsLoaded(this);
  }

  @override
  @optionalTypeArgs
  TResult? mapOrNull<TResult extends Object?>({
    TResult? Function(_Initial value)? initial,
    TResult? Function(_ListLoaded value)? listLoaded,
    TResult? Function(_ColumnsLoaded value)? columnsLoaded,
    TResult? Function(_Loaded value)? loaded,
    TResult? Function(_CellsSelected value)? cellsSelected,
    TResult? Function(_CapitalCellSelected value)? capitalCellSelected,
    TResult? Function(_ListEditing value)? listEditing,
    TResult? Function(_CellsEditing value)? cellsEditing,
    TResult? Function(_ThemesLoaded value)? themesLoaded,
  }) {
    return columnsLoaded?.call(this);
  }

  @override
  @optionalTypeArgs
  TResult maybeMap<TResult extends Object?>({
    TResult Function(_Initial value)? initial,
    TResult Function(_ListLoaded value)? listLoaded,
    TResult Function(_ColumnsLoaded value)? columnsLoaded,
    TResult Function(_Loaded value)? loaded,
    TResult Function(_CellsSelected value)? cellsSelected,
    TResult Function(_CapitalCellSelected value)? capitalCellSelected,
    TResult Function(_ListEditing value)? listEditing,
    TResult Function(_CellsEditing value)? cellsEditing,
    TResult Function(_ThemesLoaded value)? themesLoaded,
    required TResult orElse(),
  }) {
    if (columnsLoaded != null) {
      return columnsLoaded(this);
    }
    return orElse();
  }
}

abstract class _ColumnsLoaded implements DiaryListState {
  const factory _ColumnsLoaded(
      {required final DiaryList diaryList,
      required final List<DiaryColumn> diaryColumns,
      required final List<CapitalCell> capitalCells,
      required final List<DiaryList> lists}) = _$_ColumnsLoaded;

  DiaryList get diaryList;
  List<DiaryColumn> get diaryColumns;
  List<CapitalCell> get capitalCells;
  List<DiaryList> get lists;
  @JsonKey(ignore: true)
  _$$_ColumnsLoadedCopyWith<_$_ColumnsLoaded> get copyWith =>
      throw _privateConstructorUsedError;
}

/// @nodoc
abstract class _$$_LoadedCopyWith<$Res> {
  factory _$$_LoadedCopyWith(_$_Loaded value, $Res Function(_$_Loaded) then) =
      __$$_LoadedCopyWithImpl<$Res>;
  @useResult
  $Res call(
      {DiaryList diaryList,
      List<DiaryColumn> diaryColumns,
      List<CapitalCell> capitalCells,
      List<DiaryCell> diaryCells,
      List<GlobalObjectKey<State<StatefulWidget>>> cellsKeys,
      List<DiaryList> lists,
      bool isListThemeViewMode,
      ListTheme? listTheme});
}

/// @nodoc
class __$$_LoadedCopyWithImpl<$Res>
    extends _$DiaryListStateCopyWithImpl<$Res, _$_Loaded>
    implements _$$_LoadedCopyWith<$Res> {
  __$$_LoadedCopyWithImpl(_$_Loaded _value, $Res Function(_$_Loaded) _then)
      : super(_value, _then);

  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? diaryList = null,
    Object? diaryColumns = null,
    Object? capitalCells = null,
    Object? diaryCells = null,
    Object? cellsKeys = null,
    Object? lists = null,
    Object? isListThemeViewMode = null,
    Object? listTheme = freezed,
  }) {
    return _then(_$_Loaded(
      diaryList: null == diaryList
          ? _value.diaryList
          : diaryList // ignore: cast_nullable_to_non_nullable
              as DiaryList,
      diaryColumns: null == diaryColumns
          ? _value._diaryColumns
          : diaryColumns // ignore: cast_nullable_to_non_nullable
              as List<DiaryColumn>,
      capitalCells: null == capitalCells
          ? _value._capitalCells
          : capitalCells // ignore: cast_nullable_to_non_nullable
              as List<CapitalCell>,
      diaryCells: null == diaryCells
          ? _value._diaryCells
          : diaryCells // ignore: cast_nullable_to_non_nullable
              as List<DiaryCell>,
      cellsKeys: null == cellsKeys
          ? _value._cellsKeys
          : cellsKeys // ignore: cast_nullable_to_non_nullable
              as List<GlobalObjectKey<State<StatefulWidget>>>,
      lists: null == lists
          ? _value._lists
          : lists // ignore: cast_nullable_to_non_nullable
              as List<DiaryList>,
      isListThemeViewMode: null == isListThemeViewMode
          ? _value.isListThemeViewMode
          : isListThemeViewMode // ignore: cast_nullable_to_non_nullable
              as bool,
      listTheme: freezed == listTheme
          ? _value.listTheme
          : listTheme // ignore: cast_nullable_to_non_nullable
              as ListTheme?,
    ));
  }
}

/// @nodoc

class _$_Loaded implements _Loaded {
  const _$_Loaded(
      {required this.diaryList,
      required final List<DiaryColumn> diaryColumns,
      required final List<CapitalCell> capitalCells,
      required final List<DiaryCell> diaryCells,
      required final List<GlobalObjectKey<State<StatefulWidget>>> cellsKeys,
      required final List<DiaryList> lists,
      required this.isListThemeViewMode,
      this.listTheme})
      : _diaryColumns = diaryColumns,
        _capitalCells = capitalCells,
        _diaryCells = diaryCells,
        _cellsKeys = cellsKeys,
        _lists = lists;

  @override
  final DiaryList diaryList;
  final List<DiaryColumn> _diaryColumns;
  @override
  List<DiaryColumn> get diaryColumns {
    if (_diaryColumns is EqualUnmodifiableListView) return _diaryColumns;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_diaryColumns);
  }

  final List<CapitalCell> _capitalCells;
  @override
  List<CapitalCell> get capitalCells {
    if (_capitalCells is EqualUnmodifiableListView) return _capitalCells;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_capitalCells);
  }

  final List<DiaryCell> _diaryCells;
  @override
  List<DiaryCell> get diaryCells {
    if (_diaryCells is EqualUnmodifiableListView) return _diaryCells;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_diaryCells);
  }

  final List<GlobalObjectKey<State<StatefulWidget>>> _cellsKeys;
  @override
  List<GlobalObjectKey<State<StatefulWidget>>> get cellsKeys {
    if (_cellsKeys is EqualUnmodifiableListView) return _cellsKeys;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_cellsKeys);
  }

  final List<DiaryList> _lists;
  @override
  List<DiaryList> get lists {
    if (_lists is EqualUnmodifiableListView) return _lists;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_lists);
  }

  @override
  final bool isListThemeViewMode;
  @override
  final ListTheme? listTheme;

  @override
  String toString() {
    return 'DiaryListState.loaded(diaryList: $diaryList, diaryColumns: $diaryColumns, capitalCells: $capitalCells, diaryCells: $diaryCells, cellsKeys: $cellsKeys, lists: $lists, isListThemeViewMode: $isListThemeViewMode, listTheme: $listTheme)';
  }

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$_Loaded &&
            (identical(other.diaryList, diaryList) ||
                other.diaryList == diaryList) &&
            const DeepCollectionEquality()
                .equals(other._diaryColumns, _diaryColumns) &&
            const DeepCollectionEquality()
                .equals(other._capitalCells, _capitalCells) &&
            const DeepCollectionEquality()
                .equals(other._diaryCells, _diaryCells) &&
            const DeepCollectionEquality()
                .equals(other._cellsKeys, _cellsKeys) &&
            const DeepCollectionEquality().equals(other._lists, _lists) &&
            (identical(other.isListThemeViewMode, isListThemeViewMode) ||
                other.isListThemeViewMode == isListThemeViewMode) &&
            (identical(other.listTheme, listTheme) ||
                other.listTheme == listTheme));
  }

  @override
  int get hashCode => Object.hash(
      runtimeType,
      diaryList,
      const DeepCollectionEquality().hash(_diaryColumns),
      const DeepCollectionEquality().hash(_capitalCells),
      const DeepCollectionEquality().hash(_diaryCells),
      const DeepCollectionEquality().hash(_cellsKeys),
      const DeepCollectionEquality().hash(_lists),
      isListThemeViewMode,
      listTheme);

  @JsonKey(ignore: true)
  @override
  @pragma('vm:prefer-inline')
  _$$_LoadedCopyWith<_$_Loaded> get copyWith =>
      __$$_LoadedCopyWithImpl<_$_Loaded>(this, _$identity);

  @override
  @optionalTypeArgs
  TResult when<TResult extends Object?>({
    required TResult Function() initial,
    required TResult Function(DiaryList diaryList, List<DiaryList> lists)
        listLoaded,
    required TResult Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells,
            List<DiaryList> lists)
        columnsLoaded,
    required TResult Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells,
            List<DiaryCell> diaryCells,
            List<GlobalObjectKey<State<StatefulWidget>>> cellsKeys,
            List<DiaryList> lists,
            bool isListThemeViewMode,
            ListTheme? listTheme)
        loaded,
    required TResult Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells,
            List<DiaryCell> diaryCells,
            DiaryCell firstSelectedCell,
            List<DiaryCell> selectedCells,
            List<GlobalObjectKey<State<StatefulWidget>>> cellsKeys,
            List<DiaryList> lists,
            DiaryCellTextSettings defaultTextSettings,
            DiaryCellSettings defaultSettings,
            bool isListThemeViewMode,
            ListTheme? listTheme)
        cellsSelected,
    required TResult Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells,
            List<DiaryCell> diaryCells,
            CapitalCell selectedCapitalCell,
            bool isEditing,
            bool isTextEditing,
            bool isColorEditing,
            bool isBordersEditing,
            bool isBordersStyleEditing,
            List<GlobalObjectKey<State<StatefulWidget>>> cellsKeys,
            List<DiaryList> lists,
            DiaryColumnSettings defaultSettings,
            bool isListThemeViewMode,
            ListTheme? listTheme)
        capitalCellSelected,
    required TResult Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells,
            List<DiaryCell> diaryCells,
            List<GlobalObjectKey<State<StatefulWidget>>> cellsKeys,
            List<DiaryList> lists,
            bool isColumnDeleting,
            bool isColorThemeEditing,
            DiaryList? selectedList)
        listEditing,
    required TResult Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells,
            List<DiaryCell> diaryCells,
            List<GlobalObjectKey<State<StatefulWidget>>> cellsKeys,
            DiaryCell firstSelectedCell,
            List<DiaryCell> selectedCells,
            bool isTextEditing,
            bool isColorEditing,
            bool isBordersEditing,
            bool isBordersStyleEditing,
            List<DiaryList> lists,
            DiaryCellTextSettings defaultTextSettings,
            DiaryCellSettings defaultSettings,
            bool isListThemeViewMode,
            ListTheme? listTheme)
        cellsEditing,
    required TResult Function(List<ListTheme> listThemes) themesLoaded,
  }) {
    return loaded(diaryList, diaryColumns, capitalCells, diaryCells, cellsKeys,
        lists, isListThemeViewMode, listTheme);
  }

  @override
  @optionalTypeArgs
  TResult? whenOrNull<TResult extends Object?>({
    TResult? Function()? initial,
    TResult? Function(DiaryList diaryList, List<DiaryList> lists)? listLoaded,
    TResult? Function(DiaryList diaryList, List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells, List<DiaryList> lists)?
        columnsLoaded,
    TResult? Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells,
            List<DiaryCell> diaryCells,
            List<GlobalObjectKey<State<StatefulWidget>>> cellsKeys,
            List<DiaryList> lists,
            bool isListThemeViewMode,
            ListTheme? listTheme)?
        loaded,
    TResult? Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells,
            List<DiaryCell> diaryCells,
            DiaryCell firstSelectedCell,
            List<DiaryCell> selectedCells,
            List<GlobalObjectKey<State<StatefulWidget>>> cellsKeys,
            List<DiaryList> lists,
            DiaryCellTextSettings defaultTextSettings,
            DiaryCellSettings defaultSettings,
            bool isListThemeViewMode,
            ListTheme? listTheme)?
        cellsSelected,
    TResult? Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells,
            List<DiaryCell> diaryCells,
            CapitalCell selectedCapitalCell,
            bool isEditing,
            bool isTextEditing,
            bool isColorEditing,
            bool isBordersEditing,
            bool isBordersStyleEditing,
            List<GlobalObjectKey<State<StatefulWidget>>> cellsKeys,
            List<DiaryList> lists,
            DiaryColumnSettings defaultSettings,
            bool isListThemeViewMode,
            ListTheme? listTheme)?
        capitalCellSelected,
    TResult? Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells,
            List<DiaryCell> diaryCells,
            List<GlobalObjectKey<State<StatefulWidget>>> cellsKeys,
            List<DiaryList> lists,
            bool isColumnDeleting,
            bool isColorThemeEditing,
            DiaryList? selectedList)?
        listEditing,
    TResult? Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells,
            List<DiaryCell> diaryCells,
            List<GlobalObjectKey<State<StatefulWidget>>> cellsKeys,
            DiaryCell firstSelectedCell,
            List<DiaryCell> selectedCells,
            bool isTextEditing,
            bool isColorEditing,
            bool isBordersEditing,
            bool isBordersStyleEditing,
            List<DiaryList> lists,
            DiaryCellTextSettings defaultTextSettings,
            DiaryCellSettings defaultSettings,
            bool isListThemeViewMode,
            ListTheme? listTheme)?
        cellsEditing,
    TResult? Function(List<ListTheme> listThemes)? themesLoaded,
  }) {
    return loaded?.call(diaryList, diaryColumns, capitalCells, diaryCells,
        cellsKeys, lists, isListThemeViewMode, listTheme);
  }

  @override
  @optionalTypeArgs
  TResult maybeWhen<TResult extends Object?>({
    TResult Function()? initial,
    TResult Function(DiaryList diaryList, List<DiaryList> lists)? listLoaded,
    TResult Function(DiaryList diaryList, List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells, List<DiaryList> lists)?
        columnsLoaded,
    TResult Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells,
            List<DiaryCell> diaryCells,
            List<GlobalObjectKey<State<StatefulWidget>>> cellsKeys,
            List<DiaryList> lists,
            bool isListThemeViewMode,
            ListTheme? listTheme)?
        loaded,
    TResult Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells,
            List<DiaryCell> diaryCells,
            DiaryCell firstSelectedCell,
            List<DiaryCell> selectedCells,
            List<GlobalObjectKey<State<StatefulWidget>>> cellsKeys,
            List<DiaryList> lists,
            DiaryCellTextSettings defaultTextSettings,
            DiaryCellSettings defaultSettings,
            bool isListThemeViewMode,
            ListTheme? listTheme)?
        cellsSelected,
    TResult Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells,
            List<DiaryCell> diaryCells,
            CapitalCell selectedCapitalCell,
            bool isEditing,
            bool isTextEditing,
            bool isColorEditing,
            bool isBordersEditing,
            bool isBordersStyleEditing,
            List<GlobalObjectKey<State<StatefulWidget>>> cellsKeys,
            List<DiaryList> lists,
            DiaryColumnSettings defaultSettings,
            bool isListThemeViewMode,
            ListTheme? listTheme)?
        capitalCellSelected,
    TResult Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells,
            List<DiaryCell> diaryCells,
            List<GlobalObjectKey<State<StatefulWidget>>> cellsKeys,
            List<DiaryList> lists,
            bool isColumnDeleting,
            bool isColorThemeEditing,
            DiaryList? selectedList)?
        listEditing,
    TResult Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells,
            List<DiaryCell> diaryCells,
            List<GlobalObjectKey<State<StatefulWidget>>> cellsKeys,
            DiaryCell firstSelectedCell,
            List<DiaryCell> selectedCells,
            bool isTextEditing,
            bool isColorEditing,
            bool isBordersEditing,
            bool isBordersStyleEditing,
            List<DiaryList> lists,
            DiaryCellTextSettings defaultTextSettings,
            DiaryCellSettings defaultSettings,
            bool isListThemeViewMode,
            ListTheme? listTheme)?
        cellsEditing,
    TResult Function(List<ListTheme> listThemes)? themesLoaded,
    required TResult orElse(),
  }) {
    if (loaded != null) {
      return loaded(diaryList, diaryColumns, capitalCells, diaryCells,
          cellsKeys, lists, isListThemeViewMode, listTheme);
    }
    return orElse();
  }

  @override
  @optionalTypeArgs
  TResult map<TResult extends Object?>({
    required TResult Function(_Initial value) initial,
    required TResult Function(_ListLoaded value) listLoaded,
    required TResult Function(_ColumnsLoaded value) columnsLoaded,
    required TResult Function(_Loaded value) loaded,
    required TResult Function(_CellsSelected value) cellsSelected,
    required TResult Function(_CapitalCellSelected value) capitalCellSelected,
    required TResult Function(_ListEditing value) listEditing,
    required TResult Function(_CellsEditing value) cellsEditing,
    required TResult Function(_ThemesLoaded value) themesLoaded,
  }) {
    return loaded(this);
  }

  @override
  @optionalTypeArgs
  TResult? mapOrNull<TResult extends Object?>({
    TResult? Function(_Initial value)? initial,
    TResult? Function(_ListLoaded value)? listLoaded,
    TResult? Function(_ColumnsLoaded value)? columnsLoaded,
    TResult? Function(_Loaded value)? loaded,
    TResult? Function(_CellsSelected value)? cellsSelected,
    TResult? Function(_CapitalCellSelected value)? capitalCellSelected,
    TResult? Function(_ListEditing value)? listEditing,
    TResult? Function(_CellsEditing value)? cellsEditing,
    TResult? Function(_ThemesLoaded value)? themesLoaded,
  }) {
    return loaded?.call(this);
  }

  @override
  @optionalTypeArgs
  TResult maybeMap<TResult extends Object?>({
    TResult Function(_Initial value)? initial,
    TResult Function(_ListLoaded value)? listLoaded,
    TResult Function(_ColumnsLoaded value)? columnsLoaded,
    TResult Function(_Loaded value)? loaded,
    TResult Function(_CellsSelected value)? cellsSelected,
    TResult Function(_CapitalCellSelected value)? capitalCellSelected,
    TResult Function(_ListEditing value)? listEditing,
    TResult Function(_CellsEditing value)? cellsEditing,
    TResult Function(_ThemesLoaded value)? themesLoaded,
    required TResult orElse(),
  }) {
    if (loaded != null) {
      return loaded(this);
    }
    return orElse();
  }
}

abstract class _Loaded implements DiaryListState {
  const factory _Loaded(
      {required final DiaryList diaryList,
      required final List<DiaryColumn> diaryColumns,
      required final List<CapitalCell> capitalCells,
      required final List<DiaryCell> diaryCells,
      required final List<GlobalObjectKey<State<StatefulWidget>>> cellsKeys,
      required final List<DiaryList> lists,
      required final bool isListThemeViewMode,
      final ListTheme? listTheme}) = _$_Loaded;

  DiaryList get diaryList;
  List<DiaryColumn> get diaryColumns;
  List<CapitalCell> get capitalCells;
  List<DiaryCell> get diaryCells;
  List<GlobalObjectKey<State<StatefulWidget>>> get cellsKeys;
  List<DiaryList> get lists;
  bool get isListThemeViewMode;
  ListTheme? get listTheme;
  @JsonKey(ignore: true)
  _$$_LoadedCopyWith<_$_Loaded> get copyWith =>
      throw _privateConstructorUsedError;
}

/// @nodoc
abstract class _$$_CellsSelectedCopyWith<$Res> {
  factory _$$_CellsSelectedCopyWith(
          _$_CellsSelected value, $Res Function(_$_CellsSelected) then) =
      __$$_CellsSelectedCopyWithImpl<$Res>;
  @useResult
  $Res call(
      {DiaryList diaryList,
      List<DiaryColumn> diaryColumns,
      List<CapitalCell> capitalCells,
      List<DiaryCell> diaryCells,
      DiaryCell firstSelectedCell,
      List<DiaryCell> selectedCells,
      List<GlobalObjectKey<State<StatefulWidget>>> cellsKeys,
      List<DiaryList> lists,
      DiaryCellTextSettings defaultTextSettings,
      DiaryCellSettings defaultSettings,
      bool isListThemeViewMode,
      ListTheme? listTheme});
}

/// @nodoc
class __$$_CellsSelectedCopyWithImpl<$Res>
    extends _$DiaryListStateCopyWithImpl<$Res, _$_CellsSelected>
    implements _$$_CellsSelectedCopyWith<$Res> {
  __$$_CellsSelectedCopyWithImpl(
      _$_CellsSelected _value, $Res Function(_$_CellsSelected) _then)
      : super(_value, _then);

  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? diaryList = null,
    Object? diaryColumns = null,
    Object? capitalCells = null,
    Object? diaryCells = null,
    Object? firstSelectedCell = null,
    Object? selectedCells = null,
    Object? cellsKeys = null,
    Object? lists = null,
    Object? defaultTextSettings = null,
    Object? defaultSettings = null,
    Object? isListThemeViewMode = null,
    Object? listTheme = freezed,
  }) {
    return _then(_$_CellsSelected(
      diaryList: null == diaryList
          ? _value.diaryList
          : diaryList // ignore: cast_nullable_to_non_nullable
              as DiaryList,
      diaryColumns: null == diaryColumns
          ? _value._diaryColumns
          : diaryColumns // ignore: cast_nullable_to_non_nullable
              as List<DiaryColumn>,
      capitalCells: null == capitalCells
          ? _value._capitalCells
          : capitalCells // ignore: cast_nullable_to_non_nullable
              as List<CapitalCell>,
      diaryCells: null == diaryCells
          ? _value._diaryCells
          : diaryCells // ignore: cast_nullable_to_non_nullable
              as List<DiaryCell>,
      firstSelectedCell: null == firstSelectedCell
          ? _value.firstSelectedCell
          : firstSelectedCell // ignore: cast_nullable_to_non_nullable
              as DiaryCell,
      selectedCells: null == selectedCells
          ? _value._selectedCells
          : selectedCells // ignore: cast_nullable_to_non_nullable
              as List<DiaryCell>,
      cellsKeys: null == cellsKeys
          ? _value._cellsKeys
          : cellsKeys // ignore: cast_nullable_to_non_nullable
              as List<GlobalObjectKey<State<StatefulWidget>>>,
      lists: null == lists
          ? _value._lists
          : lists // ignore: cast_nullable_to_non_nullable
              as List<DiaryList>,
      defaultTextSettings: null == defaultTextSettings
          ? _value.defaultTextSettings
          : defaultTextSettings // ignore: cast_nullable_to_non_nullable
              as DiaryCellTextSettings,
      defaultSettings: null == defaultSettings
          ? _value.defaultSettings
          : defaultSettings // ignore: cast_nullable_to_non_nullable
              as DiaryCellSettings,
      isListThemeViewMode: null == isListThemeViewMode
          ? _value.isListThemeViewMode
          : isListThemeViewMode // ignore: cast_nullable_to_non_nullable
              as bool,
      listTheme: freezed == listTheme
          ? _value.listTheme
          : listTheme // ignore: cast_nullable_to_non_nullable
              as ListTheme?,
    ));
  }
}

/// @nodoc

class _$_CellsSelected implements _CellsSelected {
  const _$_CellsSelected(
      {required this.diaryList,
      required final List<DiaryColumn> diaryColumns,
      required final List<CapitalCell> capitalCells,
      required final List<DiaryCell> diaryCells,
      required this.firstSelectedCell,
      required final List<DiaryCell> selectedCells,
      required final List<GlobalObjectKey<State<StatefulWidget>>> cellsKeys,
      required final List<DiaryList> lists,
      required this.defaultTextSettings,
      required this.defaultSettings,
      required this.isListThemeViewMode,
      this.listTheme})
      : _diaryColumns = diaryColumns,
        _capitalCells = capitalCells,
        _diaryCells = diaryCells,
        _selectedCells = selectedCells,
        _cellsKeys = cellsKeys,
        _lists = lists;

  @override
  final DiaryList diaryList;
  final List<DiaryColumn> _diaryColumns;
  @override
  List<DiaryColumn> get diaryColumns {
    if (_diaryColumns is EqualUnmodifiableListView) return _diaryColumns;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_diaryColumns);
  }

  final List<CapitalCell> _capitalCells;
  @override
  List<CapitalCell> get capitalCells {
    if (_capitalCells is EqualUnmodifiableListView) return _capitalCells;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_capitalCells);
  }

  final List<DiaryCell> _diaryCells;
  @override
  List<DiaryCell> get diaryCells {
    if (_diaryCells is EqualUnmodifiableListView) return _diaryCells;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_diaryCells);
  }

  @override
  final DiaryCell firstSelectedCell;
  final List<DiaryCell> _selectedCells;
  @override
  List<DiaryCell> get selectedCells {
    if (_selectedCells is EqualUnmodifiableListView) return _selectedCells;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_selectedCells);
  }

  final List<GlobalObjectKey<State<StatefulWidget>>> _cellsKeys;
  @override
  List<GlobalObjectKey<State<StatefulWidget>>> get cellsKeys {
    if (_cellsKeys is EqualUnmodifiableListView) return _cellsKeys;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_cellsKeys);
  }

  final List<DiaryList> _lists;
  @override
  List<DiaryList> get lists {
    if (_lists is EqualUnmodifiableListView) return _lists;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_lists);
  }

  @override
  final DiaryCellTextSettings defaultTextSettings;
  @override
  final DiaryCellSettings defaultSettings;
  @override
  final bool isListThemeViewMode;
  @override
  final ListTheme? listTheme;

  @override
  String toString() {
    return 'DiaryListState.cellsSelected(diaryList: $diaryList, diaryColumns: $diaryColumns, capitalCells: $capitalCells, diaryCells: $diaryCells, firstSelectedCell: $firstSelectedCell, selectedCells: $selectedCells, cellsKeys: $cellsKeys, lists: $lists, defaultTextSettings: $defaultTextSettings, defaultSettings: $defaultSettings, isListThemeViewMode: $isListThemeViewMode, listTheme: $listTheme)';
  }

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$_CellsSelected &&
            (identical(other.diaryList, diaryList) ||
                other.diaryList == diaryList) &&
            const DeepCollectionEquality()
                .equals(other._diaryColumns, _diaryColumns) &&
            const DeepCollectionEquality()
                .equals(other._capitalCells, _capitalCells) &&
            const DeepCollectionEquality()
                .equals(other._diaryCells, _diaryCells) &&
            (identical(other.firstSelectedCell, firstSelectedCell) ||
                other.firstSelectedCell == firstSelectedCell) &&
            const DeepCollectionEquality()
                .equals(other._selectedCells, _selectedCells) &&
            const DeepCollectionEquality()
                .equals(other._cellsKeys, _cellsKeys) &&
            const DeepCollectionEquality().equals(other._lists, _lists) &&
            (identical(other.defaultTextSettings, defaultTextSettings) ||
                other.defaultTextSettings == defaultTextSettings) &&
            (identical(other.defaultSettings, defaultSettings) ||
                other.defaultSettings == defaultSettings) &&
            (identical(other.isListThemeViewMode, isListThemeViewMode) ||
                other.isListThemeViewMode == isListThemeViewMode) &&
            (identical(other.listTheme, listTheme) ||
                other.listTheme == listTheme));
  }

  @override
  int get hashCode => Object.hash(
      runtimeType,
      diaryList,
      const DeepCollectionEquality().hash(_diaryColumns),
      const DeepCollectionEquality().hash(_capitalCells),
      const DeepCollectionEquality().hash(_diaryCells),
      firstSelectedCell,
      const DeepCollectionEquality().hash(_selectedCells),
      const DeepCollectionEquality().hash(_cellsKeys),
      const DeepCollectionEquality().hash(_lists),
      defaultTextSettings,
      defaultSettings,
      isListThemeViewMode,
      listTheme);

  @JsonKey(ignore: true)
  @override
  @pragma('vm:prefer-inline')
  _$$_CellsSelectedCopyWith<_$_CellsSelected> get copyWith =>
      __$$_CellsSelectedCopyWithImpl<_$_CellsSelected>(this, _$identity);

  @override
  @optionalTypeArgs
  TResult when<TResult extends Object?>({
    required TResult Function() initial,
    required TResult Function(DiaryList diaryList, List<DiaryList> lists)
        listLoaded,
    required TResult Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells,
            List<DiaryList> lists)
        columnsLoaded,
    required TResult Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells,
            List<DiaryCell> diaryCells,
            List<GlobalObjectKey<State<StatefulWidget>>> cellsKeys,
            List<DiaryList> lists,
            bool isListThemeViewMode,
            ListTheme? listTheme)
        loaded,
    required TResult Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells,
            List<DiaryCell> diaryCells,
            DiaryCell firstSelectedCell,
            List<DiaryCell> selectedCells,
            List<GlobalObjectKey<State<StatefulWidget>>> cellsKeys,
            List<DiaryList> lists,
            DiaryCellTextSettings defaultTextSettings,
            DiaryCellSettings defaultSettings,
            bool isListThemeViewMode,
            ListTheme? listTheme)
        cellsSelected,
    required TResult Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells,
            List<DiaryCell> diaryCells,
            CapitalCell selectedCapitalCell,
            bool isEditing,
            bool isTextEditing,
            bool isColorEditing,
            bool isBordersEditing,
            bool isBordersStyleEditing,
            List<GlobalObjectKey<State<StatefulWidget>>> cellsKeys,
            List<DiaryList> lists,
            DiaryColumnSettings defaultSettings,
            bool isListThemeViewMode,
            ListTheme? listTheme)
        capitalCellSelected,
    required TResult Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells,
            List<DiaryCell> diaryCells,
            List<GlobalObjectKey<State<StatefulWidget>>> cellsKeys,
            List<DiaryList> lists,
            bool isColumnDeleting,
            bool isColorThemeEditing,
            DiaryList? selectedList)
        listEditing,
    required TResult Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells,
            List<DiaryCell> diaryCells,
            List<GlobalObjectKey<State<StatefulWidget>>> cellsKeys,
            DiaryCell firstSelectedCell,
            List<DiaryCell> selectedCells,
            bool isTextEditing,
            bool isColorEditing,
            bool isBordersEditing,
            bool isBordersStyleEditing,
            List<DiaryList> lists,
            DiaryCellTextSettings defaultTextSettings,
            DiaryCellSettings defaultSettings,
            bool isListThemeViewMode,
            ListTheme? listTheme)
        cellsEditing,
    required TResult Function(List<ListTheme> listThemes) themesLoaded,
  }) {
    return cellsSelected(
        diaryList,
        diaryColumns,
        capitalCells,
        diaryCells,
        firstSelectedCell,
        selectedCells,
        cellsKeys,
        lists,
        defaultTextSettings,
        defaultSettings,
        isListThemeViewMode,
        listTheme);
  }

  @override
  @optionalTypeArgs
  TResult? whenOrNull<TResult extends Object?>({
    TResult? Function()? initial,
    TResult? Function(DiaryList diaryList, List<DiaryList> lists)? listLoaded,
    TResult? Function(DiaryList diaryList, List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells, List<DiaryList> lists)?
        columnsLoaded,
    TResult? Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells,
            List<DiaryCell> diaryCells,
            List<GlobalObjectKey<State<StatefulWidget>>> cellsKeys,
            List<DiaryList> lists,
            bool isListThemeViewMode,
            ListTheme? listTheme)?
        loaded,
    TResult? Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells,
            List<DiaryCell> diaryCells,
            DiaryCell firstSelectedCell,
            List<DiaryCell> selectedCells,
            List<GlobalObjectKey<State<StatefulWidget>>> cellsKeys,
            List<DiaryList> lists,
            DiaryCellTextSettings defaultTextSettings,
            DiaryCellSettings defaultSettings,
            bool isListThemeViewMode,
            ListTheme? listTheme)?
        cellsSelected,
    TResult? Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells,
            List<DiaryCell> diaryCells,
            CapitalCell selectedCapitalCell,
            bool isEditing,
            bool isTextEditing,
            bool isColorEditing,
            bool isBordersEditing,
            bool isBordersStyleEditing,
            List<GlobalObjectKey<State<StatefulWidget>>> cellsKeys,
            List<DiaryList> lists,
            DiaryColumnSettings defaultSettings,
            bool isListThemeViewMode,
            ListTheme? listTheme)?
        capitalCellSelected,
    TResult? Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells,
            List<DiaryCell> diaryCells,
            List<GlobalObjectKey<State<StatefulWidget>>> cellsKeys,
            List<DiaryList> lists,
            bool isColumnDeleting,
            bool isColorThemeEditing,
            DiaryList? selectedList)?
        listEditing,
    TResult? Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells,
            List<DiaryCell> diaryCells,
            List<GlobalObjectKey<State<StatefulWidget>>> cellsKeys,
            DiaryCell firstSelectedCell,
            List<DiaryCell> selectedCells,
            bool isTextEditing,
            bool isColorEditing,
            bool isBordersEditing,
            bool isBordersStyleEditing,
            List<DiaryList> lists,
            DiaryCellTextSettings defaultTextSettings,
            DiaryCellSettings defaultSettings,
            bool isListThemeViewMode,
            ListTheme? listTheme)?
        cellsEditing,
    TResult? Function(List<ListTheme> listThemes)? themesLoaded,
  }) {
    return cellsSelected?.call(
        diaryList,
        diaryColumns,
        capitalCells,
        diaryCells,
        firstSelectedCell,
        selectedCells,
        cellsKeys,
        lists,
        defaultTextSettings,
        defaultSettings,
        isListThemeViewMode,
        listTheme);
  }

  @override
  @optionalTypeArgs
  TResult maybeWhen<TResult extends Object?>({
    TResult Function()? initial,
    TResult Function(DiaryList diaryList, List<DiaryList> lists)? listLoaded,
    TResult Function(DiaryList diaryList, List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells, List<DiaryList> lists)?
        columnsLoaded,
    TResult Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells,
            List<DiaryCell> diaryCells,
            List<GlobalObjectKey<State<StatefulWidget>>> cellsKeys,
            List<DiaryList> lists,
            bool isListThemeViewMode,
            ListTheme? listTheme)?
        loaded,
    TResult Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells,
            List<DiaryCell> diaryCells,
            DiaryCell firstSelectedCell,
            List<DiaryCell> selectedCells,
            List<GlobalObjectKey<State<StatefulWidget>>> cellsKeys,
            List<DiaryList> lists,
            DiaryCellTextSettings defaultTextSettings,
            DiaryCellSettings defaultSettings,
            bool isListThemeViewMode,
            ListTheme? listTheme)?
        cellsSelected,
    TResult Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells,
            List<DiaryCell> diaryCells,
            CapitalCell selectedCapitalCell,
            bool isEditing,
            bool isTextEditing,
            bool isColorEditing,
            bool isBordersEditing,
            bool isBordersStyleEditing,
            List<GlobalObjectKey<State<StatefulWidget>>> cellsKeys,
            List<DiaryList> lists,
            DiaryColumnSettings defaultSettings,
            bool isListThemeViewMode,
            ListTheme? listTheme)?
        capitalCellSelected,
    TResult Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells,
            List<DiaryCell> diaryCells,
            List<GlobalObjectKey<State<StatefulWidget>>> cellsKeys,
            List<DiaryList> lists,
            bool isColumnDeleting,
            bool isColorThemeEditing,
            DiaryList? selectedList)?
        listEditing,
    TResult Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells,
            List<DiaryCell> diaryCells,
            List<GlobalObjectKey<State<StatefulWidget>>> cellsKeys,
            DiaryCell firstSelectedCell,
            List<DiaryCell> selectedCells,
            bool isTextEditing,
            bool isColorEditing,
            bool isBordersEditing,
            bool isBordersStyleEditing,
            List<DiaryList> lists,
            DiaryCellTextSettings defaultTextSettings,
            DiaryCellSettings defaultSettings,
            bool isListThemeViewMode,
            ListTheme? listTheme)?
        cellsEditing,
    TResult Function(List<ListTheme> listThemes)? themesLoaded,
    required TResult orElse(),
  }) {
    if (cellsSelected != null) {
      return cellsSelected(
          diaryList,
          diaryColumns,
          capitalCells,
          diaryCells,
          firstSelectedCell,
          selectedCells,
          cellsKeys,
          lists,
          defaultTextSettings,
          defaultSettings,
          isListThemeViewMode,
          listTheme);
    }
    return orElse();
  }

  @override
  @optionalTypeArgs
  TResult map<TResult extends Object?>({
    required TResult Function(_Initial value) initial,
    required TResult Function(_ListLoaded value) listLoaded,
    required TResult Function(_ColumnsLoaded value) columnsLoaded,
    required TResult Function(_Loaded value) loaded,
    required TResult Function(_CellsSelected value) cellsSelected,
    required TResult Function(_CapitalCellSelected value) capitalCellSelected,
    required TResult Function(_ListEditing value) listEditing,
    required TResult Function(_CellsEditing value) cellsEditing,
    required TResult Function(_ThemesLoaded value) themesLoaded,
  }) {
    return cellsSelected(this);
  }

  @override
  @optionalTypeArgs
  TResult? mapOrNull<TResult extends Object?>({
    TResult? Function(_Initial value)? initial,
    TResult? Function(_ListLoaded value)? listLoaded,
    TResult? Function(_ColumnsLoaded value)? columnsLoaded,
    TResult? Function(_Loaded value)? loaded,
    TResult? Function(_CellsSelected value)? cellsSelected,
    TResult? Function(_CapitalCellSelected value)? capitalCellSelected,
    TResult? Function(_ListEditing value)? listEditing,
    TResult? Function(_CellsEditing value)? cellsEditing,
    TResult? Function(_ThemesLoaded value)? themesLoaded,
  }) {
    return cellsSelected?.call(this);
  }

  @override
  @optionalTypeArgs
  TResult maybeMap<TResult extends Object?>({
    TResult Function(_Initial value)? initial,
    TResult Function(_ListLoaded value)? listLoaded,
    TResult Function(_ColumnsLoaded value)? columnsLoaded,
    TResult Function(_Loaded value)? loaded,
    TResult Function(_CellsSelected value)? cellsSelected,
    TResult Function(_CapitalCellSelected value)? capitalCellSelected,
    TResult Function(_ListEditing value)? listEditing,
    TResult Function(_CellsEditing value)? cellsEditing,
    TResult Function(_ThemesLoaded value)? themesLoaded,
    required TResult orElse(),
  }) {
    if (cellsSelected != null) {
      return cellsSelected(this);
    }
    return orElse();
  }
}

abstract class _CellsSelected implements DiaryListState {
  const factory _CellsSelected(
      {required final DiaryList diaryList,
      required final List<DiaryColumn> diaryColumns,
      required final List<CapitalCell> capitalCells,
      required final List<DiaryCell> diaryCells,
      required final DiaryCell firstSelectedCell,
      required final List<DiaryCell> selectedCells,
      required final List<GlobalObjectKey<State<StatefulWidget>>> cellsKeys,
      required final List<DiaryList> lists,
      required final DiaryCellTextSettings defaultTextSettings,
      required final DiaryCellSettings defaultSettings,
      required final bool isListThemeViewMode,
      final ListTheme? listTheme}) = _$_CellsSelected;

  DiaryList get diaryList;
  List<DiaryColumn> get diaryColumns;
  List<CapitalCell> get capitalCells;
  List<DiaryCell> get diaryCells;
  DiaryCell get firstSelectedCell;
  List<DiaryCell> get selectedCells;
  List<GlobalObjectKey<State<StatefulWidget>>> get cellsKeys;
  List<DiaryList> get lists;
  DiaryCellTextSettings get defaultTextSettings;
  DiaryCellSettings get defaultSettings;
  bool get isListThemeViewMode;
  ListTheme? get listTheme;
  @JsonKey(ignore: true)
  _$$_CellsSelectedCopyWith<_$_CellsSelected> get copyWith =>
      throw _privateConstructorUsedError;
}

/// @nodoc
abstract class _$$_CapitalCellSelectedCopyWith<$Res> {
  factory _$$_CapitalCellSelectedCopyWith(_$_CapitalCellSelected value,
          $Res Function(_$_CapitalCellSelected) then) =
      __$$_CapitalCellSelectedCopyWithImpl<$Res>;
  @useResult
  $Res call(
      {DiaryList diaryList,
      List<DiaryColumn> diaryColumns,
      List<CapitalCell> capitalCells,
      List<DiaryCell> diaryCells,
      CapitalCell selectedCapitalCell,
      bool isEditing,
      bool isTextEditing,
      bool isColorEditing,
      bool isBordersEditing,
      bool isBordersStyleEditing,
      List<GlobalObjectKey<State<StatefulWidget>>> cellsKeys,
      List<DiaryList> lists,
      DiaryColumnSettings defaultSettings,
      bool isListThemeViewMode,
      ListTheme? listTheme});
}

/// @nodoc
class __$$_CapitalCellSelectedCopyWithImpl<$Res>
    extends _$DiaryListStateCopyWithImpl<$Res, _$_CapitalCellSelected>
    implements _$$_CapitalCellSelectedCopyWith<$Res> {
  __$$_CapitalCellSelectedCopyWithImpl(_$_CapitalCellSelected _value,
      $Res Function(_$_CapitalCellSelected) _then)
      : super(_value, _then);

  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? diaryList = null,
    Object? diaryColumns = null,
    Object? capitalCells = null,
    Object? diaryCells = null,
    Object? selectedCapitalCell = null,
    Object? isEditing = null,
    Object? isTextEditing = null,
    Object? isColorEditing = null,
    Object? isBordersEditing = null,
    Object? isBordersStyleEditing = null,
    Object? cellsKeys = null,
    Object? lists = null,
    Object? defaultSettings = null,
    Object? isListThemeViewMode = null,
    Object? listTheme = freezed,
  }) {
    return _then(_$_CapitalCellSelected(
      diaryList: null == diaryList
          ? _value.diaryList
          : diaryList // ignore: cast_nullable_to_non_nullable
              as DiaryList,
      diaryColumns: null == diaryColumns
          ? _value._diaryColumns
          : diaryColumns // ignore: cast_nullable_to_non_nullable
              as List<DiaryColumn>,
      capitalCells: null == capitalCells
          ? _value._capitalCells
          : capitalCells // ignore: cast_nullable_to_non_nullable
              as List<CapitalCell>,
      diaryCells: null == diaryCells
          ? _value._diaryCells
          : diaryCells // ignore: cast_nullable_to_non_nullable
              as List<DiaryCell>,
      selectedCapitalCell: null == selectedCapitalCell
          ? _value.selectedCapitalCell
          : selectedCapitalCell // ignore: cast_nullable_to_non_nullable
              as CapitalCell,
      isEditing: null == isEditing
          ? _value.isEditing
          : isEditing // ignore: cast_nullable_to_non_nullable
              as bool,
      isTextEditing: null == isTextEditing
          ? _value.isTextEditing
          : isTextEditing // ignore: cast_nullable_to_non_nullable
              as bool,
      isColorEditing: null == isColorEditing
          ? _value.isColorEditing
          : isColorEditing // ignore: cast_nullable_to_non_nullable
              as bool,
      isBordersEditing: null == isBordersEditing
          ? _value.isBordersEditing
          : isBordersEditing // ignore: cast_nullable_to_non_nullable
              as bool,
      isBordersStyleEditing: null == isBordersStyleEditing
          ? _value.isBordersStyleEditing
          : isBordersStyleEditing // ignore: cast_nullable_to_non_nullable
              as bool,
      cellsKeys: null == cellsKeys
          ? _value._cellsKeys
          : cellsKeys // ignore: cast_nullable_to_non_nullable
              as List<GlobalObjectKey<State<StatefulWidget>>>,
      lists: null == lists
          ? _value._lists
          : lists // ignore: cast_nullable_to_non_nullable
              as List<DiaryList>,
      defaultSettings: null == defaultSettings
          ? _value.defaultSettings
          : defaultSettings // ignore: cast_nullable_to_non_nullable
              as DiaryColumnSettings,
      isListThemeViewMode: null == isListThemeViewMode
          ? _value.isListThemeViewMode
          : isListThemeViewMode // ignore: cast_nullable_to_non_nullable
              as bool,
      listTheme: freezed == listTheme
          ? _value.listTheme
          : listTheme // ignore: cast_nullable_to_non_nullable
              as ListTheme?,
    ));
  }
}

/// @nodoc

class _$_CapitalCellSelected implements _CapitalCellSelected {
  const _$_CapitalCellSelected(
      {required this.diaryList,
      required final List<DiaryColumn> diaryColumns,
      required final List<CapitalCell> capitalCells,
      required final List<DiaryCell> diaryCells,
      required this.selectedCapitalCell,
      required this.isEditing,
      required this.isTextEditing,
      required this.isColorEditing,
      required this.isBordersEditing,
      required this.isBordersStyleEditing,
      required final List<GlobalObjectKey<State<StatefulWidget>>> cellsKeys,
      required final List<DiaryList> lists,
      required this.defaultSettings,
      required this.isListThemeViewMode,
      this.listTheme})
      : _diaryColumns = diaryColumns,
        _capitalCells = capitalCells,
        _diaryCells = diaryCells,
        _cellsKeys = cellsKeys,
        _lists = lists;

  @override
  final DiaryList diaryList;
  final List<DiaryColumn> _diaryColumns;
  @override
  List<DiaryColumn> get diaryColumns {
    if (_diaryColumns is EqualUnmodifiableListView) return _diaryColumns;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_diaryColumns);
  }

  final List<CapitalCell> _capitalCells;
  @override
  List<CapitalCell> get capitalCells {
    if (_capitalCells is EqualUnmodifiableListView) return _capitalCells;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_capitalCells);
  }

  final List<DiaryCell> _diaryCells;
  @override
  List<DiaryCell> get diaryCells {
    if (_diaryCells is EqualUnmodifiableListView) return _diaryCells;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_diaryCells);
  }

  @override
  final CapitalCell selectedCapitalCell;
  @override
  final bool isEditing;
  @override
  final bool isTextEditing;
  @override
  final bool isColorEditing;
  @override
  final bool isBordersEditing;
  @override
  final bool isBordersStyleEditing;
  final List<GlobalObjectKey<State<StatefulWidget>>> _cellsKeys;
  @override
  List<GlobalObjectKey<State<StatefulWidget>>> get cellsKeys {
    if (_cellsKeys is EqualUnmodifiableListView) return _cellsKeys;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_cellsKeys);
  }

  final List<DiaryList> _lists;
  @override
  List<DiaryList> get lists {
    if (_lists is EqualUnmodifiableListView) return _lists;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_lists);
  }

  @override
  final DiaryColumnSettings defaultSettings;
  @override
  final bool isListThemeViewMode;
  @override
  final ListTheme? listTheme;

  @override
  String toString() {
    return 'DiaryListState.capitalCellSelected(diaryList: $diaryList, diaryColumns: $diaryColumns, capitalCells: $capitalCells, diaryCells: $diaryCells, selectedCapitalCell: $selectedCapitalCell, isEditing: $isEditing, isTextEditing: $isTextEditing, isColorEditing: $isColorEditing, isBordersEditing: $isBordersEditing, isBordersStyleEditing: $isBordersStyleEditing, cellsKeys: $cellsKeys, lists: $lists, defaultSettings: $defaultSettings, isListThemeViewMode: $isListThemeViewMode, listTheme: $listTheme)';
  }

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$_CapitalCellSelected &&
            (identical(other.diaryList, diaryList) ||
                other.diaryList == diaryList) &&
            const DeepCollectionEquality()
                .equals(other._diaryColumns, _diaryColumns) &&
            const DeepCollectionEquality()
                .equals(other._capitalCells, _capitalCells) &&
            const DeepCollectionEquality()
                .equals(other._diaryCells, _diaryCells) &&
            (identical(other.selectedCapitalCell, selectedCapitalCell) ||
                other.selectedCapitalCell == selectedCapitalCell) &&
            (identical(other.isEditing, isEditing) ||
                other.isEditing == isEditing) &&
            (identical(other.isTextEditing, isTextEditing) ||
                other.isTextEditing == isTextEditing) &&
            (identical(other.isColorEditing, isColorEditing) ||
                other.isColorEditing == isColorEditing) &&
            (identical(other.isBordersEditing, isBordersEditing) ||
                other.isBordersEditing == isBordersEditing) &&
            (identical(other.isBordersStyleEditing, isBordersStyleEditing) ||
                other.isBordersStyleEditing == isBordersStyleEditing) &&
            const DeepCollectionEquality()
                .equals(other._cellsKeys, _cellsKeys) &&
            const DeepCollectionEquality().equals(other._lists, _lists) &&
            (identical(other.defaultSettings, defaultSettings) ||
                other.defaultSettings == defaultSettings) &&
            (identical(other.isListThemeViewMode, isListThemeViewMode) ||
                other.isListThemeViewMode == isListThemeViewMode) &&
            (identical(other.listTheme, listTheme) ||
                other.listTheme == listTheme));
  }

  @override
  int get hashCode => Object.hash(
      runtimeType,
      diaryList,
      const DeepCollectionEquality().hash(_diaryColumns),
      const DeepCollectionEquality().hash(_capitalCells),
      const DeepCollectionEquality().hash(_diaryCells),
      selectedCapitalCell,
      isEditing,
      isTextEditing,
      isColorEditing,
      isBordersEditing,
      isBordersStyleEditing,
      const DeepCollectionEquality().hash(_cellsKeys),
      const DeepCollectionEquality().hash(_lists),
      defaultSettings,
      isListThemeViewMode,
      listTheme);

  @JsonKey(ignore: true)
  @override
  @pragma('vm:prefer-inline')
  _$$_CapitalCellSelectedCopyWith<_$_CapitalCellSelected> get copyWith =>
      __$$_CapitalCellSelectedCopyWithImpl<_$_CapitalCellSelected>(
          this, _$identity);

  @override
  @optionalTypeArgs
  TResult when<TResult extends Object?>({
    required TResult Function() initial,
    required TResult Function(DiaryList diaryList, List<DiaryList> lists)
        listLoaded,
    required TResult Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells,
            List<DiaryList> lists)
        columnsLoaded,
    required TResult Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells,
            List<DiaryCell> diaryCells,
            List<GlobalObjectKey<State<StatefulWidget>>> cellsKeys,
            List<DiaryList> lists,
            bool isListThemeViewMode,
            ListTheme? listTheme)
        loaded,
    required TResult Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells,
            List<DiaryCell> diaryCells,
            DiaryCell firstSelectedCell,
            List<DiaryCell> selectedCells,
            List<GlobalObjectKey<State<StatefulWidget>>> cellsKeys,
            List<DiaryList> lists,
            DiaryCellTextSettings defaultTextSettings,
            DiaryCellSettings defaultSettings,
            bool isListThemeViewMode,
            ListTheme? listTheme)
        cellsSelected,
    required TResult Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells,
            List<DiaryCell> diaryCells,
            CapitalCell selectedCapitalCell,
            bool isEditing,
            bool isTextEditing,
            bool isColorEditing,
            bool isBordersEditing,
            bool isBordersStyleEditing,
            List<GlobalObjectKey<State<StatefulWidget>>> cellsKeys,
            List<DiaryList> lists,
            DiaryColumnSettings defaultSettings,
            bool isListThemeViewMode,
            ListTheme? listTheme)
        capitalCellSelected,
    required TResult Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells,
            List<DiaryCell> diaryCells,
            List<GlobalObjectKey<State<StatefulWidget>>> cellsKeys,
            List<DiaryList> lists,
            bool isColumnDeleting,
            bool isColorThemeEditing,
            DiaryList? selectedList)
        listEditing,
    required TResult Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells,
            List<DiaryCell> diaryCells,
            List<GlobalObjectKey<State<StatefulWidget>>> cellsKeys,
            DiaryCell firstSelectedCell,
            List<DiaryCell> selectedCells,
            bool isTextEditing,
            bool isColorEditing,
            bool isBordersEditing,
            bool isBordersStyleEditing,
            List<DiaryList> lists,
            DiaryCellTextSettings defaultTextSettings,
            DiaryCellSettings defaultSettings,
            bool isListThemeViewMode,
            ListTheme? listTheme)
        cellsEditing,
    required TResult Function(List<ListTheme> listThemes) themesLoaded,
  }) {
    return capitalCellSelected(
        diaryList,
        diaryColumns,
        capitalCells,
        diaryCells,
        selectedCapitalCell,
        isEditing,
        isTextEditing,
        isColorEditing,
        isBordersEditing,
        isBordersStyleEditing,
        cellsKeys,
        lists,
        defaultSettings,
        isListThemeViewMode,
        listTheme);
  }

  @override
  @optionalTypeArgs
  TResult? whenOrNull<TResult extends Object?>({
    TResult? Function()? initial,
    TResult? Function(DiaryList diaryList, List<DiaryList> lists)? listLoaded,
    TResult? Function(DiaryList diaryList, List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells, List<DiaryList> lists)?
        columnsLoaded,
    TResult? Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells,
            List<DiaryCell> diaryCells,
            List<GlobalObjectKey<State<StatefulWidget>>> cellsKeys,
            List<DiaryList> lists,
            bool isListThemeViewMode,
            ListTheme? listTheme)?
        loaded,
    TResult? Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells,
            List<DiaryCell> diaryCells,
            DiaryCell firstSelectedCell,
            List<DiaryCell> selectedCells,
            List<GlobalObjectKey<State<StatefulWidget>>> cellsKeys,
            List<DiaryList> lists,
            DiaryCellTextSettings defaultTextSettings,
            DiaryCellSettings defaultSettings,
            bool isListThemeViewMode,
            ListTheme? listTheme)?
        cellsSelected,
    TResult? Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells,
            List<DiaryCell> diaryCells,
            CapitalCell selectedCapitalCell,
            bool isEditing,
            bool isTextEditing,
            bool isColorEditing,
            bool isBordersEditing,
            bool isBordersStyleEditing,
            List<GlobalObjectKey<State<StatefulWidget>>> cellsKeys,
            List<DiaryList> lists,
            DiaryColumnSettings defaultSettings,
            bool isListThemeViewMode,
            ListTheme? listTheme)?
        capitalCellSelected,
    TResult? Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells,
            List<DiaryCell> diaryCells,
            List<GlobalObjectKey<State<StatefulWidget>>> cellsKeys,
            List<DiaryList> lists,
            bool isColumnDeleting,
            bool isColorThemeEditing,
            DiaryList? selectedList)?
        listEditing,
    TResult? Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells,
            List<DiaryCell> diaryCells,
            List<GlobalObjectKey<State<StatefulWidget>>> cellsKeys,
            DiaryCell firstSelectedCell,
            List<DiaryCell> selectedCells,
            bool isTextEditing,
            bool isColorEditing,
            bool isBordersEditing,
            bool isBordersStyleEditing,
            List<DiaryList> lists,
            DiaryCellTextSettings defaultTextSettings,
            DiaryCellSettings defaultSettings,
            bool isListThemeViewMode,
            ListTheme? listTheme)?
        cellsEditing,
    TResult? Function(List<ListTheme> listThemes)? themesLoaded,
  }) {
    return capitalCellSelected?.call(
        diaryList,
        diaryColumns,
        capitalCells,
        diaryCells,
        selectedCapitalCell,
        isEditing,
        isTextEditing,
        isColorEditing,
        isBordersEditing,
        isBordersStyleEditing,
        cellsKeys,
        lists,
        defaultSettings,
        isListThemeViewMode,
        listTheme);
  }

  @override
  @optionalTypeArgs
  TResult maybeWhen<TResult extends Object?>({
    TResult Function()? initial,
    TResult Function(DiaryList diaryList, List<DiaryList> lists)? listLoaded,
    TResult Function(DiaryList diaryList, List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells, List<DiaryList> lists)?
        columnsLoaded,
    TResult Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells,
            List<DiaryCell> diaryCells,
            List<GlobalObjectKey<State<StatefulWidget>>> cellsKeys,
            List<DiaryList> lists,
            bool isListThemeViewMode,
            ListTheme? listTheme)?
        loaded,
    TResult Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells,
            List<DiaryCell> diaryCells,
            DiaryCell firstSelectedCell,
            List<DiaryCell> selectedCells,
            List<GlobalObjectKey<State<StatefulWidget>>> cellsKeys,
            List<DiaryList> lists,
            DiaryCellTextSettings defaultTextSettings,
            DiaryCellSettings defaultSettings,
            bool isListThemeViewMode,
            ListTheme? listTheme)?
        cellsSelected,
    TResult Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells,
            List<DiaryCell> diaryCells,
            CapitalCell selectedCapitalCell,
            bool isEditing,
            bool isTextEditing,
            bool isColorEditing,
            bool isBordersEditing,
            bool isBordersStyleEditing,
            List<GlobalObjectKey<State<StatefulWidget>>> cellsKeys,
            List<DiaryList> lists,
            DiaryColumnSettings defaultSettings,
            bool isListThemeViewMode,
            ListTheme? listTheme)?
        capitalCellSelected,
    TResult Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells,
            List<DiaryCell> diaryCells,
            List<GlobalObjectKey<State<StatefulWidget>>> cellsKeys,
            List<DiaryList> lists,
            bool isColumnDeleting,
            bool isColorThemeEditing,
            DiaryList? selectedList)?
        listEditing,
    TResult Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells,
            List<DiaryCell> diaryCells,
            List<GlobalObjectKey<State<StatefulWidget>>> cellsKeys,
            DiaryCell firstSelectedCell,
            List<DiaryCell> selectedCells,
            bool isTextEditing,
            bool isColorEditing,
            bool isBordersEditing,
            bool isBordersStyleEditing,
            List<DiaryList> lists,
            DiaryCellTextSettings defaultTextSettings,
            DiaryCellSettings defaultSettings,
            bool isListThemeViewMode,
            ListTheme? listTheme)?
        cellsEditing,
    TResult Function(List<ListTheme> listThemes)? themesLoaded,
    required TResult orElse(),
  }) {
    if (capitalCellSelected != null) {
      return capitalCellSelected(
          diaryList,
          diaryColumns,
          capitalCells,
          diaryCells,
          selectedCapitalCell,
          isEditing,
          isTextEditing,
          isColorEditing,
          isBordersEditing,
          isBordersStyleEditing,
          cellsKeys,
          lists,
          defaultSettings,
          isListThemeViewMode,
          listTheme);
    }
    return orElse();
  }

  @override
  @optionalTypeArgs
  TResult map<TResult extends Object?>({
    required TResult Function(_Initial value) initial,
    required TResult Function(_ListLoaded value) listLoaded,
    required TResult Function(_ColumnsLoaded value) columnsLoaded,
    required TResult Function(_Loaded value) loaded,
    required TResult Function(_CellsSelected value) cellsSelected,
    required TResult Function(_CapitalCellSelected value) capitalCellSelected,
    required TResult Function(_ListEditing value) listEditing,
    required TResult Function(_CellsEditing value) cellsEditing,
    required TResult Function(_ThemesLoaded value) themesLoaded,
  }) {
    return capitalCellSelected(this);
  }

  @override
  @optionalTypeArgs
  TResult? mapOrNull<TResult extends Object?>({
    TResult? Function(_Initial value)? initial,
    TResult? Function(_ListLoaded value)? listLoaded,
    TResult? Function(_ColumnsLoaded value)? columnsLoaded,
    TResult? Function(_Loaded value)? loaded,
    TResult? Function(_CellsSelected value)? cellsSelected,
    TResult? Function(_CapitalCellSelected value)? capitalCellSelected,
    TResult? Function(_ListEditing value)? listEditing,
    TResult? Function(_CellsEditing value)? cellsEditing,
    TResult? Function(_ThemesLoaded value)? themesLoaded,
  }) {
    return capitalCellSelected?.call(this);
  }

  @override
  @optionalTypeArgs
  TResult maybeMap<TResult extends Object?>({
    TResult Function(_Initial value)? initial,
    TResult Function(_ListLoaded value)? listLoaded,
    TResult Function(_ColumnsLoaded value)? columnsLoaded,
    TResult Function(_Loaded value)? loaded,
    TResult Function(_CellsSelected value)? cellsSelected,
    TResult Function(_CapitalCellSelected value)? capitalCellSelected,
    TResult Function(_ListEditing value)? listEditing,
    TResult Function(_CellsEditing value)? cellsEditing,
    TResult Function(_ThemesLoaded value)? themesLoaded,
    required TResult orElse(),
  }) {
    if (capitalCellSelected != null) {
      return capitalCellSelected(this);
    }
    return orElse();
  }
}

abstract class _CapitalCellSelected implements DiaryListState {
  const factory _CapitalCellSelected(
      {required final DiaryList diaryList,
      required final List<DiaryColumn> diaryColumns,
      required final List<CapitalCell> capitalCells,
      required final List<DiaryCell> diaryCells,
      required final CapitalCell selectedCapitalCell,
      required final bool isEditing,
      required final bool isTextEditing,
      required final bool isColorEditing,
      required final bool isBordersEditing,
      required final bool isBordersStyleEditing,
      required final List<GlobalObjectKey<State<StatefulWidget>>> cellsKeys,
      required final List<DiaryList> lists,
      required final DiaryColumnSettings defaultSettings,
      required final bool isListThemeViewMode,
      final ListTheme? listTheme}) = _$_CapitalCellSelected;

  DiaryList get diaryList;
  List<DiaryColumn> get diaryColumns;
  List<CapitalCell> get capitalCells;
  List<DiaryCell> get diaryCells;
  CapitalCell get selectedCapitalCell;
  bool get isEditing;
  bool get isTextEditing;
  bool get isColorEditing;
  bool get isBordersEditing;
  bool get isBordersStyleEditing;
  List<GlobalObjectKey<State<StatefulWidget>>> get cellsKeys;
  List<DiaryList> get lists;
  DiaryColumnSettings get defaultSettings;
  bool get isListThemeViewMode;
  ListTheme? get listTheme;
  @JsonKey(ignore: true)
  _$$_CapitalCellSelectedCopyWith<_$_CapitalCellSelected> get copyWith =>
      throw _privateConstructorUsedError;
}

/// @nodoc
abstract class _$$_ListEditingCopyWith<$Res> {
  factory _$$_ListEditingCopyWith(
          _$_ListEditing value, $Res Function(_$_ListEditing) then) =
      __$$_ListEditingCopyWithImpl<$Res>;
  @useResult
  $Res call(
      {DiaryList diaryList,
      List<DiaryColumn> diaryColumns,
      List<CapitalCell> capitalCells,
      List<DiaryCell> diaryCells,
      List<GlobalObjectKey<State<StatefulWidget>>> cellsKeys,
      List<DiaryList> lists,
      bool isColumnDeleting,
      bool isColorThemeEditing,
      DiaryList? selectedList});
}

/// @nodoc
class __$$_ListEditingCopyWithImpl<$Res>
    extends _$DiaryListStateCopyWithImpl<$Res, _$_ListEditing>
    implements _$$_ListEditingCopyWith<$Res> {
  __$$_ListEditingCopyWithImpl(
      _$_ListEditing _value, $Res Function(_$_ListEditing) _then)
      : super(_value, _then);

  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? diaryList = null,
    Object? diaryColumns = null,
    Object? capitalCells = null,
    Object? diaryCells = null,
    Object? cellsKeys = null,
    Object? lists = null,
    Object? isColumnDeleting = null,
    Object? isColorThemeEditing = null,
    Object? selectedList = freezed,
  }) {
    return _then(_$_ListEditing(
      diaryList: null == diaryList
          ? _value.diaryList
          : diaryList // ignore: cast_nullable_to_non_nullable
              as DiaryList,
      diaryColumns: null == diaryColumns
          ? _value._diaryColumns
          : diaryColumns // ignore: cast_nullable_to_non_nullable
              as List<DiaryColumn>,
      capitalCells: null == capitalCells
          ? _value._capitalCells
          : capitalCells // ignore: cast_nullable_to_non_nullable
              as List<CapitalCell>,
      diaryCells: null == diaryCells
          ? _value._diaryCells
          : diaryCells // ignore: cast_nullable_to_non_nullable
              as List<DiaryCell>,
      cellsKeys: null == cellsKeys
          ? _value._cellsKeys
          : cellsKeys // ignore: cast_nullable_to_non_nullable
              as List<GlobalObjectKey<State<StatefulWidget>>>,
      lists: null == lists
          ? _value._lists
          : lists // ignore: cast_nullable_to_non_nullable
              as List<DiaryList>,
      isColumnDeleting: null == isColumnDeleting
          ? _value.isColumnDeleting
          : isColumnDeleting // ignore: cast_nullable_to_non_nullable
              as bool,
      isColorThemeEditing: null == isColorThemeEditing
          ? _value.isColorThemeEditing
          : isColorThemeEditing // ignore: cast_nullable_to_non_nullable
              as bool,
      selectedList: freezed == selectedList
          ? _value.selectedList
          : selectedList // ignore: cast_nullable_to_non_nullable
              as DiaryList?,
    ));
  }
}

/// @nodoc

class _$_ListEditing implements _ListEditing {
  const _$_ListEditing(
      {required this.diaryList,
      required final List<DiaryColumn> diaryColumns,
      required final List<CapitalCell> capitalCells,
      required final List<DiaryCell> diaryCells,
      required final List<GlobalObjectKey<State<StatefulWidget>>> cellsKeys,
      required final List<DiaryList> lists,
      required this.isColumnDeleting,
      required this.isColorThemeEditing,
      this.selectedList})
      : _diaryColumns = diaryColumns,
        _capitalCells = capitalCells,
        _diaryCells = diaryCells,
        _cellsKeys = cellsKeys,
        _lists = lists;

  @override
  final DiaryList diaryList;
  final List<DiaryColumn> _diaryColumns;
  @override
  List<DiaryColumn> get diaryColumns {
    if (_diaryColumns is EqualUnmodifiableListView) return _diaryColumns;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_diaryColumns);
  }

  final List<CapitalCell> _capitalCells;
  @override
  List<CapitalCell> get capitalCells {
    if (_capitalCells is EqualUnmodifiableListView) return _capitalCells;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_capitalCells);
  }

  final List<DiaryCell> _diaryCells;
  @override
  List<DiaryCell> get diaryCells {
    if (_diaryCells is EqualUnmodifiableListView) return _diaryCells;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_diaryCells);
  }

  final List<GlobalObjectKey<State<StatefulWidget>>> _cellsKeys;
  @override
  List<GlobalObjectKey<State<StatefulWidget>>> get cellsKeys {
    if (_cellsKeys is EqualUnmodifiableListView) return _cellsKeys;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_cellsKeys);
  }

  final List<DiaryList> _lists;
  @override
  List<DiaryList> get lists {
    if (_lists is EqualUnmodifiableListView) return _lists;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_lists);
  }

  @override
  final bool isColumnDeleting;
  @override
  final bool isColorThemeEditing;
  @override
  final DiaryList? selectedList;

  @override
  String toString() {
    return 'DiaryListState.listEditing(diaryList: $diaryList, diaryColumns: $diaryColumns, capitalCells: $capitalCells, diaryCells: $diaryCells, cellsKeys: $cellsKeys, lists: $lists, isColumnDeleting: $isColumnDeleting, isColorThemeEditing: $isColorThemeEditing, selectedList: $selectedList)';
  }

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$_ListEditing &&
            (identical(other.diaryList, diaryList) ||
                other.diaryList == diaryList) &&
            const DeepCollectionEquality()
                .equals(other._diaryColumns, _diaryColumns) &&
            const DeepCollectionEquality()
                .equals(other._capitalCells, _capitalCells) &&
            const DeepCollectionEquality()
                .equals(other._diaryCells, _diaryCells) &&
            const DeepCollectionEquality()
                .equals(other._cellsKeys, _cellsKeys) &&
            const DeepCollectionEquality().equals(other._lists, _lists) &&
            (identical(other.isColumnDeleting, isColumnDeleting) ||
                other.isColumnDeleting == isColumnDeleting) &&
            (identical(other.isColorThemeEditing, isColorThemeEditing) ||
                other.isColorThemeEditing == isColorThemeEditing) &&
            (identical(other.selectedList, selectedList) ||
                other.selectedList == selectedList));
  }

  @override
  int get hashCode => Object.hash(
      runtimeType,
      diaryList,
      const DeepCollectionEquality().hash(_diaryColumns),
      const DeepCollectionEquality().hash(_capitalCells),
      const DeepCollectionEquality().hash(_diaryCells),
      const DeepCollectionEquality().hash(_cellsKeys),
      const DeepCollectionEquality().hash(_lists),
      isColumnDeleting,
      isColorThemeEditing,
      selectedList);

  @JsonKey(ignore: true)
  @override
  @pragma('vm:prefer-inline')
  _$$_ListEditingCopyWith<_$_ListEditing> get copyWith =>
      __$$_ListEditingCopyWithImpl<_$_ListEditing>(this, _$identity);

  @override
  @optionalTypeArgs
  TResult when<TResult extends Object?>({
    required TResult Function() initial,
    required TResult Function(DiaryList diaryList, List<DiaryList> lists)
        listLoaded,
    required TResult Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells,
            List<DiaryList> lists)
        columnsLoaded,
    required TResult Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells,
            List<DiaryCell> diaryCells,
            List<GlobalObjectKey<State<StatefulWidget>>> cellsKeys,
            List<DiaryList> lists,
            bool isListThemeViewMode,
            ListTheme? listTheme)
        loaded,
    required TResult Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells,
            List<DiaryCell> diaryCells,
            DiaryCell firstSelectedCell,
            List<DiaryCell> selectedCells,
            List<GlobalObjectKey<State<StatefulWidget>>> cellsKeys,
            List<DiaryList> lists,
            DiaryCellTextSettings defaultTextSettings,
            DiaryCellSettings defaultSettings,
            bool isListThemeViewMode,
            ListTheme? listTheme)
        cellsSelected,
    required TResult Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells,
            List<DiaryCell> diaryCells,
            CapitalCell selectedCapitalCell,
            bool isEditing,
            bool isTextEditing,
            bool isColorEditing,
            bool isBordersEditing,
            bool isBordersStyleEditing,
            List<GlobalObjectKey<State<StatefulWidget>>> cellsKeys,
            List<DiaryList> lists,
            DiaryColumnSettings defaultSettings,
            bool isListThemeViewMode,
            ListTheme? listTheme)
        capitalCellSelected,
    required TResult Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells,
            List<DiaryCell> diaryCells,
            List<GlobalObjectKey<State<StatefulWidget>>> cellsKeys,
            List<DiaryList> lists,
            bool isColumnDeleting,
            bool isColorThemeEditing,
            DiaryList? selectedList)
        listEditing,
    required TResult Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells,
            List<DiaryCell> diaryCells,
            List<GlobalObjectKey<State<StatefulWidget>>> cellsKeys,
            DiaryCell firstSelectedCell,
            List<DiaryCell> selectedCells,
            bool isTextEditing,
            bool isColorEditing,
            bool isBordersEditing,
            bool isBordersStyleEditing,
            List<DiaryList> lists,
            DiaryCellTextSettings defaultTextSettings,
            DiaryCellSettings defaultSettings,
            bool isListThemeViewMode,
            ListTheme? listTheme)
        cellsEditing,
    required TResult Function(List<ListTheme> listThemes) themesLoaded,
  }) {
    return listEditing(diaryList, diaryColumns, capitalCells, diaryCells,
        cellsKeys, lists, isColumnDeleting, isColorThemeEditing, selectedList);
  }

  @override
  @optionalTypeArgs
  TResult? whenOrNull<TResult extends Object?>({
    TResult? Function()? initial,
    TResult? Function(DiaryList diaryList, List<DiaryList> lists)? listLoaded,
    TResult? Function(DiaryList diaryList, List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells, List<DiaryList> lists)?
        columnsLoaded,
    TResult? Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells,
            List<DiaryCell> diaryCells,
            List<GlobalObjectKey<State<StatefulWidget>>> cellsKeys,
            List<DiaryList> lists,
            bool isListThemeViewMode,
            ListTheme? listTheme)?
        loaded,
    TResult? Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells,
            List<DiaryCell> diaryCells,
            DiaryCell firstSelectedCell,
            List<DiaryCell> selectedCells,
            List<GlobalObjectKey<State<StatefulWidget>>> cellsKeys,
            List<DiaryList> lists,
            DiaryCellTextSettings defaultTextSettings,
            DiaryCellSettings defaultSettings,
            bool isListThemeViewMode,
            ListTheme? listTheme)?
        cellsSelected,
    TResult? Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells,
            List<DiaryCell> diaryCells,
            CapitalCell selectedCapitalCell,
            bool isEditing,
            bool isTextEditing,
            bool isColorEditing,
            bool isBordersEditing,
            bool isBordersStyleEditing,
            List<GlobalObjectKey<State<StatefulWidget>>> cellsKeys,
            List<DiaryList> lists,
            DiaryColumnSettings defaultSettings,
            bool isListThemeViewMode,
            ListTheme? listTheme)?
        capitalCellSelected,
    TResult? Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells,
            List<DiaryCell> diaryCells,
            List<GlobalObjectKey<State<StatefulWidget>>> cellsKeys,
            List<DiaryList> lists,
            bool isColumnDeleting,
            bool isColorThemeEditing,
            DiaryList? selectedList)?
        listEditing,
    TResult? Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells,
            List<DiaryCell> diaryCells,
            List<GlobalObjectKey<State<StatefulWidget>>> cellsKeys,
            DiaryCell firstSelectedCell,
            List<DiaryCell> selectedCells,
            bool isTextEditing,
            bool isColorEditing,
            bool isBordersEditing,
            bool isBordersStyleEditing,
            List<DiaryList> lists,
            DiaryCellTextSettings defaultTextSettings,
            DiaryCellSettings defaultSettings,
            bool isListThemeViewMode,
            ListTheme? listTheme)?
        cellsEditing,
    TResult? Function(List<ListTheme> listThemes)? themesLoaded,
  }) {
    return listEditing?.call(diaryList, diaryColumns, capitalCells, diaryCells,
        cellsKeys, lists, isColumnDeleting, isColorThemeEditing, selectedList);
  }

  @override
  @optionalTypeArgs
  TResult maybeWhen<TResult extends Object?>({
    TResult Function()? initial,
    TResult Function(DiaryList diaryList, List<DiaryList> lists)? listLoaded,
    TResult Function(DiaryList diaryList, List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells, List<DiaryList> lists)?
        columnsLoaded,
    TResult Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells,
            List<DiaryCell> diaryCells,
            List<GlobalObjectKey<State<StatefulWidget>>> cellsKeys,
            List<DiaryList> lists,
            bool isListThemeViewMode,
            ListTheme? listTheme)?
        loaded,
    TResult Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells,
            List<DiaryCell> diaryCells,
            DiaryCell firstSelectedCell,
            List<DiaryCell> selectedCells,
            List<GlobalObjectKey<State<StatefulWidget>>> cellsKeys,
            List<DiaryList> lists,
            DiaryCellTextSettings defaultTextSettings,
            DiaryCellSettings defaultSettings,
            bool isListThemeViewMode,
            ListTheme? listTheme)?
        cellsSelected,
    TResult Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells,
            List<DiaryCell> diaryCells,
            CapitalCell selectedCapitalCell,
            bool isEditing,
            bool isTextEditing,
            bool isColorEditing,
            bool isBordersEditing,
            bool isBordersStyleEditing,
            List<GlobalObjectKey<State<StatefulWidget>>> cellsKeys,
            List<DiaryList> lists,
            DiaryColumnSettings defaultSettings,
            bool isListThemeViewMode,
            ListTheme? listTheme)?
        capitalCellSelected,
    TResult Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells,
            List<DiaryCell> diaryCells,
            List<GlobalObjectKey<State<StatefulWidget>>> cellsKeys,
            List<DiaryList> lists,
            bool isColumnDeleting,
            bool isColorThemeEditing,
            DiaryList? selectedList)?
        listEditing,
    TResult Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells,
            List<DiaryCell> diaryCells,
            List<GlobalObjectKey<State<StatefulWidget>>> cellsKeys,
            DiaryCell firstSelectedCell,
            List<DiaryCell> selectedCells,
            bool isTextEditing,
            bool isColorEditing,
            bool isBordersEditing,
            bool isBordersStyleEditing,
            List<DiaryList> lists,
            DiaryCellTextSettings defaultTextSettings,
            DiaryCellSettings defaultSettings,
            bool isListThemeViewMode,
            ListTheme? listTheme)?
        cellsEditing,
    TResult Function(List<ListTheme> listThemes)? themesLoaded,
    required TResult orElse(),
  }) {
    if (listEditing != null) {
      return listEditing(
          diaryList,
          diaryColumns,
          capitalCells,
          diaryCells,
          cellsKeys,
          lists,
          isColumnDeleting,
          isColorThemeEditing,
          selectedList);
    }
    return orElse();
  }

  @override
  @optionalTypeArgs
  TResult map<TResult extends Object?>({
    required TResult Function(_Initial value) initial,
    required TResult Function(_ListLoaded value) listLoaded,
    required TResult Function(_ColumnsLoaded value) columnsLoaded,
    required TResult Function(_Loaded value) loaded,
    required TResult Function(_CellsSelected value) cellsSelected,
    required TResult Function(_CapitalCellSelected value) capitalCellSelected,
    required TResult Function(_ListEditing value) listEditing,
    required TResult Function(_CellsEditing value) cellsEditing,
    required TResult Function(_ThemesLoaded value) themesLoaded,
  }) {
    return listEditing(this);
  }

  @override
  @optionalTypeArgs
  TResult? mapOrNull<TResult extends Object?>({
    TResult? Function(_Initial value)? initial,
    TResult? Function(_ListLoaded value)? listLoaded,
    TResult? Function(_ColumnsLoaded value)? columnsLoaded,
    TResult? Function(_Loaded value)? loaded,
    TResult? Function(_CellsSelected value)? cellsSelected,
    TResult? Function(_CapitalCellSelected value)? capitalCellSelected,
    TResult? Function(_ListEditing value)? listEditing,
    TResult? Function(_CellsEditing value)? cellsEditing,
    TResult? Function(_ThemesLoaded value)? themesLoaded,
  }) {
    return listEditing?.call(this);
  }

  @override
  @optionalTypeArgs
  TResult maybeMap<TResult extends Object?>({
    TResult Function(_Initial value)? initial,
    TResult Function(_ListLoaded value)? listLoaded,
    TResult Function(_ColumnsLoaded value)? columnsLoaded,
    TResult Function(_Loaded value)? loaded,
    TResult Function(_CellsSelected value)? cellsSelected,
    TResult Function(_CapitalCellSelected value)? capitalCellSelected,
    TResult Function(_ListEditing value)? listEditing,
    TResult Function(_CellsEditing value)? cellsEditing,
    TResult Function(_ThemesLoaded value)? themesLoaded,
    required TResult orElse(),
  }) {
    if (listEditing != null) {
      return listEditing(this);
    }
    return orElse();
  }
}

abstract class _ListEditing implements DiaryListState {
  const factory _ListEditing(
      {required final DiaryList diaryList,
      required final List<DiaryColumn> diaryColumns,
      required final List<CapitalCell> capitalCells,
      required final List<DiaryCell> diaryCells,
      required final List<GlobalObjectKey<State<StatefulWidget>>> cellsKeys,
      required final List<DiaryList> lists,
      required final bool isColumnDeleting,
      required final bool isColorThemeEditing,
      final DiaryList? selectedList}) = _$_ListEditing;

  DiaryList get diaryList;
  List<DiaryColumn> get diaryColumns;
  List<CapitalCell> get capitalCells;
  List<DiaryCell> get diaryCells;
  List<GlobalObjectKey<State<StatefulWidget>>> get cellsKeys;
  List<DiaryList> get lists;
  bool get isColumnDeleting;
  bool get isColorThemeEditing;
  DiaryList? get selectedList;
  @JsonKey(ignore: true)
  _$$_ListEditingCopyWith<_$_ListEditing> get copyWith =>
      throw _privateConstructorUsedError;
}

/// @nodoc
abstract class _$$_CellsEditingCopyWith<$Res> {
  factory _$$_CellsEditingCopyWith(
          _$_CellsEditing value, $Res Function(_$_CellsEditing) then) =
      __$$_CellsEditingCopyWithImpl<$Res>;
  @useResult
  $Res call(
      {DiaryList diaryList,
      List<DiaryColumn> diaryColumns,
      List<CapitalCell> capitalCells,
      List<DiaryCell> diaryCells,
      List<GlobalObjectKey<State<StatefulWidget>>> cellsKeys,
      DiaryCell firstSelectedCell,
      List<DiaryCell> selectedCells,
      bool isTextEditing,
      bool isColorEditing,
      bool isBordersEditing,
      bool isBordersStyleEditing,
      List<DiaryList> lists,
      DiaryCellTextSettings defaultTextSettings,
      DiaryCellSettings defaultSettings,
      bool isListThemeViewMode,
      ListTheme? listTheme});
}

/// @nodoc
class __$$_CellsEditingCopyWithImpl<$Res>
    extends _$DiaryListStateCopyWithImpl<$Res, _$_CellsEditing>
    implements _$$_CellsEditingCopyWith<$Res> {
  __$$_CellsEditingCopyWithImpl(
      _$_CellsEditing _value, $Res Function(_$_CellsEditing) _then)
      : super(_value, _then);

  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? diaryList = null,
    Object? diaryColumns = null,
    Object? capitalCells = null,
    Object? diaryCells = null,
    Object? cellsKeys = null,
    Object? firstSelectedCell = null,
    Object? selectedCells = null,
    Object? isTextEditing = null,
    Object? isColorEditing = null,
    Object? isBordersEditing = null,
    Object? isBordersStyleEditing = null,
    Object? lists = null,
    Object? defaultTextSettings = null,
    Object? defaultSettings = null,
    Object? isListThemeViewMode = null,
    Object? listTheme = freezed,
  }) {
    return _then(_$_CellsEditing(
      diaryList: null == diaryList
          ? _value.diaryList
          : diaryList // ignore: cast_nullable_to_non_nullable
              as DiaryList,
      diaryColumns: null == diaryColumns
          ? _value._diaryColumns
          : diaryColumns // ignore: cast_nullable_to_non_nullable
              as List<DiaryColumn>,
      capitalCells: null == capitalCells
          ? _value._capitalCells
          : capitalCells // ignore: cast_nullable_to_non_nullable
              as List<CapitalCell>,
      diaryCells: null == diaryCells
          ? _value._diaryCells
          : diaryCells // ignore: cast_nullable_to_non_nullable
              as List<DiaryCell>,
      cellsKeys: null == cellsKeys
          ? _value._cellsKeys
          : cellsKeys // ignore: cast_nullable_to_non_nullable
              as List<GlobalObjectKey<State<StatefulWidget>>>,
      firstSelectedCell: null == firstSelectedCell
          ? _value.firstSelectedCell
          : firstSelectedCell // ignore: cast_nullable_to_non_nullable
              as DiaryCell,
      selectedCells: null == selectedCells
          ? _value._selectedCells
          : selectedCells // ignore: cast_nullable_to_non_nullable
              as List<DiaryCell>,
      isTextEditing: null == isTextEditing
          ? _value.isTextEditing
          : isTextEditing // ignore: cast_nullable_to_non_nullable
              as bool,
      isColorEditing: null == isColorEditing
          ? _value.isColorEditing
          : isColorEditing // ignore: cast_nullable_to_non_nullable
              as bool,
      isBordersEditing: null == isBordersEditing
          ? _value.isBordersEditing
          : isBordersEditing // ignore: cast_nullable_to_non_nullable
              as bool,
      isBordersStyleEditing: null == isBordersStyleEditing
          ? _value.isBordersStyleEditing
          : isBordersStyleEditing // ignore: cast_nullable_to_non_nullable
              as bool,
      lists: null == lists
          ? _value._lists
          : lists // ignore: cast_nullable_to_non_nullable
              as List<DiaryList>,
      defaultTextSettings: null == defaultTextSettings
          ? _value.defaultTextSettings
          : defaultTextSettings // ignore: cast_nullable_to_non_nullable
              as DiaryCellTextSettings,
      defaultSettings: null == defaultSettings
          ? _value.defaultSettings
          : defaultSettings // ignore: cast_nullable_to_non_nullable
              as DiaryCellSettings,
      isListThemeViewMode: null == isListThemeViewMode
          ? _value.isListThemeViewMode
          : isListThemeViewMode // ignore: cast_nullable_to_non_nullable
              as bool,
      listTheme: freezed == listTheme
          ? _value.listTheme
          : listTheme // ignore: cast_nullable_to_non_nullable
              as ListTheme?,
    ));
  }
}

/// @nodoc

class _$_CellsEditing implements _CellsEditing {
  const _$_CellsEditing(
      {required this.diaryList,
      required final List<DiaryColumn> diaryColumns,
      required final List<CapitalCell> capitalCells,
      required final List<DiaryCell> diaryCells,
      required final List<GlobalObjectKey<State<StatefulWidget>>> cellsKeys,
      required this.firstSelectedCell,
      required final List<DiaryCell> selectedCells,
      required this.isTextEditing,
      required this.isColorEditing,
      required this.isBordersEditing,
      required this.isBordersStyleEditing,
      required final List<DiaryList> lists,
      required this.defaultTextSettings,
      required this.defaultSettings,
      required this.isListThemeViewMode,
      this.listTheme})
      : _diaryColumns = diaryColumns,
        _capitalCells = capitalCells,
        _diaryCells = diaryCells,
        _cellsKeys = cellsKeys,
        _selectedCells = selectedCells,
        _lists = lists;

  @override
  final DiaryList diaryList;
  final List<DiaryColumn> _diaryColumns;
  @override
  List<DiaryColumn> get diaryColumns {
    if (_diaryColumns is EqualUnmodifiableListView) return _diaryColumns;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_diaryColumns);
  }

  final List<CapitalCell> _capitalCells;
  @override
  List<CapitalCell> get capitalCells {
    if (_capitalCells is EqualUnmodifiableListView) return _capitalCells;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_capitalCells);
  }

  final List<DiaryCell> _diaryCells;
  @override
  List<DiaryCell> get diaryCells {
    if (_diaryCells is EqualUnmodifiableListView) return _diaryCells;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_diaryCells);
  }

  final List<GlobalObjectKey<State<StatefulWidget>>> _cellsKeys;
  @override
  List<GlobalObjectKey<State<StatefulWidget>>> get cellsKeys {
    if (_cellsKeys is EqualUnmodifiableListView) return _cellsKeys;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_cellsKeys);
  }

  @override
  final DiaryCell firstSelectedCell;
  final List<DiaryCell> _selectedCells;
  @override
  List<DiaryCell> get selectedCells {
    if (_selectedCells is EqualUnmodifiableListView) return _selectedCells;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_selectedCells);
  }

  @override
  final bool isTextEditing;
  @override
  final bool isColorEditing;
  @override
  final bool isBordersEditing;
  @override
  final bool isBordersStyleEditing;
  final List<DiaryList> _lists;
  @override
  List<DiaryList> get lists {
    if (_lists is EqualUnmodifiableListView) return _lists;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_lists);
  }

  @override
  final DiaryCellTextSettings defaultTextSettings;
  @override
  final DiaryCellSettings defaultSettings;
  @override
  final bool isListThemeViewMode;
  @override
  final ListTheme? listTheme;

  @override
  String toString() {
    return 'DiaryListState.cellsEditing(diaryList: $diaryList, diaryColumns: $diaryColumns, capitalCells: $capitalCells, diaryCells: $diaryCells, cellsKeys: $cellsKeys, firstSelectedCell: $firstSelectedCell, selectedCells: $selectedCells, isTextEditing: $isTextEditing, isColorEditing: $isColorEditing, isBordersEditing: $isBordersEditing, isBordersStyleEditing: $isBordersStyleEditing, lists: $lists, defaultTextSettings: $defaultTextSettings, defaultSettings: $defaultSettings, isListThemeViewMode: $isListThemeViewMode, listTheme: $listTheme)';
  }

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$_CellsEditing &&
            (identical(other.diaryList, diaryList) ||
                other.diaryList == diaryList) &&
            const DeepCollectionEquality()
                .equals(other._diaryColumns, _diaryColumns) &&
            const DeepCollectionEquality()
                .equals(other._capitalCells, _capitalCells) &&
            const DeepCollectionEquality()
                .equals(other._diaryCells, _diaryCells) &&
            const DeepCollectionEquality()
                .equals(other._cellsKeys, _cellsKeys) &&
            (identical(other.firstSelectedCell, firstSelectedCell) ||
                other.firstSelectedCell == firstSelectedCell) &&
            const DeepCollectionEquality()
                .equals(other._selectedCells, _selectedCells) &&
            (identical(other.isTextEditing, isTextEditing) ||
                other.isTextEditing == isTextEditing) &&
            (identical(other.isColorEditing, isColorEditing) ||
                other.isColorEditing == isColorEditing) &&
            (identical(other.isBordersEditing, isBordersEditing) ||
                other.isBordersEditing == isBordersEditing) &&
            (identical(other.isBordersStyleEditing, isBordersStyleEditing) ||
                other.isBordersStyleEditing == isBordersStyleEditing) &&
            const DeepCollectionEquality().equals(other._lists, _lists) &&
            (identical(other.defaultTextSettings, defaultTextSettings) ||
                other.defaultTextSettings == defaultTextSettings) &&
            (identical(other.defaultSettings, defaultSettings) ||
                other.defaultSettings == defaultSettings) &&
            (identical(other.isListThemeViewMode, isListThemeViewMode) ||
                other.isListThemeViewMode == isListThemeViewMode) &&
            (identical(other.listTheme, listTheme) ||
                other.listTheme == listTheme));
  }

  @override
  int get hashCode => Object.hash(
      runtimeType,
      diaryList,
      const DeepCollectionEquality().hash(_diaryColumns),
      const DeepCollectionEquality().hash(_capitalCells),
      const DeepCollectionEquality().hash(_diaryCells),
      const DeepCollectionEquality().hash(_cellsKeys),
      firstSelectedCell,
      const DeepCollectionEquality().hash(_selectedCells),
      isTextEditing,
      isColorEditing,
      isBordersEditing,
      isBordersStyleEditing,
      const DeepCollectionEquality().hash(_lists),
      defaultTextSettings,
      defaultSettings,
      isListThemeViewMode,
      listTheme);

  @JsonKey(ignore: true)
  @override
  @pragma('vm:prefer-inline')
  _$$_CellsEditingCopyWith<_$_CellsEditing> get copyWith =>
      __$$_CellsEditingCopyWithImpl<_$_CellsEditing>(this, _$identity);

  @override
  @optionalTypeArgs
  TResult when<TResult extends Object?>({
    required TResult Function() initial,
    required TResult Function(DiaryList diaryList, List<DiaryList> lists)
        listLoaded,
    required TResult Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells,
            List<DiaryList> lists)
        columnsLoaded,
    required TResult Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells,
            List<DiaryCell> diaryCells,
            List<GlobalObjectKey<State<StatefulWidget>>> cellsKeys,
            List<DiaryList> lists,
            bool isListThemeViewMode,
            ListTheme? listTheme)
        loaded,
    required TResult Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells,
            List<DiaryCell> diaryCells,
            DiaryCell firstSelectedCell,
            List<DiaryCell> selectedCells,
            List<GlobalObjectKey<State<StatefulWidget>>> cellsKeys,
            List<DiaryList> lists,
            DiaryCellTextSettings defaultTextSettings,
            DiaryCellSettings defaultSettings,
            bool isListThemeViewMode,
            ListTheme? listTheme)
        cellsSelected,
    required TResult Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells,
            List<DiaryCell> diaryCells,
            CapitalCell selectedCapitalCell,
            bool isEditing,
            bool isTextEditing,
            bool isColorEditing,
            bool isBordersEditing,
            bool isBordersStyleEditing,
            List<GlobalObjectKey<State<StatefulWidget>>> cellsKeys,
            List<DiaryList> lists,
            DiaryColumnSettings defaultSettings,
            bool isListThemeViewMode,
            ListTheme? listTheme)
        capitalCellSelected,
    required TResult Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells,
            List<DiaryCell> diaryCells,
            List<GlobalObjectKey<State<StatefulWidget>>> cellsKeys,
            List<DiaryList> lists,
            bool isColumnDeleting,
            bool isColorThemeEditing,
            DiaryList? selectedList)
        listEditing,
    required TResult Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells,
            List<DiaryCell> diaryCells,
            List<GlobalObjectKey<State<StatefulWidget>>> cellsKeys,
            DiaryCell firstSelectedCell,
            List<DiaryCell> selectedCells,
            bool isTextEditing,
            bool isColorEditing,
            bool isBordersEditing,
            bool isBordersStyleEditing,
            List<DiaryList> lists,
            DiaryCellTextSettings defaultTextSettings,
            DiaryCellSettings defaultSettings,
            bool isListThemeViewMode,
            ListTheme? listTheme)
        cellsEditing,
    required TResult Function(List<ListTheme> listThemes) themesLoaded,
  }) {
    return cellsEditing(
        diaryList,
        diaryColumns,
        capitalCells,
        diaryCells,
        cellsKeys,
        firstSelectedCell,
        selectedCells,
        isTextEditing,
        isColorEditing,
        isBordersEditing,
        isBordersStyleEditing,
        lists,
        defaultTextSettings,
        defaultSettings,
        isListThemeViewMode,
        listTheme);
  }

  @override
  @optionalTypeArgs
  TResult? whenOrNull<TResult extends Object?>({
    TResult? Function()? initial,
    TResult? Function(DiaryList diaryList, List<DiaryList> lists)? listLoaded,
    TResult? Function(DiaryList diaryList, List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells, List<DiaryList> lists)?
        columnsLoaded,
    TResult? Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells,
            List<DiaryCell> diaryCells,
            List<GlobalObjectKey<State<StatefulWidget>>> cellsKeys,
            List<DiaryList> lists,
            bool isListThemeViewMode,
            ListTheme? listTheme)?
        loaded,
    TResult? Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells,
            List<DiaryCell> diaryCells,
            DiaryCell firstSelectedCell,
            List<DiaryCell> selectedCells,
            List<GlobalObjectKey<State<StatefulWidget>>> cellsKeys,
            List<DiaryList> lists,
            DiaryCellTextSettings defaultTextSettings,
            DiaryCellSettings defaultSettings,
            bool isListThemeViewMode,
            ListTheme? listTheme)?
        cellsSelected,
    TResult? Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells,
            List<DiaryCell> diaryCells,
            CapitalCell selectedCapitalCell,
            bool isEditing,
            bool isTextEditing,
            bool isColorEditing,
            bool isBordersEditing,
            bool isBordersStyleEditing,
            List<GlobalObjectKey<State<StatefulWidget>>> cellsKeys,
            List<DiaryList> lists,
            DiaryColumnSettings defaultSettings,
            bool isListThemeViewMode,
            ListTheme? listTheme)?
        capitalCellSelected,
    TResult? Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells,
            List<DiaryCell> diaryCells,
            List<GlobalObjectKey<State<StatefulWidget>>> cellsKeys,
            List<DiaryList> lists,
            bool isColumnDeleting,
            bool isColorThemeEditing,
            DiaryList? selectedList)?
        listEditing,
    TResult? Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells,
            List<DiaryCell> diaryCells,
            List<GlobalObjectKey<State<StatefulWidget>>> cellsKeys,
            DiaryCell firstSelectedCell,
            List<DiaryCell> selectedCells,
            bool isTextEditing,
            bool isColorEditing,
            bool isBordersEditing,
            bool isBordersStyleEditing,
            List<DiaryList> lists,
            DiaryCellTextSettings defaultTextSettings,
            DiaryCellSettings defaultSettings,
            bool isListThemeViewMode,
            ListTheme? listTheme)?
        cellsEditing,
    TResult? Function(List<ListTheme> listThemes)? themesLoaded,
  }) {
    return cellsEditing?.call(
        diaryList,
        diaryColumns,
        capitalCells,
        diaryCells,
        cellsKeys,
        firstSelectedCell,
        selectedCells,
        isTextEditing,
        isColorEditing,
        isBordersEditing,
        isBordersStyleEditing,
        lists,
        defaultTextSettings,
        defaultSettings,
        isListThemeViewMode,
        listTheme);
  }

  @override
  @optionalTypeArgs
  TResult maybeWhen<TResult extends Object?>({
    TResult Function()? initial,
    TResult Function(DiaryList diaryList, List<DiaryList> lists)? listLoaded,
    TResult Function(DiaryList diaryList, List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells, List<DiaryList> lists)?
        columnsLoaded,
    TResult Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells,
            List<DiaryCell> diaryCells,
            List<GlobalObjectKey<State<StatefulWidget>>> cellsKeys,
            List<DiaryList> lists,
            bool isListThemeViewMode,
            ListTheme? listTheme)?
        loaded,
    TResult Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells,
            List<DiaryCell> diaryCells,
            DiaryCell firstSelectedCell,
            List<DiaryCell> selectedCells,
            List<GlobalObjectKey<State<StatefulWidget>>> cellsKeys,
            List<DiaryList> lists,
            DiaryCellTextSettings defaultTextSettings,
            DiaryCellSettings defaultSettings,
            bool isListThemeViewMode,
            ListTheme? listTheme)?
        cellsSelected,
    TResult Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells,
            List<DiaryCell> diaryCells,
            CapitalCell selectedCapitalCell,
            bool isEditing,
            bool isTextEditing,
            bool isColorEditing,
            bool isBordersEditing,
            bool isBordersStyleEditing,
            List<GlobalObjectKey<State<StatefulWidget>>> cellsKeys,
            List<DiaryList> lists,
            DiaryColumnSettings defaultSettings,
            bool isListThemeViewMode,
            ListTheme? listTheme)?
        capitalCellSelected,
    TResult Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells,
            List<DiaryCell> diaryCells,
            List<GlobalObjectKey<State<StatefulWidget>>> cellsKeys,
            List<DiaryList> lists,
            bool isColumnDeleting,
            bool isColorThemeEditing,
            DiaryList? selectedList)?
        listEditing,
    TResult Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells,
            List<DiaryCell> diaryCells,
            List<GlobalObjectKey<State<StatefulWidget>>> cellsKeys,
            DiaryCell firstSelectedCell,
            List<DiaryCell> selectedCells,
            bool isTextEditing,
            bool isColorEditing,
            bool isBordersEditing,
            bool isBordersStyleEditing,
            List<DiaryList> lists,
            DiaryCellTextSettings defaultTextSettings,
            DiaryCellSettings defaultSettings,
            bool isListThemeViewMode,
            ListTheme? listTheme)?
        cellsEditing,
    TResult Function(List<ListTheme> listThemes)? themesLoaded,
    required TResult orElse(),
  }) {
    if (cellsEditing != null) {
      return cellsEditing(
          diaryList,
          diaryColumns,
          capitalCells,
          diaryCells,
          cellsKeys,
          firstSelectedCell,
          selectedCells,
          isTextEditing,
          isColorEditing,
          isBordersEditing,
          isBordersStyleEditing,
          lists,
          defaultTextSettings,
          defaultSettings,
          isListThemeViewMode,
          listTheme);
    }
    return orElse();
  }

  @override
  @optionalTypeArgs
  TResult map<TResult extends Object?>({
    required TResult Function(_Initial value) initial,
    required TResult Function(_ListLoaded value) listLoaded,
    required TResult Function(_ColumnsLoaded value) columnsLoaded,
    required TResult Function(_Loaded value) loaded,
    required TResult Function(_CellsSelected value) cellsSelected,
    required TResult Function(_CapitalCellSelected value) capitalCellSelected,
    required TResult Function(_ListEditing value) listEditing,
    required TResult Function(_CellsEditing value) cellsEditing,
    required TResult Function(_ThemesLoaded value) themesLoaded,
  }) {
    return cellsEditing(this);
  }

  @override
  @optionalTypeArgs
  TResult? mapOrNull<TResult extends Object?>({
    TResult? Function(_Initial value)? initial,
    TResult? Function(_ListLoaded value)? listLoaded,
    TResult? Function(_ColumnsLoaded value)? columnsLoaded,
    TResult? Function(_Loaded value)? loaded,
    TResult? Function(_CellsSelected value)? cellsSelected,
    TResult? Function(_CapitalCellSelected value)? capitalCellSelected,
    TResult? Function(_ListEditing value)? listEditing,
    TResult? Function(_CellsEditing value)? cellsEditing,
    TResult? Function(_ThemesLoaded value)? themesLoaded,
  }) {
    return cellsEditing?.call(this);
  }

  @override
  @optionalTypeArgs
  TResult maybeMap<TResult extends Object?>({
    TResult Function(_Initial value)? initial,
    TResult Function(_ListLoaded value)? listLoaded,
    TResult Function(_ColumnsLoaded value)? columnsLoaded,
    TResult Function(_Loaded value)? loaded,
    TResult Function(_CellsSelected value)? cellsSelected,
    TResult Function(_CapitalCellSelected value)? capitalCellSelected,
    TResult Function(_ListEditing value)? listEditing,
    TResult Function(_CellsEditing value)? cellsEditing,
    TResult Function(_ThemesLoaded value)? themesLoaded,
    required TResult orElse(),
  }) {
    if (cellsEditing != null) {
      return cellsEditing(this);
    }
    return orElse();
  }
}

abstract class _CellsEditing implements DiaryListState {
  const factory _CellsEditing(
      {required final DiaryList diaryList,
      required final List<DiaryColumn> diaryColumns,
      required final List<CapitalCell> capitalCells,
      required final List<DiaryCell> diaryCells,
      required final List<GlobalObjectKey<State<StatefulWidget>>> cellsKeys,
      required final DiaryCell firstSelectedCell,
      required final List<DiaryCell> selectedCells,
      required final bool isTextEditing,
      required final bool isColorEditing,
      required final bool isBordersEditing,
      required final bool isBordersStyleEditing,
      required final List<DiaryList> lists,
      required final DiaryCellTextSettings defaultTextSettings,
      required final DiaryCellSettings defaultSettings,
      required final bool isListThemeViewMode,
      final ListTheme? listTheme}) = _$_CellsEditing;

  DiaryList get diaryList;
  List<DiaryColumn> get diaryColumns;
  List<CapitalCell> get capitalCells;
  List<DiaryCell> get diaryCells;
  List<GlobalObjectKey<State<StatefulWidget>>> get cellsKeys;
  DiaryCell get firstSelectedCell;
  List<DiaryCell> get selectedCells;
  bool get isTextEditing;
  bool get isColorEditing;
  bool get isBordersEditing;
  bool get isBordersStyleEditing;
  List<DiaryList> get lists;
  DiaryCellTextSettings get defaultTextSettings;
  DiaryCellSettings get defaultSettings;
  bool get isListThemeViewMode;
  ListTheme? get listTheme;
  @JsonKey(ignore: true)
  _$$_CellsEditingCopyWith<_$_CellsEditing> get copyWith =>
      throw _privateConstructorUsedError;
}

/// @nodoc
abstract class _$$_ThemesLoadedCopyWith<$Res> {
  factory _$$_ThemesLoadedCopyWith(
          _$_ThemesLoaded value, $Res Function(_$_ThemesLoaded) then) =
      __$$_ThemesLoadedCopyWithImpl<$Res>;
  @useResult
  $Res call({List<ListTheme> listThemes});
}

/// @nodoc
class __$$_ThemesLoadedCopyWithImpl<$Res>
    extends _$DiaryListStateCopyWithImpl<$Res, _$_ThemesLoaded>
    implements _$$_ThemesLoadedCopyWith<$Res> {
  __$$_ThemesLoadedCopyWithImpl(
      _$_ThemesLoaded _value, $Res Function(_$_ThemesLoaded) _then)
      : super(_value, _then);

  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? listThemes = null,
  }) {
    return _then(_$_ThemesLoaded(
      listThemes: null == listThemes
          ? _value._listThemes
          : listThemes // ignore: cast_nullable_to_non_nullable
              as List<ListTheme>,
    ));
  }
}

/// @nodoc

class _$_ThemesLoaded implements _ThemesLoaded {
  const _$_ThemesLoaded({required final List<ListTheme> listThemes})
      : _listThemes = listThemes;

  final List<ListTheme> _listThemes;
  @override
  List<ListTheme> get listThemes {
    if (_listThemes is EqualUnmodifiableListView) return _listThemes;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_listThemes);
  }

  @override
  String toString() {
    return 'DiaryListState.themesLoaded(listThemes: $listThemes)';
  }

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$_ThemesLoaded &&
            const DeepCollectionEquality()
                .equals(other._listThemes, _listThemes));
  }

  @override
  int get hashCode => Object.hash(
      runtimeType, const DeepCollectionEquality().hash(_listThemes));

  @JsonKey(ignore: true)
  @override
  @pragma('vm:prefer-inline')
  _$$_ThemesLoadedCopyWith<_$_ThemesLoaded> get copyWith =>
      __$$_ThemesLoadedCopyWithImpl<_$_ThemesLoaded>(this, _$identity);

  @override
  @optionalTypeArgs
  TResult when<TResult extends Object?>({
    required TResult Function() initial,
    required TResult Function(DiaryList diaryList, List<DiaryList> lists)
        listLoaded,
    required TResult Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells,
            List<DiaryList> lists)
        columnsLoaded,
    required TResult Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells,
            List<DiaryCell> diaryCells,
            List<GlobalObjectKey<State<StatefulWidget>>> cellsKeys,
            List<DiaryList> lists,
            bool isListThemeViewMode,
            ListTheme? listTheme)
        loaded,
    required TResult Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells,
            List<DiaryCell> diaryCells,
            DiaryCell firstSelectedCell,
            List<DiaryCell> selectedCells,
            List<GlobalObjectKey<State<StatefulWidget>>> cellsKeys,
            List<DiaryList> lists,
            DiaryCellTextSettings defaultTextSettings,
            DiaryCellSettings defaultSettings,
            bool isListThemeViewMode,
            ListTheme? listTheme)
        cellsSelected,
    required TResult Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells,
            List<DiaryCell> diaryCells,
            CapitalCell selectedCapitalCell,
            bool isEditing,
            bool isTextEditing,
            bool isColorEditing,
            bool isBordersEditing,
            bool isBordersStyleEditing,
            List<GlobalObjectKey<State<StatefulWidget>>> cellsKeys,
            List<DiaryList> lists,
            DiaryColumnSettings defaultSettings,
            bool isListThemeViewMode,
            ListTheme? listTheme)
        capitalCellSelected,
    required TResult Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells,
            List<DiaryCell> diaryCells,
            List<GlobalObjectKey<State<StatefulWidget>>> cellsKeys,
            List<DiaryList> lists,
            bool isColumnDeleting,
            bool isColorThemeEditing,
            DiaryList? selectedList)
        listEditing,
    required TResult Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells,
            List<DiaryCell> diaryCells,
            List<GlobalObjectKey<State<StatefulWidget>>> cellsKeys,
            DiaryCell firstSelectedCell,
            List<DiaryCell> selectedCells,
            bool isTextEditing,
            bool isColorEditing,
            bool isBordersEditing,
            bool isBordersStyleEditing,
            List<DiaryList> lists,
            DiaryCellTextSettings defaultTextSettings,
            DiaryCellSettings defaultSettings,
            bool isListThemeViewMode,
            ListTheme? listTheme)
        cellsEditing,
    required TResult Function(List<ListTheme> listThemes) themesLoaded,
  }) {
    return themesLoaded(listThemes);
  }

  @override
  @optionalTypeArgs
  TResult? whenOrNull<TResult extends Object?>({
    TResult? Function()? initial,
    TResult? Function(DiaryList diaryList, List<DiaryList> lists)? listLoaded,
    TResult? Function(DiaryList diaryList, List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells, List<DiaryList> lists)?
        columnsLoaded,
    TResult? Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells,
            List<DiaryCell> diaryCells,
            List<GlobalObjectKey<State<StatefulWidget>>> cellsKeys,
            List<DiaryList> lists,
            bool isListThemeViewMode,
            ListTheme? listTheme)?
        loaded,
    TResult? Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells,
            List<DiaryCell> diaryCells,
            DiaryCell firstSelectedCell,
            List<DiaryCell> selectedCells,
            List<GlobalObjectKey<State<StatefulWidget>>> cellsKeys,
            List<DiaryList> lists,
            DiaryCellTextSettings defaultTextSettings,
            DiaryCellSettings defaultSettings,
            bool isListThemeViewMode,
            ListTheme? listTheme)?
        cellsSelected,
    TResult? Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells,
            List<DiaryCell> diaryCells,
            CapitalCell selectedCapitalCell,
            bool isEditing,
            bool isTextEditing,
            bool isColorEditing,
            bool isBordersEditing,
            bool isBordersStyleEditing,
            List<GlobalObjectKey<State<StatefulWidget>>> cellsKeys,
            List<DiaryList> lists,
            DiaryColumnSettings defaultSettings,
            bool isListThemeViewMode,
            ListTheme? listTheme)?
        capitalCellSelected,
    TResult? Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells,
            List<DiaryCell> diaryCells,
            List<GlobalObjectKey<State<StatefulWidget>>> cellsKeys,
            List<DiaryList> lists,
            bool isColumnDeleting,
            bool isColorThemeEditing,
            DiaryList? selectedList)?
        listEditing,
    TResult? Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells,
            List<DiaryCell> diaryCells,
            List<GlobalObjectKey<State<StatefulWidget>>> cellsKeys,
            DiaryCell firstSelectedCell,
            List<DiaryCell> selectedCells,
            bool isTextEditing,
            bool isColorEditing,
            bool isBordersEditing,
            bool isBordersStyleEditing,
            List<DiaryList> lists,
            DiaryCellTextSettings defaultTextSettings,
            DiaryCellSettings defaultSettings,
            bool isListThemeViewMode,
            ListTheme? listTheme)?
        cellsEditing,
    TResult? Function(List<ListTheme> listThemes)? themesLoaded,
  }) {
    return themesLoaded?.call(listThemes);
  }

  @override
  @optionalTypeArgs
  TResult maybeWhen<TResult extends Object?>({
    TResult Function()? initial,
    TResult Function(DiaryList diaryList, List<DiaryList> lists)? listLoaded,
    TResult Function(DiaryList diaryList, List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells, List<DiaryList> lists)?
        columnsLoaded,
    TResult Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells,
            List<DiaryCell> diaryCells,
            List<GlobalObjectKey<State<StatefulWidget>>> cellsKeys,
            List<DiaryList> lists,
            bool isListThemeViewMode,
            ListTheme? listTheme)?
        loaded,
    TResult Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells,
            List<DiaryCell> diaryCells,
            DiaryCell firstSelectedCell,
            List<DiaryCell> selectedCells,
            List<GlobalObjectKey<State<StatefulWidget>>> cellsKeys,
            List<DiaryList> lists,
            DiaryCellTextSettings defaultTextSettings,
            DiaryCellSettings defaultSettings,
            bool isListThemeViewMode,
            ListTheme? listTheme)?
        cellsSelected,
    TResult Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells,
            List<DiaryCell> diaryCells,
            CapitalCell selectedCapitalCell,
            bool isEditing,
            bool isTextEditing,
            bool isColorEditing,
            bool isBordersEditing,
            bool isBordersStyleEditing,
            List<GlobalObjectKey<State<StatefulWidget>>> cellsKeys,
            List<DiaryList> lists,
            DiaryColumnSettings defaultSettings,
            bool isListThemeViewMode,
            ListTheme? listTheme)?
        capitalCellSelected,
    TResult Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells,
            List<DiaryCell> diaryCells,
            List<GlobalObjectKey<State<StatefulWidget>>> cellsKeys,
            List<DiaryList> lists,
            bool isColumnDeleting,
            bool isColorThemeEditing,
            DiaryList? selectedList)?
        listEditing,
    TResult Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells,
            List<DiaryCell> diaryCells,
            List<GlobalObjectKey<State<StatefulWidget>>> cellsKeys,
            DiaryCell firstSelectedCell,
            List<DiaryCell> selectedCells,
            bool isTextEditing,
            bool isColorEditing,
            bool isBordersEditing,
            bool isBordersStyleEditing,
            List<DiaryList> lists,
            DiaryCellTextSettings defaultTextSettings,
            DiaryCellSettings defaultSettings,
            bool isListThemeViewMode,
            ListTheme? listTheme)?
        cellsEditing,
    TResult Function(List<ListTheme> listThemes)? themesLoaded,
    required TResult orElse(),
  }) {
    if (themesLoaded != null) {
      return themesLoaded(listThemes);
    }
    return orElse();
  }

  @override
  @optionalTypeArgs
  TResult map<TResult extends Object?>({
    required TResult Function(_Initial value) initial,
    required TResult Function(_ListLoaded value) listLoaded,
    required TResult Function(_ColumnsLoaded value) columnsLoaded,
    required TResult Function(_Loaded value) loaded,
    required TResult Function(_CellsSelected value) cellsSelected,
    required TResult Function(_CapitalCellSelected value) capitalCellSelected,
    required TResult Function(_ListEditing value) listEditing,
    required TResult Function(_CellsEditing value) cellsEditing,
    required TResult Function(_ThemesLoaded value) themesLoaded,
  }) {
    return themesLoaded(this);
  }

  @override
  @optionalTypeArgs
  TResult? mapOrNull<TResult extends Object?>({
    TResult? Function(_Initial value)? initial,
    TResult? Function(_ListLoaded value)? listLoaded,
    TResult? Function(_ColumnsLoaded value)? columnsLoaded,
    TResult? Function(_Loaded value)? loaded,
    TResult? Function(_CellsSelected value)? cellsSelected,
    TResult? Function(_CapitalCellSelected value)? capitalCellSelected,
    TResult? Function(_ListEditing value)? listEditing,
    TResult? Function(_CellsEditing value)? cellsEditing,
    TResult? Function(_ThemesLoaded value)? themesLoaded,
  }) {
    return themesLoaded?.call(this);
  }

  @override
  @optionalTypeArgs
  TResult maybeMap<TResult extends Object?>({
    TResult Function(_Initial value)? initial,
    TResult Function(_ListLoaded value)? listLoaded,
    TResult Function(_ColumnsLoaded value)? columnsLoaded,
    TResult Function(_Loaded value)? loaded,
    TResult Function(_CellsSelected value)? cellsSelected,
    TResult Function(_CapitalCellSelected value)? capitalCellSelected,
    TResult Function(_ListEditing value)? listEditing,
    TResult Function(_CellsEditing value)? cellsEditing,
    TResult Function(_ThemesLoaded value)? themesLoaded,
    required TResult orElse(),
  }) {
    if (themesLoaded != null) {
      return themesLoaded(this);
    }
    return orElse();
  }
}

abstract class _ThemesLoaded implements DiaryListState {
  const factory _ThemesLoaded({required final List<ListTheme> listThemes}) =
      _$_ThemesLoaded;

  List<ListTheme> get listThemes;
  @JsonKey(ignore: true)
  _$$_ThemesLoadedCopyWith<_$_ThemesLoaded> get copyWith =>
      throw _privateConstructorUsedError;
}

/// @nodoc
mixin _$DiaryListEvent {
  @optionalTypeArgs
  TResult when<TResult extends Object?>({
    required TResult Function() createSample,
    required TResult Function() initialLoad,
    required TResult Function(DateTime date, int delay) getDiaryList,
    required TResult Function(DiaryList diaryList, List<DiaryList> lists)
        getDiaryColumns,
    required TResult Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells,
            List<DiaryList> lists)
        getDiaryCells,
    required TResult Function(DiaryCell diaryCell) selectDiaryCell,
    required TResult Function(List<DiaryCell> diaryCells) selectDiaryCells,
    required TResult Function(CapitalCell capitalCell) selectCapitalCell,
    required TResult Function(
            DiaryCell diaryCell,
            GlobalObjectKey<State<StatefulWidget>> cellKey,
            DragUpdateDetails details,
            double scaleFactor)
        onPanUpdate,
    required TResult Function(DiaryList? selectedList) startEditingList,
    required TResult Function(
            String? newName, String? addedColumnName, int? addedColumnCount)
        returnToLoaded,
    required TResult Function() returnToCellsSelected,
    required TResult Function(DiaryList diaryList, String newName)
        updateDiaryListName,
    required TResult Function(DiaryCell diaryCell, String? textFieldText)
        changeDiaryCell,
    required TResult Function(CapitalCell capitalCell, String? textFieldText)
        changeCapitalCell,
    required TResult Function(DiaryCell diaryCell, String? textFieldText)
        updateDiaryCellInFirebase,
    required TResult Function(
            FontWeightEnum? fontWeight,
            TextDecorationEnum? textDecoration,
            FontStyleEnum? fontStyle,
            double? fontSize,
            String? color,
            HorizontalAlignmentsEnum? horizontalAlignment,
            VerticalAlignmentsEnum? verticalAlignment,
            String? backgroundColor)
        changeDiaryCellsSettings,
    required TResult Function(BordersEditingEnum bordersEditingEnum,
            BordersStyleEnum bordersStyleEnum, Color bordersColor)
        changeDiaryCellsBordersSettings,
    required TResult Function(
            FontWeightEnum? fontWeight,
            TextDecorationEnum? textDecoration,
            FontStyleEnum? fontStyle,
            double? fontSize,
            String? color,
            HorizontalAlignmentsEnum? horizontalAlignment,
            VerticalAlignmentsEnum? verticalAlignment,
            String? backgroundColor,
            BordersStyleEnum? bordersStyleEnum,
            Color? bordersColor)
        changeCapitalCellSettings,
    required TResult Function(
            DiaryCell diaryCell,
            int index,
            DiaryCellTextSettings? newTextSettings,
            DiaryCellSettings? newSettings)
        updateDiaryCellSettingsInFirebase,
    required TResult Function(DiaryColumnSettings newSettings)
        updateCapitalCellSettingsInFirebase,
    required TResult Function(PointerMoveEvent details) updateCapitalCellWidth,
    required TResult Function(PointerUpEvent details)
        updateCapitalCellWidthInFirebase,
    required TResult Function(bool isTextEditing) startEditingCells,
    required TResult Function(DiaryList diaryList, String name,
            int columnsCount, List<DiaryColumn> diaryColumns)
        createDiaryColumn,
    required TResult Function(DiaryList diaryList, String columnId)
        deleteDiaryColumn,
    required TResult Function(DiaryList diaryList, String? themeColor,
            String? themeBorderColor, String? themePanelBackgroundColor)
        updateDiaryListSettings,
    required TResult Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<DiaryCell> diaryCells,
            List<CapitalCell> capitalCells,
            String themeName,
            String description)
        shareTheme,
    required TResult Function() startEditingColor,
    required TResult Function() startEditingBorders,
    required TResult Function() startEditingBorderStyle,
    required TResult Function() turnBackEditing,
    required TResult Function() startColumnDeleting,
    required TResult Function() startColorThemeEditing,
    required TResult Function() deleteColumns,
    required TResult Function() loadThemes,
    required TResult Function(ListTheme listTheme) loadFromTheme,
    required TResult Function(ListTheme listTheme) takeTheme,
  }) =>
      throw _privateConstructorUsedError;
  @optionalTypeArgs
  TResult? whenOrNull<TResult extends Object?>({
    TResult? Function()? createSample,
    TResult? Function()? initialLoad,
    TResult? Function(DateTime date, int delay)? getDiaryList,
    TResult? Function(DiaryList diaryList, List<DiaryList> lists)?
        getDiaryColumns,
    TResult? Function(DiaryList diaryList, List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells, List<DiaryList> lists)?
        getDiaryCells,
    TResult? Function(DiaryCell diaryCell)? selectDiaryCell,
    TResult? Function(List<DiaryCell> diaryCells)? selectDiaryCells,
    TResult? Function(CapitalCell capitalCell)? selectCapitalCell,
    TResult? Function(
            DiaryCell diaryCell,
            GlobalObjectKey<State<StatefulWidget>> cellKey,
            DragUpdateDetails details,
            double scaleFactor)?
        onPanUpdate,
    TResult? Function(DiaryList? selectedList)? startEditingList,
    TResult? Function(
            String? newName, String? addedColumnName, int? addedColumnCount)?
        returnToLoaded,
    TResult? Function()? returnToCellsSelected,
    TResult? Function(DiaryList diaryList, String newName)? updateDiaryListName,
    TResult? Function(DiaryCell diaryCell, String? textFieldText)?
        changeDiaryCell,
    TResult? Function(CapitalCell capitalCell, String? textFieldText)?
        changeCapitalCell,
    TResult? Function(DiaryCell diaryCell, String? textFieldText)?
        updateDiaryCellInFirebase,
    TResult? Function(
            FontWeightEnum? fontWeight,
            TextDecorationEnum? textDecoration,
            FontStyleEnum? fontStyle,
            double? fontSize,
            String? color,
            HorizontalAlignmentsEnum? horizontalAlignment,
            VerticalAlignmentsEnum? verticalAlignment,
            String? backgroundColor)?
        changeDiaryCellsSettings,
    TResult? Function(BordersEditingEnum bordersEditingEnum,
            BordersStyleEnum bordersStyleEnum, Color bordersColor)?
        changeDiaryCellsBordersSettings,
    TResult? Function(
            FontWeightEnum? fontWeight,
            TextDecorationEnum? textDecoration,
            FontStyleEnum? fontStyle,
            double? fontSize,
            String? color,
            HorizontalAlignmentsEnum? horizontalAlignment,
            VerticalAlignmentsEnum? verticalAlignment,
            String? backgroundColor,
            BordersStyleEnum? bordersStyleEnum,
            Color? bordersColor)?
        changeCapitalCellSettings,
    TResult? Function(
            DiaryCell diaryCell,
            int index,
            DiaryCellTextSettings? newTextSettings,
            DiaryCellSettings? newSettings)?
        updateDiaryCellSettingsInFirebase,
    TResult? Function(DiaryColumnSettings newSettings)?
        updateCapitalCellSettingsInFirebase,
    TResult? Function(PointerMoveEvent details)? updateCapitalCellWidth,
    TResult? Function(PointerUpEvent details)? updateCapitalCellWidthInFirebase,
    TResult? Function(bool isTextEditing)? startEditingCells,
    TResult? Function(DiaryList diaryList, String name, int columnsCount,
            List<DiaryColumn> diaryColumns)?
        createDiaryColumn,
    TResult? Function(DiaryList diaryList, String columnId)? deleteDiaryColumn,
    TResult? Function(DiaryList diaryList, String? themeColor,
            String? themeBorderColor, String? themePanelBackgroundColor)?
        updateDiaryListSettings,
    TResult? Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<DiaryCell> diaryCells,
            List<CapitalCell> capitalCells,
            String themeName,
            String description)?
        shareTheme,
    TResult? Function()? startEditingColor,
    TResult? Function()? startEditingBorders,
    TResult? Function()? startEditingBorderStyle,
    TResult? Function()? turnBackEditing,
    TResult? Function()? startColumnDeleting,
    TResult? Function()? startColorThemeEditing,
    TResult? Function()? deleteColumns,
    TResult? Function()? loadThemes,
    TResult? Function(ListTheme listTheme)? loadFromTheme,
    TResult? Function(ListTheme listTheme)? takeTheme,
  }) =>
      throw _privateConstructorUsedError;
  @optionalTypeArgs
  TResult maybeWhen<TResult extends Object?>({
    TResult Function()? createSample,
    TResult Function()? initialLoad,
    TResult Function(DateTime date, int delay)? getDiaryList,
    TResult Function(DiaryList diaryList, List<DiaryList> lists)?
        getDiaryColumns,
    TResult Function(DiaryList diaryList, List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells, List<DiaryList> lists)?
        getDiaryCells,
    TResult Function(DiaryCell diaryCell)? selectDiaryCell,
    TResult Function(List<DiaryCell> diaryCells)? selectDiaryCells,
    TResult Function(CapitalCell capitalCell)? selectCapitalCell,
    TResult Function(
            DiaryCell diaryCell,
            GlobalObjectKey<State<StatefulWidget>> cellKey,
            DragUpdateDetails details,
            double scaleFactor)?
        onPanUpdate,
    TResult Function(DiaryList? selectedList)? startEditingList,
    TResult Function(
            String? newName, String? addedColumnName, int? addedColumnCount)?
        returnToLoaded,
    TResult Function()? returnToCellsSelected,
    TResult Function(DiaryList diaryList, String newName)? updateDiaryListName,
    TResult Function(DiaryCell diaryCell, String? textFieldText)?
        changeDiaryCell,
    TResult Function(CapitalCell capitalCell, String? textFieldText)?
        changeCapitalCell,
    TResult Function(DiaryCell diaryCell, String? textFieldText)?
        updateDiaryCellInFirebase,
    TResult Function(
            FontWeightEnum? fontWeight,
            TextDecorationEnum? textDecoration,
            FontStyleEnum? fontStyle,
            double? fontSize,
            String? color,
            HorizontalAlignmentsEnum? horizontalAlignment,
            VerticalAlignmentsEnum? verticalAlignment,
            String? backgroundColor)?
        changeDiaryCellsSettings,
    TResult Function(BordersEditingEnum bordersEditingEnum,
            BordersStyleEnum bordersStyleEnum, Color bordersColor)?
        changeDiaryCellsBordersSettings,
    TResult Function(
            FontWeightEnum? fontWeight,
            TextDecorationEnum? textDecoration,
            FontStyleEnum? fontStyle,
            double? fontSize,
            String? color,
            HorizontalAlignmentsEnum? horizontalAlignment,
            VerticalAlignmentsEnum? verticalAlignment,
            String? backgroundColor,
            BordersStyleEnum? bordersStyleEnum,
            Color? bordersColor)?
        changeCapitalCellSettings,
    TResult Function(
            DiaryCell diaryCell,
            int index,
            DiaryCellTextSettings? newTextSettings,
            DiaryCellSettings? newSettings)?
        updateDiaryCellSettingsInFirebase,
    TResult Function(DiaryColumnSettings newSettings)?
        updateCapitalCellSettingsInFirebase,
    TResult Function(PointerMoveEvent details)? updateCapitalCellWidth,
    TResult Function(PointerUpEvent details)? updateCapitalCellWidthInFirebase,
    TResult Function(bool isTextEditing)? startEditingCells,
    TResult Function(DiaryList diaryList, String name, int columnsCount,
            List<DiaryColumn> diaryColumns)?
        createDiaryColumn,
    TResult Function(DiaryList diaryList, String columnId)? deleteDiaryColumn,
    TResult Function(DiaryList diaryList, String? themeColor,
            String? themeBorderColor, String? themePanelBackgroundColor)?
        updateDiaryListSettings,
    TResult Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<DiaryCell> diaryCells,
            List<CapitalCell> capitalCells,
            String themeName,
            String description)?
        shareTheme,
    TResult Function()? startEditingColor,
    TResult Function()? startEditingBorders,
    TResult Function()? startEditingBorderStyle,
    TResult Function()? turnBackEditing,
    TResult Function()? startColumnDeleting,
    TResult Function()? startColorThemeEditing,
    TResult Function()? deleteColumns,
    TResult Function()? loadThemes,
    TResult Function(ListTheme listTheme)? loadFromTheme,
    TResult Function(ListTheme listTheme)? takeTheme,
    required TResult orElse(),
  }) =>
      throw _privateConstructorUsedError;
  @optionalTypeArgs
  TResult map<TResult extends Object?>({
    required TResult Function(CreateSampleEvent value) createSample,
    required TResult Function(InitialLoadEvent value) initialLoad,
    required TResult Function(GetDiaryListEvent value) getDiaryList,
    required TResult Function(GetDiaryColumnsEvent value) getDiaryColumns,
    required TResult Function(GetDiaryCellsEvent value) getDiaryCells,
    required TResult Function(SelectDiaryCellEvent value) selectDiaryCell,
    required TResult Function(SelectDiaryCellsEvent value) selectDiaryCells,
    required TResult Function(SelectCapitalCellEvent value) selectCapitalCell,
    required TResult Function(OnPanUpdateEvent value) onPanUpdate,
    required TResult Function(StartEditingListEvent value) startEditingList,
    required TResult Function(ReturnToLoadedEvent value) returnToLoaded,
    required TResult Function(ReturnToCellsSelectedEvent value)
        returnToCellsSelected,
    required TResult Function(UpdateDiaryListNameEvent value)
        updateDiaryListName,
    required TResult Function(ChangeDiaryCellEvent value) changeDiaryCell,
    required TResult Function(ChangeCapitalCellEvent value) changeCapitalCell,
    required TResult Function(UpdateDiaryCellInFirebaseEvent value)
        updateDiaryCellInFirebase,
    required TResult Function(ChangeDiaryCellsSettingsEvent value)
        changeDiaryCellsSettings,
    required TResult Function(ChangeDiaryCellsBordersSettingsEvent value)
        changeDiaryCellsBordersSettings,
    required TResult Function(ChangeCapitalCellSettingsEvent value)
        changeCapitalCellSettings,
    required TResult Function(UpdateDiaryCellSettingsInFirebaseEvent value)
        updateDiaryCellSettingsInFirebase,
    required TResult Function(UpdateCapitalCellSettingsInFirebaseEvent value)
        updateCapitalCellSettingsInFirebase,
    required TResult Function(UpdateCapitalCellWidthEvent value)
        updateCapitalCellWidth,
    required TResult Function(UpdateCapitalCellWidthInFirebaseEvent value)
        updateCapitalCellWidthInFirebase,
    required TResult Function(StartEditingCellsEvent value) startEditingCells,
    required TResult Function(CreateDiaryColumnEvent value) createDiaryColumn,
    required TResult Function(DeleteDiaryColumnEvent value) deleteDiaryColumn,
    required TResult Function(UpdateDiaryListSettingsEvent value)
        updateDiaryListSettings,
    required TResult Function(ShareThemeEvent value) shareTheme,
    required TResult Function(StartEditingColorEvent value) startEditingColor,
    required TResult Function(StartEditingBordersEvent value)
        startEditingBorders,
    required TResult Function(StartEditingBordersStyleEvent value)
        startEditingBorderStyle,
    required TResult Function(TurnBackEditingEvent value) turnBackEditing,
    required TResult Function(StartColumnDeletingEvent value)
        startColumnDeleting,
    required TResult Function(StartColorThemeEditingEvent value)
        startColorThemeEditing,
    required TResult Function(DeleteColumnsEvent value) deleteColumns,
    required TResult Function(LoadThemesEvent value) loadThemes,
    required TResult Function(LoadFromThemeEvent value) loadFromTheme,
    required TResult Function(TakeThemeEvent value) takeTheme,
  }) =>
      throw _privateConstructorUsedError;
  @optionalTypeArgs
  TResult? mapOrNull<TResult extends Object?>({
    TResult? Function(CreateSampleEvent value)? createSample,
    TResult? Function(InitialLoadEvent value)? initialLoad,
    TResult? Function(GetDiaryListEvent value)? getDiaryList,
    TResult? Function(GetDiaryColumnsEvent value)? getDiaryColumns,
    TResult? Function(GetDiaryCellsEvent value)? getDiaryCells,
    TResult? Function(SelectDiaryCellEvent value)? selectDiaryCell,
    TResult? Function(SelectDiaryCellsEvent value)? selectDiaryCells,
    TResult? Function(SelectCapitalCellEvent value)? selectCapitalCell,
    TResult? Function(OnPanUpdateEvent value)? onPanUpdate,
    TResult? Function(StartEditingListEvent value)? startEditingList,
    TResult? Function(ReturnToLoadedEvent value)? returnToLoaded,
    TResult? Function(ReturnToCellsSelectedEvent value)? returnToCellsSelected,
    TResult? Function(UpdateDiaryListNameEvent value)? updateDiaryListName,
    TResult? Function(ChangeDiaryCellEvent value)? changeDiaryCell,
    TResult? Function(ChangeCapitalCellEvent value)? changeCapitalCell,
    TResult? Function(UpdateDiaryCellInFirebaseEvent value)?
        updateDiaryCellInFirebase,
    TResult? Function(ChangeDiaryCellsSettingsEvent value)?
        changeDiaryCellsSettings,
    TResult? Function(ChangeDiaryCellsBordersSettingsEvent value)?
        changeDiaryCellsBordersSettings,
    TResult? Function(ChangeCapitalCellSettingsEvent value)?
        changeCapitalCellSettings,
    TResult? Function(UpdateDiaryCellSettingsInFirebaseEvent value)?
        updateDiaryCellSettingsInFirebase,
    TResult? Function(UpdateCapitalCellSettingsInFirebaseEvent value)?
        updateCapitalCellSettingsInFirebase,
    TResult? Function(UpdateCapitalCellWidthEvent value)?
        updateCapitalCellWidth,
    TResult? Function(UpdateCapitalCellWidthInFirebaseEvent value)?
        updateCapitalCellWidthInFirebase,
    TResult? Function(StartEditingCellsEvent value)? startEditingCells,
    TResult? Function(CreateDiaryColumnEvent value)? createDiaryColumn,
    TResult? Function(DeleteDiaryColumnEvent value)? deleteDiaryColumn,
    TResult? Function(UpdateDiaryListSettingsEvent value)?
        updateDiaryListSettings,
    TResult? Function(ShareThemeEvent value)? shareTheme,
    TResult? Function(StartEditingColorEvent value)? startEditingColor,
    TResult? Function(StartEditingBordersEvent value)? startEditingBorders,
    TResult? Function(StartEditingBordersStyleEvent value)?
        startEditingBorderStyle,
    TResult? Function(TurnBackEditingEvent value)? turnBackEditing,
    TResult? Function(StartColumnDeletingEvent value)? startColumnDeleting,
    TResult? Function(StartColorThemeEditingEvent value)?
        startColorThemeEditing,
    TResult? Function(DeleteColumnsEvent value)? deleteColumns,
    TResult? Function(LoadThemesEvent value)? loadThemes,
    TResult? Function(LoadFromThemeEvent value)? loadFromTheme,
    TResult? Function(TakeThemeEvent value)? takeTheme,
  }) =>
      throw _privateConstructorUsedError;
  @optionalTypeArgs
  TResult maybeMap<TResult extends Object?>({
    TResult Function(CreateSampleEvent value)? createSample,
    TResult Function(InitialLoadEvent value)? initialLoad,
    TResult Function(GetDiaryListEvent value)? getDiaryList,
    TResult Function(GetDiaryColumnsEvent value)? getDiaryColumns,
    TResult Function(GetDiaryCellsEvent value)? getDiaryCells,
    TResult Function(SelectDiaryCellEvent value)? selectDiaryCell,
    TResult Function(SelectDiaryCellsEvent value)? selectDiaryCells,
    TResult Function(SelectCapitalCellEvent value)? selectCapitalCell,
    TResult Function(OnPanUpdateEvent value)? onPanUpdate,
    TResult Function(StartEditingListEvent value)? startEditingList,
    TResult Function(ReturnToLoadedEvent value)? returnToLoaded,
    TResult Function(ReturnToCellsSelectedEvent value)? returnToCellsSelected,
    TResult Function(UpdateDiaryListNameEvent value)? updateDiaryListName,
    TResult Function(ChangeDiaryCellEvent value)? changeDiaryCell,
    TResult Function(ChangeCapitalCellEvent value)? changeCapitalCell,
    TResult Function(UpdateDiaryCellInFirebaseEvent value)?
        updateDiaryCellInFirebase,
    TResult Function(ChangeDiaryCellsSettingsEvent value)?
        changeDiaryCellsSettings,
    TResult Function(ChangeDiaryCellsBordersSettingsEvent value)?
        changeDiaryCellsBordersSettings,
    TResult Function(ChangeCapitalCellSettingsEvent value)?
        changeCapitalCellSettings,
    TResult Function(UpdateDiaryCellSettingsInFirebaseEvent value)?
        updateDiaryCellSettingsInFirebase,
    TResult Function(UpdateCapitalCellSettingsInFirebaseEvent value)?
        updateCapitalCellSettingsInFirebase,
    TResult Function(UpdateCapitalCellWidthEvent value)? updateCapitalCellWidth,
    TResult Function(UpdateCapitalCellWidthInFirebaseEvent value)?
        updateCapitalCellWidthInFirebase,
    TResult Function(StartEditingCellsEvent value)? startEditingCells,
    TResult Function(CreateDiaryColumnEvent value)? createDiaryColumn,
    TResult Function(DeleteDiaryColumnEvent value)? deleteDiaryColumn,
    TResult Function(UpdateDiaryListSettingsEvent value)?
        updateDiaryListSettings,
    TResult Function(ShareThemeEvent value)? shareTheme,
    TResult Function(StartEditingColorEvent value)? startEditingColor,
    TResult Function(StartEditingBordersEvent value)? startEditingBorders,
    TResult Function(StartEditingBordersStyleEvent value)?
        startEditingBorderStyle,
    TResult Function(TurnBackEditingEvent value)? turnBackEditing,
    TResult Function(StartColumnDeletingEvent value)? startColumnDeleting,
    TResult Function(StartColorThemeEditingEvent value)? startColorThemeEditing,
    TResult Function(DeleteColumnsEvent value)? deleteColumns,
    TResult Function(LoadThemesEvent value)? loadThemes,
    TResult Function(LoadFromThemeEvent value)? loadFromTheme,
    TResult Function(TakeThemeEvent value)? takeTheme,
    required TResult orElse(),
  }) =>
      throw _privateConstructorUsedError;
}

/// @nodoc
abstract class $DiaryListEventCopyWith<$Res> {
  factory $DiaryListEventCopyWith(
          DiaryListEvent value, $Res Function(DiaryListEvent) then) =
      _$DiaryListEventCopyWithImpl<$Res, DiaryListEvent>;
}

/// @nodoc
class _$DiaryListEventCopyWithImpl<$Res, $Val extends DiaryListEvent>
    implements $DiaryListEventCopyWith<$Res> {
  _$DiaryListEventCopyWithImpl(this._value, this._then);

  // ignore: unused_field
  final $Val _value;
  // ignore: unused_field
  final $Res Function($Val) _then;
}

/// @nodoc
abstract class _$$CreateSampleEventCopyWith<$Res> {
  factory _$$CreateSampleEventCopyWith(
          _$CreateSampleEvent value, $Res Function(_$CreateSampleEvent) then) =
      __$$CreateSampleEventCopyWithImpl<$Res>;
}

/// @nodoc
class __$$CreateSampleEventCopyWithImpl<$Res>
    extends _$DiaryListEventCopyWithImpl<$Res, _$CreateSampleEvent>
    implements _$$CreateSampleEventCopyWith<$Res> {
  __$$CreateSampleEventCopyWithImpl(
      _$CreateSampleEvent _value, $Res Function(_$CreateSampleEvent) _then)
      : super(_value, _then);
}

/// @nodoc

class _$CreateSampleEvent implements CreateSampleEvent {
  const _$CreateSampleEvent();

  @override
  String toString() {
    return 'DiaryListEvent.createSample()';
  }

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType && other is _$CreateSampleEvent);
  }

  @override
  int get hashCode => runtimeType.hashCode;

  @override
  @optionalTypeArgs
  TResult when<TResult extends Object?>({
    required TResult Function() createSample,
    required TResult Function() initialLoad,
    required TResult Function(DateTime date, int delay) getDiaryList,
    required TResult Function(DiaryList diaryList, List<DiaryList> lists)
        getDiaryColumns,
    required TResult Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells,
            List<DiaryList> lists)
        getDiaryCells,
    required TResult Function(DiaryCell diaryCell) selectDiaryCell,
    required TResult Function(List<DiaryCell> diaryCells) selectDiaryCells,
    required TResult Function(CapitalCell capitalCell) selectCapitalCell,
    required TResult Function(
            DiaryCell diaryCell,
            GlobalObjectKey<State<StatefulWidget>> cellKey,
            DragUpdateDetails details,
            double scaleFactor)
        onPanUpdate,
    required TResult Function(DiaryList? selectedList) startEditingList,
    required TResult Function(
            String? newName, String? addedColumnName, int? addedColumnCount)
        returnToLoaded,
    required TResult Function() returnToCellsSelected,
    required TResult Function(DiaryList diaryList, String newName)
        updateDiaryListName,
    required TResult Function(DiaryCell diaryCell, String? textFieldText)
        changeDiaryCell,
    required TResult Function(CapitalCell capitalCell, String? textFieldText)
        changeCapitalCell,
    required TResult Function(DiaryCell diaryCell, String? textFieldText)
        updateDiaryCellInFirebase,
    required TResult Function(
            FontWeightEnum? fontWeight,
            TextDecorationEnum? textDecoration,
            FontStyleEnum? fontStyle,
            double? fontSize,
            String? color,
            HorizontalAlignmentsEnum? horizontalAlignment,
            VerticalAlignmentsEnum? verticalAlignment,
            String? backgroundColor)
        changeDiaryCellsSettings,
    required TResult Function(BordersEditingEnum bordersEditingEnum,
            BordersStyleEnum bordersStyleEnum, Color bordersColor)
        changeDiaryCellsBordersSettings,
    required TResult Function(
            FontWeightEnum? fontWeight,
            TextDecorationEnum? textDecoration,
            FontStyleEnum? fontStyle,
            double? fontSize,
            String? color,
            HorizontalAlignmentsEnum? horizontalAlignment,
            VerticalAlignmentsEnum? verticalAlignment,
            String? backgroundColor,
            BordersStyleEnum? bordersStyleEnum,
            Color? bordersColor)
        changeCapitalCellSettings,
    required TResult Function(
            DiaryCell diaryCell,
            int index,
            DiaryCellTextSettings? newTextSettings,
            DiaryCellSettings? newSettings)
        updateDiaryCellSettingsInFirebase,
    required TResult Function(DiaryColumnSettings newSettings)
        updateCapitalCellSettingsInFirebase,
    required TResult Function(PointerMoveEvent details) updateCapitalCellWidth,
    required TResult Function(PointerUpEvent details)
        updateCapitalCellWidthInFirebase,
    required TResult Function(bool isTextEditing) startEditingCells,
    required TResult Function(DiaryList diaryList, String name,
            int columnsCount, List<DiaryColumn> diaryColumns)
        createDiaryColumn,
    required TResult Function(DiaryList diaryList, String columnId)
        deleteDiaryColumn,
    required TResult Function(DiaryList diaryList, String? themeColor,
            String? themeBorderColor, String? themePanelBackgroundColor)
        updateDiaryListSettings,
    required TResult Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<DiaryCell> diaryCells,
            List<CapitalCell> capitalCells,
            String themeName,
            String description)
        shareTheme,
    required TResult Function() startEditingColor,
    required TResult Function() startEditingBorders,
    required TResult Function() startEditingBorderStyle,
    required TResult Function() turnBackEditing,
    required TResult Function() startColumnDeleting,
    required TResult Function() startColorThemeEditing,
    required TResult Function() deleteColumns,
    required TResult Function() loadThemes,
    required TResult Function(ListTheme listTheme) loadFromTheme,
    required TResult Function(ListTheme listTheme) takeTheme,
  }) {
    return createSample();
  }

  @override
  @optionalTypeArgs
  TResult? whenOrNull<TResult extends Object?>({
    TResult? Function()? createSample,
    TResult? Function()? initialLoad,
    TResult? Function(DateTime date, int delay)? getDiaryList,
    TResult? Function(DiaryList diaryList, List<DiaryList> lists)?
        getDiaryColumns,
    TResult? Function(DiaryList diaryList, List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells, List<DiaryList> lists)?
        getDiaryCells,
    TResult? Function(DiaryCell diaryCell)? selectDiaryCell,
    TResult? Function(List<DiaryCell> diaryCells)? selectDiaryCells,
    TResult? Function(CapitalCell capitalCell)? selectCapitalCell,
    TResult? Function(
            DiaryCell diaryCell,
            GlobalObjectKey<State<StatefulWidget>> cellKey,
            DragUpdateDetails details,
            double scaleFactor)?
        onPanUpdate,
    TResult? Function(DiaryList? selectedList)? startEditingList,
    TResult? Function(
            String? newName, String? addedColumnName, int? addedColumnCount)?
        returnToLoaded,
    TResult? Function()? returnToCellsSelected,
    TResult? Function(DiaryList diaryList, String newName)? updateDiaryListName,
    TResult? Function(DiaryCell diaryCell, String? textFieldText)?
        changeDiaryCell,
    TResult? Function(CapitalCell capitalCell, String? textFieldText)?
        changeCapitalCell,
    TResult? Function(DiaryCell diaryCell, String? textFieldText)?
        updateDiaryCellInFirebase,
    TResult? Function(
            FontWeightEnum? fontWeight,
            TextDecorationEnum? textDecoration,
            FontStyleEnum? fontStyle,
            double? fontSize,
            String? color,
            HorizontalAlignmentsEnum? horizontalAlignment,
            VerticalAlignmentsEnum? verticalAlignment,
            String? backgroundColor)?
        changeDiaryCellsSettings,
    TResult? Function(BordersEditingEnum bordersEditingEnum,
            BordersStyleEnum bordersStyleEnum, Color bordersColor)?
        changeDiaryCellsBordersSettings,
    TResult? Function(
            FontWeightEnum? fontWeight,
            TextDecorationEnum? textDecoration,
            FontStyleEnum? fontStyle,
            double? fontSize,
            String? color,
            HorizontalAlignmentsEnum? horizontalAlignment,
            VerticalAlignmentsEnum? verticalAlignment,
            String? backgroundColor,
            BordersStyleEnum? bordersStyleEnum,
            Color? bordersColor)?
        changeCapitalCellSettings,
    TResult? Function(
            DiaryCell diaryCell,
            int index,
            DiaryCellTextSettings? newTextSettings,
            DiaryCellSettings? newSettings)?
        updateDiaryCellSettingsInFirebase,
    TResult? Function(DiaryColumnSettings newSettings)?
        updateCapitalCellSettingsInFirebase,
    TResult? Function(PointerMoveEvent details)? updateCapitalCellWidth,
    TResult? Function(PointerUpEvent details)? updateCapitalCellWidthInFirebase,
    TResult? Function(bool isTextEditing)? startEditingCells,
    TResult? Function(DiaryList diaryList, String name, int columnsCount,
            List<DiaryColumn> diaryColumns)?
        createDiaryColumn,
    TResult? Function(DiaryList diaryList, String columnId)? deleteDiaryColumn,
    TResult? Function(DiaryList diaryList, String? themeColor,
            String? themeBorderColor, String? themePanelBackgroundColor)?
        updateDiaryListSettings,
    TResult? Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<DiaryCell> diaryCells,
            List<CapitalCell> capitalCells,
            String themeName,
            String description)?
        shareTheme,
    TResult? Function()? startEditingColor,
    TResult? Function()? startEditingBorders,
    TResult? Function()? startEditingBorderStyle,
    TResult? Function()? turnBackEditing,
    TResult? Function()? startColumnDeleting,
    TResult? Function()? startColorThemeEditing,
    TResult? Function()? deleteColumns,
    TResult? Function()? loadThemes,
    TResult? Function(ListTheme listTheme)? loadFromTheme,
    TResult? Function(ListTheme listTheme)? takeTheme,
  }) {
    return createSample?.call();
  }

  @override
  @optionalTypeArgs
  TResult maybeWhen<TResult extends Object?>({
    TResult Function()? createSample,
    TResult Function()? initialLoad,
    TResult Function(DateTime date, int delay)? getDiaryList,
    TResult Function(DiaryList diaryList, List<DiaryList> lists)?
        getDiaryColumns,
    TResult Function(DiaryList diaryList, List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells, List<DiaryList> lists)?
        getDiaryCells,
    TResult Function(DiaryCell diaryCell)? selectDiaryCell,
    TResult Function(List<DiaryCell> diaryCells)? selectDiaryCells,
    TResult Function(CapitalCell capitalCell)? selectCapitalCell,
    TResult Function(
            DiaryCell diaryCell,
            GlobalObjectKey<State<StatefulWidget>> cellKey,
            DragUpdateDetails details,
            double scaleFactor)?
        onPanUpdate,
    TResult Function(DiaryList? selectedList)? startEditingList,
    TResult Function(
            String? newName, String? addedColumnName, int? addedColumnCount)?
        returnToLoaded,
    TResult Function()? returnToCellsSelected,
    TResult Function(DiaryList diaryList, String newName)? updateDiaryListName,
    TResult Function(DiaryCell diaryCell, String? textFieldText)?
        changeDiaryCell,
    TResult Function(CapitalCell capitalCell, String? textFieldText)?
        changeCapitalCell,
    TResult Function(DiaryCell diaryCell, String? textFieldText)?
        updateDiaryCellInFirebase,
    TResult Function(
            FontWeightEnum? fontWeight,
            TextDecorationEnum? textDecoration,
            FontStyleEnum? fontStyle,
            double? fontSize,
            String? color,
            HorizontalAlignmentsEnum? horizontalAlignment,
            VerticalAlignmentsEnum? verticalAlignment,
            String? backgroundColor)?
        changeDiaryCellsSettings,
    TResult Function(BordersEditingEnum bordersEditingEnum,
            BordersStyleEnum bordersStyleEnum, Color bordersColor)?
        changeDiaryCellsBordersSettings,
    TResult Function(
            FontWeightEnum? fontWeight,
            TextDecorationEnum? textDecoration,
            FontStyleEnum? fontStyle,
            double? fontSize,
            String? color,
            HorizontalAlignmentsEnum? horizontalAlignment,
            VerticalAlignmentsEnum? verticalAlignment,
            String? backgroundColor,
            BordersStyleEnum? bordersStyleEnum,
            Color? bordersColor)?
        changeCapitalCellSettings,
    TResult Function(
            DiaryCell diaryCell,
            int index,
            DiaryCellTextSettings? newTextSettings,
            DiaryCellSettings? newSettings)?
        updateDiaryCellSettingsInFirebase,
    TResult Function(DiaryColumnSettings newSettings)?
        updateCapitalCellSettingsInFirebase,
    TResult Function(PointerMoveEvent details)? updateCapitalCellWidth,
    TResult Function(PointerUpEvent details)? updateCapitalCellWidthInFirebase,
    TResult Function(bool isTextEditing)? startEditingCells,
    TResult Function(DiaryList diaryList, String name, int columnsCount,
            List<DiaryColumn> diaryColumns)?
        createDiaryColumn,
    TResult Function(DiaryList diaryList, String columnId)? deleteDiaryColumn,
    TResult Function(DiaryList diaryList, String? themeColor,
            String? themeBorderColor, String? themePanelBackgroundColor)?
        updateDiaryListSettings,
    TResult Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<DiaryCell> diaryCells,
            List<CapitalCell> capitalCells,
            String themeName,
            String description)?
        shareTheme,
    TResult Function()? startEditingColor,
    TResult Function()? startEditingBorders,
    TResult Function()? startEditingBorderStyle,
    TResult Function()? turnBackEditing,
    TResult Function()? startColumnDeleting,
    TResult Function()? startColorThemeEditing,
    TResult Function()? deleteColumns,
    TResult Function()? loadThemes,
    TResult Function(ListTheme listTheme)? loadFromTheme,
    TResult Function(ListTheme listTheme)? takeTheme,
    required TResult orElse(),
  }) {
    if (createSample != null) {
      return createSample();
    }
    return orElse();
  }

  @override
  @optionalTypeArgs
  TResult map<TResult extends Object?>({
    required TResult Function(CreateSampleEvent value) createSample,
    required TResult Function(InitialLoadEvent value) initialLoad,
    required TResult Function(GetDiaryListEvent value) getDiaryList,
    required TResult Function(GetDiaryColumnsEvent value) getDiaryColumns,
    required TResult Function(GetDiaryCellsEvent value) getDiaryCells,
    required TResult Function(SelectDiaryCellEvent value) selectDiaryCell,
    required TResult Function(SelectDiaryCellsEvent value) selectDiaryCells,
    required TResult Function(SelectCapitalCellEvent value) selectCapitalCell,
    required TResult Function(OnPanUpdateEvent value) onPanUpdate,
    required TResult Function(StartEditingListEvent value) startEditingList,
    required TResult Function(ReturnToLoadedEvent value) returnToLoaded,
    required TResult Function(ReturnToCellsSelectedEvent value)
        returnToCellsSelected,
    required TResult Function(UpdateDiaryListNameEvent value)
        updateDiaryListName,
    required TResult Function(ChangeDiaryCellEvent value) changeDiaryCell,
    required TResult Function(ChangeCapitalCellEvent value) changeCapitalCell,
    required TResult Function(UpdateDiaryCellInFirebaseEvent value)
        updateDiaryCellInFirebase,
    required TResult Function(ChangeDiaryCellsSettingsEvent value)
        changeDiaryCellsSettings,
    required TResult Function(ChangeDiaryCellsBordersSettingsEvent value)
        changeDiaryCellsBordersSettings,
    required TResult Function(ChangeCapitalCellSettingsEvent value)
        changeCapitalCellSettings,
    required TResult Function(UpdateDiaryCellSettingsInFirebaseEvent value)
        updateDiaryCellSettingsInFirebase,
    required TResult Function(UpdateCapitalCellSettingsInFirebaseEvent value)
        updateCapitalCellSettingsInFirebase,
    required TResult Function(UpdateCapitalCellWidthEvent value)
        updateCapitalCellWidth,
    required TResult Function(UpdateCapitalCellWidthInFirebaseEvent value)
        updateCapitalCellWidthInFirebase,
    required TResult Function(StartEditingCellsEvent value) startEditingCells,
    required TResult Function(CreateDiaryColumnEvent value) createDiaryColumn,
    required TResult Function(DeleteDiaryColumnEvent value) deleteDiaryColumn,
    required TResult Function(UpdateDiaryListSettingsEvent value)
        updateDiaryListSettings,
    required TResult Function(ShareThemeEvent value) shareTheme,
    required TResult Function(StartEditingColorEvent value) startEditingColor,
    required TResult Function(StartEditingBordersEvent value)
        startEditingBorders,
    required TResult Function(StartEditingBordersStyleEvent value)
        startEditingBorderStyle,
    required TResult Function(TurnBackEditingEvent value) turnBackEditing,
    required TResult Function(StartColumnDeletingEvent value)
        startColumnDeleting,
    required TResult Function(StartColorThemeEditingEvent value)
        startColorThemeEditing,
    required TResult Function(DeleteColumnsEvent value) deleteColumns,
    required TResult Function(LoadThemesEvent value) loadThemes,
    required TResult Function(LoadFromThemeEvent value) loadFromTheme,
    required TResult Function(TakeThemeEvent value) takeTheme,
  }) {
    return createSample(this);
  }

  @override
  @optionalTypeArgs
  TResult? mapOrNull<TResult extends Object?>({
    TResult? Function(CreateSampleEvent value)? createSample,
    TResult? Function(InitialLoadEvent value)? initialLoad,
    TResult? Function(GetDiaryListEvent value)? getDiaryList,
    TResult? Function(GetDiaryColumnsEvent value)? getDiaryColumns,
    TResult? Function(GetDiaryCellsEvent value)? getDiaryCells,
    TResult? Function(SelectDiaryCellEvent value)? selectDiaryCell,
    TResult? Function(SelectDiaryCellsEvent value)? selectDiaryCells,
    TResult? Function(SelectCapitalCellEvent value)? selectCapitalCell,
    TResult? Function(OnPanUpdateEvent value)? onPanUpdate,
    TResult? Function(StartEditingListEvent value)? startEditingList,
    TResult? Function(ReturnToLoadedEvent value)? returnToLoaded,
    TResult? Function(ReturnToCellsSelectedEvent value)? returnToCellsSelected,
    TResult? Function(UpdateDiaryListNameEvent value)? updateDiaryListName,
    TResult? Function(ChangeDiaryCellEvent value)? changeDiaryCell,
    TResult? Function(ChangeCapitalCellEvent value)? changeCapitalCell,
    TResult? Function(UpdateDiaryCellInFirebaseEvent value)?
        updateDiaryCellInFirebase,
    TResult? Function(ChangeDiaryCellsSettingsEvent value)?
        changeDiaryCellsSettings,
    TResult? Function(ChangeDiaryCellsBordersSettingsEvent value)?
        changeDiaryCellsBordersSettings,
    TResult? Function(ChangeCapitalCellSettingsEvent value)?
        changeCapitalCellSettings,
    TResult? Function(UpdateDiaryCellSettingsInFirebaseEvent value)?
        updateDiaryCellSettingsInFirebase,
    TResult? Function(UpdateCapitalCellSettingsInFirebaseEvent value)?
        updateCapitalCellSettingsInFirebase,
    TResult? Function(UpdateCapitalCellWidthEvent value)?
        updateCapitalCellWidth,
    TResult? Function(UpdateCapitalCellWidthInFirebaseEvent value)?
        updateCapitalCellWidthInFirebase,
    TResult? Function(StartEditingCellsEvent value)? startEditingCells,
    TResult? Function(CreateDiaryColumnEvent value)? createDiaryColumn,
    TResult? Function(DeleteDiaryColumnEvent value)? deleteDiaryColumn,
    TResult? Function(UpdateDiaryListSettingsEvent value)?
        updateDiaryListSettings,
    TResult? Function(ShareThemeEvent value)? shareTheme,
    TResult? Function(StartEditingColorEvent value)? startEditingColor,
    TResult? Function(StartEditingBordersEvent value)? startEditingBorders,
    TResult? Function(StartEditingBordersStyleEvent value)?
        startEditingBorderStyle,
    TResult? Function(TurnBackEditingEvent value)? turnBackEditing,
    TResult? Function(StartColumnDeletingEvent value)? startColumnDeleting,
    TResult? Function(StartColorThemeEditingEvent value)?
        startColorThemeEditing,
    TResult? Function(DeleteColumnsEvent value)? deleteColumns,
    TResult? Function(LoadThemesEvent value)? loadThemes,
    TResult? Function(LoadFromThemeEvent value)? loadFromTheme,
    TResult? Function(TakeThemeEvent value)? takeTheme,
  }) {
    return createSample?.call(this);
  }

  @override
  @optionalTypeArgs
  TResult maybeMap<TResult extends Object?>({
    TResult Function(CreateSampleEvent value)? createSample,
    TResult Function(InitialLoadEvent value)? initialLoad,
    TResult Function(GetDiaryListEvent value)? getDiaryList,
    TResult Function(GetDiaryColumnsEvent value)? getDiaryColumns,
    TResult Function(GetDiaryCellsEvent value)? getDiaryCells,
    TResult Function(SelectDiaryCellEvent value)? selectDiaryCell,
    TResult Function(SelectDiaryCellsEvent value)? selectDiaryCells,
    TResult Function(SelectCapitalCellEvent value)? selectCapitalCell,
    TResult Function(OnPanUpdateEvent value)? onPanUpdate,
    TResult Function(StartEditingListEvent value)? startEditingList,
    TResult Function(ReturnToLoadedEvent value)? returnToLoaded,
    TResult Function(ReturnToCellsSelectedEvent value)? returnToCellsSelected,
    TResult Function(UpdateDiaryListNameEvent value)? updateDiaryListName,
    TResult Function(ChangeDiaryCellEvent value)? changeDiaryCell,
    TResult Function(ChangeCapitalCellEvent value)? changeCapitalCell,
    TResult Function(UpdateDiaryCellInFirebaseEvent value)?
        updateDiaryCellInFirebase,
    TResult Function(ChangeDiaryCellsSettingsEvent value)?
        changeDiaryCellsSettings,
    TResult Function(ChangeDiaryCellsBordersSettingsEvent value)?
        changeDiaryCellsBordersSettings,
    TResult Function(ChangeCapitalCellSettingsEvent value)?
        changeCapitalCellSettings,
    TResult Function(UpdateDiaryCellSettingsInFirebaseEvent value)?
        updateDiaryCellSettingsInFirebase,
    TResult Function(UpdateCapitalCellSettingsInFirebaseEvent value)?
        updateCapitalCellSettingsInFirebase,
    TResult Function(UpdateCapitalCellWidthEvent value)? updateCapitalCellWidth,
    TResult Function(UpdateCapitalCellWidthInFirebaseEvent value)?
        updateCapitalCellWidthInFirebase,
    TResult Function(StartEditingCellsEvent value)? startEditingCells,
    TResult Function(CreateDiaryColumnEvent value)? createDiaryColumn,
    TResult Function(DeleteDiaryColumnEvent value)? deleteDiaryColumn,
    TResult Function(UpdateDiaryListSettingsEvent value)?
        updateDiaryListSettings,
    TResult Function(ShareThemeEvent value)? shareTheme,
    TResult Function(StartEditingColorEvent value)? startEditingColor,
    TResult Function(StartEditingBordersEvent value)? startEditingBorders,
    TResult Function(StartEditingBordersStyleEvent value)?
        startEditingBorderStyle,
    TResult Function(TurnBackEditingEvent value)? turnBackEditing,
    TResult Function(StartColumnDeletingEvent value)? startColumnDeleting,
    TResult Function(StartColorThemeEditingEvent value)? startColorThemeEditing,
    TResult Function(DeleteColumnsEvent value)? deleteColumns,
    TResult Function(LoadThemesEvent value)? loadThemes,
    TResult Function(LoadFromThemeEvent value)? loadFromTheme,
    TResult Function(TakeThemeEvent value)? takeTheme,
    required TResult orElse(),
  }) {
    if (createSample != null) {
      return createSample(this);
    }
    return orElse();
  }
}

abstract class CreateSampleEvent implements DiaryListEvent {
  const factory CreateSampleEvent() = _$CreateSampleEvent;
}

/// @nodoc
abstract class _$$InitialLoadEventCopyWith<$Res> {
  factory _$$InitialLoadEventCopyWith(
          _$InitialLoadEvent value, $Res Function(_$InitialLoadEvent) then) =
      __$$InitialLoadEventCopyWithImpl<$Res>;
}

/// @nodoc
class __$$InitialLoadEventCopyWithImpl<$Res>
    extends _$DiaryListEventCopyWithImpl<$Res, _$InitialLoadEvent>
    implements _$$InitialLoadEventCopyWith<$Res> {
  __$$InitialLoadEventCopyWithImpl(
      _$InitialLoadEvent _value, $Res Function(_$InitialLoadEvent) _then)
      : super(_value, _then);
}

/// @nodoc

class _$InitialLoadEvent implements InitialLoadEvent {
  const _$InitialLoadEvent();

  @override
  String toString() {
    return 'DiaryListEvent.initialLoad()';
  }

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType && other is _$InitialLoadEvent);
  }

  @override
  int get hashCode => runtimeType.hashCode;

  @override
  @optionalTypeArgs
  TResult when<TResult extends Object?>({
    required TResult Function() createSample,
    required TResult Function() initialLoad,
    required TResult Function(DateTime date, int delay) getDiaryList,
    required TResult Function(DiaryList diaryList, List<DiaryList> lists)
        getDiaryColumns,
    required TResult Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells,
            List<DiaryList> lists)
        getDiaryCells,
    required TResult Function(DiaryCell diaryCell) selectDiaryCell,
    required TResult Function(List<DiaryCell> diaryCells) selectDiaryCells,
    required TResult Function(CapitalCell capitalCell) selectCapitalCell,
    required TResult Function(
            DiaryCell diaryCell,
            GlobalObjectKey<State<StatefulWidget>> cellKey,
            DragUpdateDetails details,
            double scaleFactor)
        onPanUpdate,
    required TResult Function(DiaryList? selectedList) startEditingList,
    required TResult Function(
            String? newName, String? addedColumnName, int? addedColumnCount)
        returnToLoaded,
    required TResult Function() returnToCellsSelected,
    required TResult Function(DiaryList diaryList, String newName)
        updateDiaryListName,
    required TResult Function(DiaryCell diaryCell, String? textFieldText)
        changeDiaryCell,
    required TResult Function(CapitalCell capitalCell, String? textFieldText)
        changeCapitalCell,
    required TResult Function(DiaryCell diaryCell, String? textFieldText)
        updateDiaryCellInFirebase,
    required TResult Function(
            FontWeightEnum? fontWeight,
            TextDecorationEnum? textDecoration,
            FontStyleEnum? fontStyle,
            double? fontSize,
            String? color,
            HorizontalAlignmentsEnum? horizontalAlignment,
            VerticalAlignmentsEnum? verticalAlignment,
            String? backgroundColor)
        changeDiaryCellsSettings,
    required TResult Function(BordersEditingEnum bordersEditingEnum,
            BordersStyleEnum bordersStyleEnum, Color bordersColor)
        changeDiaryCellsBordersSettings,
    required TResult Function(
            FontWeightEnum? fontWeight,
            TextDecorationEnum? textDecoration,
            FontStyleEnum? fontStyle,
            double? fontSize,
            String? color,
            HorizontalAlignmentsEnum? horizontalAlignment,
            VerticalAlignmentsEnum? verticalAlignment,
            String? backgroundColor,
            BordersStyleEnum? bordersStyleEnum,
            Color? bordersColor)
        changeCapitalCellSettings,
    required TResult Function(
            DiaryCell diaryCell,
            int index,
            DiaryCellTextSettings? newTextSettings,
            DiaryCellSettings? newSettings)
        updateDiaryCellSettingsInFirebase,
    required TResult Function(DiaryColumnSettings newSettings)
        updateCapitalCellSettingsInFirebase,
    required TResult Function(PointerMoveEvent details) updateCapitalCellWidth,
    required TResult Function(PointerUpEvent details)
        updateCapitalCellWidthInFirebase,
    required TResult Function(bool isTextEditing) startEditingCells,
    required TResult Function(DiaryList diaryList, String name,
            int columnsCount, List<DiaryColumn> diaryColumns)
        createDiaryColumn,
    required TResult Function(DiaryList diaryList, String columnId)
        deleteDiaryColumn,
    required TResult Function(DiaryList diaryList, String? themeColor,
            String? themeBorderColor, String? themePanelBackgroundColor)
        updateDiaryListSettings,
    required TResult Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<DiaryCell> diaryCells,
            List<CapitalCell> capitalCells,
            String themeName,
            String description)
        shareTheme,
    required TResult Function() startEditingColor,
    required TResult Function() startEditingBorders,
    required TResult Function() startEditingBorderStyle,
    required TResult Function() turnBackEditing,
    required TResult Function() startColumnDeleting,
    required TResult Function() startColorThemeEditing,
    required TResult Function() deleteColumns,
    required TResult Function() loadThemes,
    required TResult Function(ListTheme listTheme) loadFromTheme,
    required TResult Function(ListTheme listTheme) takeTheme,
  }) {
    return initialLoad();
  }

  @override
  @optionalTypeArgs
  TResult? whenOrNull<TResult extends Object?>({
    TResult? Function()? createSample,
    TResult? Function()? initialLoad,
    TResult? Function(DateTime date, int delay)? getDiaryList,
    TResult? Function(DiaryList diaryList, List<DiaryList> lists)?
        getDiaryColumns,
    TResult? Function(DiaryList diaryList, List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells, List<DiaryList> lists)?
        getDiaryCells,
    TResult? Function(DiaryCell diaryCell)? selectDiaryCell,
    TResult? Function(List<DiaryCell> diaryCells)? selectDiaryCells,
    TResult? Function(CapitalCell capitalCell)? selectCapitalCell,
    TResult? Function(
            DiaryCell diaryCell,
            GlobalObjectKey<State<StatefulWidget>> cellKey,
            DragUpdateDetails details,
            double scaleFactor)?
        onPanUpdate,
    TResult? Function(DiaryList? selectedList)? startEditingList,
    TResult? Function(
            String? newName, String? addedColumnName, int? addedColumnCount)?
        returnToLoaded,
    TResult? Function()? returnToCellsSelected,
    TResult? Function(DiaryList diaryList, String newName)? updateDiaryListName,
    TResult? Function(DiaryCell diaryCell, String? textFieldText)?
        changeDiaryCell,
    TResult? Function(CapitalCell capitalCell, String? textFieldText)?
        changeCapitalCell,
    TResult? Function(DiaryCell diaryCell, String? textFieldText)?
        updateDiaryCellInFirebase,
    TResult? Function(
            FontWeightEnum? fontWeight,
            TextDecorationEnum? textDecoration,
            FontStyleEnum? fontStyle,
            double? fontSize,
            String? color,
            HorizontalAlignmentsEnum? horizontalAlignment,
            VerticalAlignmentsEnum? verticalAlignment,
            String? backgroundColor)?
        changeDiaryCellsSettings,
    TResult? Function(BordersEditingEnum bordersEditingEnum,
            BordersStyleEnum bordersStyleEnum, Color bordersColor)?
        changeDiaryCellsBordersSettings,
    TResult? Function(
            FontWeightEnum? fontWeight,
            TextDecorationEnum? textDecoration,
            FontStyleEnum? fontStyle,
            double? fontSize,
            String? color,
            HorizontalAlignmentsEnum? horizontalAlignment,
            VerticalAlignmentsEnum? verticalAlignment,
            String? backgroundColor,
            BordersStyleEnum? bordersStyleEnum,
            Color? bordersColor)?
        changeCapitalCellSettings,
    TResult? Function(
            DiaryCell diaryCell,
            int index,
            DiaryCellTextSettings? newTextSettings,
            DiaryCellSettings? newSettings)?
        updateDiaryCellSettingsInFirebase,
    TResult? Function(DiaryColumnSettings newSettings)?
        updateCapitalCellSettingsInFirebase,
    TResult? Function(PointerMoveEvent details)? updateCapitalCellWidth,
    TResult? Function(PointerUpEvent details)? updateCapitalCellWidthInFirebase,
    TResult? Function(bool isTextEditing)? startEditingCells,
    TResult? Function(DiaryList diaryList, String name, int columnsCount,
            List<DiaryColumn> diaryColumns)?
        createDiaryColumn,
    TResult? Function(DiaryList diaryList, String columnId)? deleteDiaryColumn,
    TResult? Function(DiaryList diaryList, String? themeColor,
            String? themeBorderColor, String? themePanelBackgroundColor)?
        updateDiaryListSettings,
    TResult? Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<DiaryCell> diaryCells,
            List<CapitalCell> capitalCells,
            String themeName,
            String description)?
        shareTheme,
    TResult? Function()? startEditingColor,
    TResult? Function()? startEditingBorders,
    TResult? Function()? startEditingBorderStyle,
    TResult? Function()? turnBackEditing,
    TResult? Function()? startColumnDeleting,
    TResult? Function()? startColorThemeEditing,
    TResult? Function()? deleteColumns,
    TResult? Function()? loadThemes,
    TResult? Function(ListTheme listTheme)? loadFromTheme,
    TResult? Function(ListTheme listTheme)? takeTheme,
  }) {
    return initialLoad?.call();
  }

  @override
  @optionalTypeArgs
  TResult maybeWhen<TResult extends Object?>({
    TResult Function()? createSample,
    TResult Function()? initialLoad,
    TResult Function(DateTime date, int delay)? getDiaryList,
    TResult Function(DiaryList diaryList, List<DiaryList> lists)?
        getDiaryColumns,
    TResult Function(DiaryList diaryList, List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells, List<DiaryList> lists)?
        getDiaryCells,
    TResult Function(DiaryCell diaryCell)? selectDiaryCell,
    TResult Function(List<DiaryCell> diaryCells)? selectDiaryCells,
    TResult Function(CapitalCell capitalCell)? selectCapitalCell,
    TResult Function(
            DiaryCell diaryCell,
            GlobalObjectKey<State<StatefulWidget>> cellKey,
            DragUpdateDetails details,
            double scaleFactor)?
        onPanUpdate,
    TResult Function(DiaryList? selectedList)? startEditingList,
    TResult Function(
            String? newName, String? addedColumnName, int? addedColumnCount)?
        returnToLoaded,
    TResult Function()? returnToCellsSelected,
    TResult Function(DiaryList diaryList, String newName)? updateDiaryListName,
    TResult Function(DiaryCell diaryCell, String? textFieldText)?
        changeDiaryCell,
    TResult Function(CapitalCell capitalCell, String? textFieldText)?
        changeCapitalCell,
    TResult Function(DiaryCell diaryCell, String? textFieldText)?
        updateDiaryCellInFirebase,
    TResult Function(
            FontWeightEnum? fontWeight,
            TextDecorationEnum? textDecoration,
            FontStyleEnum? fontStyle,
            double? fontSize,
            String? color,
            HorizontalAlignmentsEnum? horizontalAlignment,
            VerticalAlignmentsEnum? verticalAlignment,
            String? backgroundColor)?
        changeDiaryCellsSettings,
    TResult Function(BordersEditingEnum bordersEditingEnum,
            BordersStyleEnum bordersStyleEnum, Color bordersColor)?
        changeDiaryCellsBordersSettings,
    TResult Function(
            FontWeightEnum? fontWeight,
            TextDecorationEnum? textDecoration,
            FontStyleEnum? fontStyle,
            double? fontSize,
            String? color,
            HorizontalAlignmentsEnum? horizontalAlignment,
            VerticalAlignmentsEnum? verticalAlignment,
            String? backgroundColor,
            BordersStyleEnum? bordersStyleEnum,
            Color? bordersColor)?
        changeCapitalCellSettings,
    TResult Function(
            DiaryCell diaryCell,
            int index,
            DiaryCellTextSettings? newTextSettings,
            DiaryCellSettings? newSettings)?
        updateDiaryCellSettingsInFirebase,
    TResult Function(DiaryColumnSettings newSettings)?
        updateCapitalCellSettingsInFirebase,
    TResult Function(PointerMoveEvent details)? updateCapitalCellWidth,
    TResult Function(PointerUpEvent details)? updateCapitalCellWidthInFirebase,
    TResult Function(bool isTextEditing)? startEditingCells,
    TResult Function(DiaryList diaryList, String name, int columnsCount,
            List<DiaryColumn> diaryColumns)?
        createDiaryColumn,
    TResult Function(DiaryList diaryList, String columnId)? deleteDiaryColumn,
    TResult Function(DiaryList diaryList, String? themeColor,
            String? themeBorderColor, String? themePanelBackgroundColor)?
        updateDiaryListSettings,
    TResult Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<DiaryCell> diaryCells,
            List<CapitalCell> capitalCells,
            String themeName,
            String description)?
        shareTheme,
    TResult Function()? startEditingColor,
    TResult Function()? startEditingBorders,
    TResult Function()? startEditingBorderStyle,
    TResult Function()? turnBackEditing,
    TResult Function()? startColumnDeleting,
    TResult Function()? startColorThemeEditing,
    TResult Function()? deleteColumns,
    TResult Function()? loadThemes,
    TResult Function(ListTheme listTheme)? loadFromTheme,
    TResult Function(ListTheme listTheme)? takeTheme,
    required TResult orElse(),
  }) {
    if (initialLoad != null) {
      return initialLoad();
    }
    return orElse();
  }

  @override
  @optionalTypeArgs
  TResult map<TResult extends Object?>({
    required TResult Function(CreateSampleEvent value) createSample,
    required TResult Function(InitialLoadEvent value) initialLoad,
    required TResult Function(GetDiaryListEvent value) getDiaryList,
    required TResult Function(GetDiaryColumnsEvent value) getDiaryColumns,
    required TResult Function(GetDiaryCellsEvent value) getDiaryCells,
    required TResult Function(SelectDiaryCellEvent value) selectDiaryCell,
    required TResult Function(SelectDiaryCellsEvent value) selectDiaryCells,
    required TResult Function(SelectCapitalCellEvent value) selectCapitalCell,
    required TResult Function(OnPanUpdateEvent value) onPanUpdate,
    required TResult Function(StartEditingListEvent value) startEditingList,
    required TResult Function(ReturnToLoadedEvent value) returnToLoaded,
    required TResult Function(ReturnToCellsSelectedEvent value)
        returnToCellsSelected,
    required TResult Function(UpdateDiaryListNameEvent value)
        updateDiaryListName,
    required TResult Function(ChangeDiaryCellEvent value) changeDiaryCell,
    required TResult Function(ChangeCapitalCellEvent value) changeCapitalCell,
    required TResult Function(UpdateDiaryCellInFirebaseEvent value)
        updateDiaryCellInFirebase,
    required TResult Function(ChangeDiaryCellsSettingsEvent value)
        changeDiaryCellsSettings,
    required TResult Function(ChangeDiaryCellsBordersSettingsEvent value)
        changeDiaryCellsBordersSettings,
    required TResult Function(ChangeCapitalCellSettingsEvent value)
        changeCapitalCellSettings,
    required TResult Function(UpdateDiaryCellSettingsInFirebaseEvent value)
        updateDiaryCellSettingsInFirebase,
    required TResult Function(UpdateCapitalCellSettingsInFirebaseEvent value)
        updateCapitalCellSettingsInFirebase,
    required TResult Function(UpdateCapitalCellWidthEvent value)
        updateCapitalCellWidth,
    required TResult Function(UpdateCapitalCellWidthInFirebaseEvent value)
        updateCapitalCellWidthInFirebase,
    required TResult Function(StartEditingCellsEvent value) startEditingCells,
    required TResult Function(CreateDiaryColumnEvent value) createDiaryColumn,
    required TResult Function(DeleteDiaryColumnEvent value) deleteDiaryColumn,
    required TResult Function(UpdateDiaryListSettingsEvent value)
        updateDiaryListSettings,
    required TResult Function(ShareThemeEvent value) shareTheme,
    required TResult Function(StartEditingColorEvent value) startEditingColor,
    required TResult Function(StartEditingBordersEvent value)
        startEditingBorders,
    required TResult Function(StartEditingBordersStyleEvent value)
        startEditingBorderStyle,
    required TResult Function(TurnBackEditingEvent value) turnBackEditing,
    required TResult Function(StartColumnDeletingEvent value)
        startColumnDeleting,
    required TResult Function(StartColorThemeEditingEvent value)
        startColorThemeEditing,
    required TResult Function(DeleteColumnsEvent value) deleteColumns,
    required TResult Function(LoadThemesEvent value) loadThemes,
    required TResult Function(LoadFromThemeEvent value) loadFromTheme,
    required TResult Function(TakeThemeEvent value) takeTheme,
  }) {
    return initialLoad(this);
  }

  @override
  @optionalTypeArgs
  TResult? mapOrNull<TResult extends Object?>({
    TResult? Function(CreateSampleEvent value)? createSample,
    TResult? Function(InitialLoadEvent value)? initialLoad,
    TResult? Function(GetDiaryListEvent value)? getDiaryList,
    TResult? Function(GetDiaryColumnsEvent value)? getDiaryColumns,
    TResult? Function(GetDiaryCellsEvent value)? getDiaryCells,
    TResult? Function(SelectDiaryCellEvent value)? selectDiaryCell,
    TResult? Function(SelectDiaryCellsEvent value)? selectDiaryCells,
    TResult? Function(SelectCapitalCellEvent value)? selectCapitalCell,
    TResult? Function(OnPanUpdateEvent value)? onPanUpdate,
    TResult? Function(StartEditingListEvent value)? startEditingList,
    TResult? Function(ReturnToLoadedEvent value)? returnToLoaded,
    TResult? Function(ReturnToCellsSelectedEvent value)? returnToCellsSelected,
    TResult? Function(UpdateDiaryListNameEvent value)? updateDiaryListName,
    TResult? Function(ChangeDiaryCellEvent value)? changeDiaryCell,
    TResult? Function(ChangeCapitalCellEvent value)? changeCapitalCell,
    TResult? Function(UpdateDiaryCellInFirebaseEvent value)?
        updateDiaryCellInFirebase,
    TResult? Function(ChangeDiaryCellsSettingsEvent value)?
        changeDiaryCellsSettings,
    TResult? Function(ChangeDiaryCellsBordersSettingsEvent value)?
        changeDiaryCellsBordersSettings,
    TResult? Function(ChangeCapitalCellSettingsEvent value)?
        changeCapitalCellSettings,
    TResult? Function(UpdateDiaryCellSettingsInFirebaseEvent value)?
        updateDiaryCellSettingsInFirebase,
    TResult? Function(UpdateCapitalCellSettingsInFirebaseEvent value)?
        updateCapitalCellSettingsInFirebase,
    TResult? Function(UpdateCapitalCellWidthEvent value)?
        updateCapitalCellWidth,
    TResult? Function(UpdateCapitalCellWidthInFirebaseEvent value)?
        updateCapitalCellWidthInFirebase,
    TResult? Function(StartEditingCellsEvent value)? startEditingCells,
    TResult? Function(CreateDiaryColumnEvent value)? createDiaryColumn,
    TResult? Function(DeleteDiaryColumnEvent value)? deleteDiaryColumn,
    TResult? Function(UpdateDiaryListSettingsEvent value)?
        updateDiaryListSettings,
    TResult? Function(ShareThemeEvent value)? shareTheme,
    TResult? Function(StartEditingColorEvent value)? startEditingColor,
    TResult? Function(StartEditingBordersEvent value)? startEditingBorders,
    TResult? Function(StartEditingBordersStyleEvent value)?
        startEditingBorderStyle,
    TResult? Function(TurnBackEditingEvent value)? turnBackEditing,
    TResult? Function(StartColumnDeletingEvent value)? startColumnDeleting,
    TResult? Function(StartColorThemeEditingEvent value)?
        startColorThemeEditing,
    TResult? Function(DeleteColumnsEvent value)? deleteColumns,
    TResult? Function(LoadThemesEvent value)? loadThemes,
    TResult? Function(LoadFromThemeEvent value)? loadFromTheme,
    TResult? Function(TakeThemeEvent value)? takeTheme,
  }) {
    return initialLoad?.call(this);
  }

  @override
  @optionalTypeArgs
  TResult maybeMap<TResult extends Object?>({
    TResult Function(CreateSampleEvent value)? createSample,
    TResult Function(InitialLoadEvent value)? initialLoad,
    TResult Function(GetDiaryListEvent value)? getDiaryList,
    TResult Function(GetDiaryColumnsEvent value)? getDiaryColumns,
    TResult Function(GetDiaryCellsEvent value)? getDiaryCells,
    TResult Function(SelectDiaryCellEvent value)? selectDiaryCell,
    TResult Function(SelectDiaryCellsEvent value)? selectDiaryCells,
    TResult Function(SelectCapitalCellEvent value)? selectCapitalCell,
    TResult Function(OnPanUpdateEvent value)? onPanUpdate,
    TResult Function(StartEditingListEvent value)? startEditingList,
    TResult Function(ReturnToLoadedEvent value)? returnToLoaded,
    TResult Function(ReturnToCellsSelectedEvent value)? returnToCellsSelected,
    TResult Function(UpdateDiaryListNameEvent value)? updateDiaryListName,
    TResult Function(ChangeDiaryCellEvent value)? changeDiaryCell,
    TResult Function(ChangeCapitalCellEvent value)? changeCapitalCell,
    TResult Function(UpdateDiaryCellInFirebaseEvent value)?
        updateDiaryCellInFirebase,
    TResult Function(ChangeDiaryCellsSettingsEvent value)?
        changeDiaryCellsSettings,
    TResult Function(ChangeDiaryCellsBordersSettingsEvent value)?
        changeDiaryCellsBordersSettings,
    TResult Function(ChangeCapitalCellSettingsEvent value)?
        changeCapitalCellSettings,
    TResult Function(UpdateDiaryCellSettingsInFirebaseEvent value)?
        updateDiaryCellSettingsInFirebase,
    TResult Function(UpdateCapitalCellSettingsInFirebaseEvent value)?
        updateCapitalCellSettingsInFirebase,
    TResult Function(UpdateCapitalCellWidthEvent value)? updateCapitalCellWidth,
    TResult Function(UpdateCapitalCellWidthInFirebaseEvent value)?
        updateCapitalCellWidthInFirebase,
    TResult Function(StartEditingCellsEvent value)? startEditingCells,
    TResult Function(CreateDiaryColumnEvent value)? createDiaryColumn,
    TResult Function(DeleteDiaryColumnEvent value)? deleteDiaryColumn,
    TResult Function(UpdateDiaryListSettingsEvent value)?
        updateDiaryListSettings,
    TResult Function(ShareThemeEvent value)? shareTheme,
    TResult Function(StartEditingColorEvent value)? startEditingColor,
    TResult Function(StartEditingBordersEvent value)? startEditingBorders,
    TResult Function(StartEditingBordersStyleEvent value)?
        startEditingBorderStyle,
    TResult Function(TurnBackEditingEvent value)? turnBackEditing,
    TResult Function(StartColumnDeletingEvent value)? startColumnDeleting,
    TResult Function(StartColorThemeEditingEvent value)? startColorThemeEditing,
    TResult Function(DeleteColumnsEvent value)? deleteColumns,
    TResult Function(LoadThemesEvent value)? loadThemes,
    TResult Function(LoadFromThemeEvent value)? loadFromTheme,
    TResult Function(TakeThemeEvent value)? takeTheme,
    required TResult orElse(),
  }) {
    if (initialLoad != null) {
      return initialLoad(this);
    }
    return orElse();
  }
}

abstract class InitialLoadEvent implements DiaryListEvent {
  const factory InitialLoadEvent() = _$InitialLoadEvent;
}

/// @nodoc
abstract class _$$GetDiaryListEventCopyWith<$Res> {
  factory _$$GetDiaryListEventCopyWith(
          _$GetDiaryListEvent value, $Res Function(_$GetDiaryListEvent) then) =
      __$$GetDiaryListEventCopyWithImpl<$Res>;
  @useResult
  $Res call({DateTime date, int delay});
}

/// @nodoc
class __$$GetDiaryListEventCopyWithImpl<$Res>
    extends _$DiaryListEventCopyWithImpl<$Res, _$GetDiaryListEvent>
    implements _$$GetDiaryListEventCopyWith<$Res> {
  __$$GetDiaryListEventCopyWithImpl(
      _$GetDiaryListEvent _value, $Res Function(_$GetDiaryListEvent) _then)
      : super(_value, _then);

  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? date = null,
    Object? delay = null,
  }) {
    return _then(_$GetDiaryListEvent(
      date: null == date
          ? _value.date
          : date // ignore: cast_nullable_to_non_nullable
              as DateTime,
      delay: null == delay
          ? _value.delay
          : delay // ignore: cast_nullable_to_non_nullable
              as int,
    ));
  }
}

/// @nodoc

class _$GetDiaryListEvent implements GetDiaryListEvent {
  const _$GetDiaryListEvent({required this.date, required this.delay});

  @override
  final DateTime date;
  @override
  final int delay;

  @override
  String toString() {
    return 'DiaryListEvent.getDiaryList(date: $date, delay: $delay)';
  }

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$GetDiaryListEvent &&
            (identical(other.date, date) || other.date == date) &&
            (identical(other.delay, delay) || other.delay == delay));
  }

  @override
  int get hashCode => Object.hash(runtimeType, date, delay);

  @JsonKey(ignore: true)
  @override
  @pragma('vm:prefer-inline')
  _$$GetDiaryListEventCopyWith<_$GetDiaryListEvent> get copyWith =>
      __$$GetDiaryListEventCopyWithImpl<_$GetDiaryListEvent>(this, _$identity);

  @override
  @optionalTypeArgs
  TResult when<TResult extends Object?>({
    required TResult Function() createSample,
    required TResult Function() initialLoad,
    required TResult Function(DateTime date, int delay) getDiaryList,
    required TResult Function(DiaryList diaryList, List<DiaryList> lists)
        getDiaryColumns,
    required TResult Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells,
            List<DiaryList> lists)
        getDiaryCells,
    required TResult Function(DiaryCell diaryCell) selectDiaryCell,
    required TResult Function(List<DiaryCell> diaryCells) selectDiaryCells,
    required TResult Function(CapitalCell capitalCell) selectCapitalCell,
    required TResult Function(
            DiaryCell diaryCell,
            GlobalObjectKey<State<StatefulWidget>> cellKey,
            DragUpdateDetails details,
            double scaleFactor)
        onPanUpdate,
    required TResult Function(DiaryList? selectedList) startEditingList,
    required TResult Function(
            String? newName, String? addedColumnName, int? addedColumnCount)
        returnToLoaded,
    required TResult Function() returnToCellsSelected,
    required TResult Function(DiaryList diaryList, String newName)
        updateDiaryListName,
    required TResult Function(DiaryCell diaryCell, String? textFieldText)
        changeDiaryCell,
    required TResult Function(CapitalCell capitalCell, String? textFieldText)
        changeCapitalCell,
    required TResult Function(DiaryCell diaryCell, String? textFieldText)
        updateDiaryCellInFirebase,
    required TResult Function(
            FontWeightEnum? fontWeight,
            TextDecorationEnum? textDecoration,
            FontStyleEnum? fontStyle,
            double? fontSize,
            String? color,
            HorizontalAlignmentsEnum? horizontalAlignment,
            VerticalAlignmentsEnum? verticalAlignment,
            String? backgroundColor)
        changeDiaryCellsSettings,
    required TResult Function(BordersEditingEnum bordersEditingEnum,
            BordersStyleEnum bordersStyleEnum, Color bordersColor)
        changeDiaryCellsBordersSettings,
    required TResult Function(
            FontWeightEnum? fontWeight,
            TextDecorationEnum? textDecoration,
            FontStyleEnum? fontStyle,
            double? fontSize,
            String? color,
            HorizontalAlignmentsEnum? horizontalAlignment,
            VerticalAlignmentsEnum? verticalAlignment,
            String? backgroundColor,
            BordersStyleEnum? bordersStyleEnum,
            Color? bordersColor)
        changeCapitalCellSettings,
    required TResult Function(
            DiaryCell diaryCell,
            int index,
            DiaryCellTextSettings? newTextSettings,
            DiaryCellSettings? newSettings)
        updateDiaryCellSettingsInFirebase,
    required TResult Function(DiaryColumnSettings newSettings)
        updateCapitalCellSettingsInFirebase,
    required TResult Function(PointerMoveEvent details) updateCapitalCellWidth,
    required TResult Function(PointerUpEvent details)
        updateCapitalCellWidthInFirebase,
    required TResult Function(bool isTextEditing) startEditingCells,
    required TResult Function(DiaryList diaryList, String name,
            int columnsCount, List<DiaryColumn> diaryColumns)
        createDiaryColumn,
    required TResult Function(DiaryList diaryList, String columnId)
        deleteDiaryColumn,
    required TResult Function(DiaryList diaryList, String? themeColor,
            String? themeBorderColor, String? themePanelBackgroundColor)
        updateDiaryListSettings,
    required TResult Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<DiaryCell> diaryCells,
            List<CapitalCell> capitalCells,
            String themeName,
            String description)
        shareTheme,
    required TResult Function() startEditingColor,
    required TResult Function() startEditingBorders,
    required TResult Function() startEditingBorderStyle,
    required TResult Function() turnBackEditing,
    required TResult Function() startColumnDeleting,
    required TResult Function() startColorThemeEditing,
    required TResult Function() deleteColumns,
    required TResult Function() loadThemes,
    required TResult Function(ListTheme listTheme) loadFromTheme,
    required TResult Function(ListTheme listTheme) takeTheme,
  }) {
    return getDiaryList(date, delay);
  }

  @override
  @optionalTypeArgs
  TResult? whenOrNull<TResult extends Object?>({
    TResult? Function()? createSample,
    TResult? Function()? initialLoad,
    TResult? Function(DateTime date, int delay)? getDiaryList,
    TResult? Function(DiaryList diaryList, List<DiaryList> lists)?
        getDiaryColumns,
    TResult? Function(DiaryList diaryList, List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells, List<DiaryList> lists)?
        getDiaryCells,
    TResult? Function(DiaryCell diaryCell)? selectDiaryCell,
    TResult? Function(List<DiaryCell> diaryCells)? selectDiaryCells,
    TResult? Function(CapitalCell capitalCell)? selectCapitalCell,
    TResult? Function(
            DiaryCell diaryCell,
            GlobalObjectKey<State<StatefulWidget>> cellKey,
            DragUpdateDetails details,
            double scaleFactor)?
        onPanUpdate,
    TResult? Function(DiaryList? selectedList)? startEditingList,
    TResult? Function(
            String? newName, String? addedColumnName, int? addedColumnCount)?
        returnToLoaded,
    TResult? Function()? returnToCellsSelected,
    TResult? Function(DiaryList diaryList, String newName)? updateDiaryListName,
    TResult? Function(DiaryCell diaryCell, String? textFieldText)?
        changeDiaryCell,
    TResult? Function(CapitalCell capitalCell, String? textFieldText)?
        changeCapitalCell,
    TResult? Function(DiaryCell diaryCell, String? textFieldText)?
        updateDiaryCellInFirebase,
    TResult? Function(
            FontWeightEnum? fontWeight,
            TextDecorationEnum? textDecoration,
            FontStyleEnum? fontStyle,
            double? fontSize,
            String? color,
            HorizontalAlignmentsEnum? horizontalAlignment,
            VerticalAlignmentsEnum? verticalAlignment,
            String? backgroundColor)?
        changeDiaryCellsSettings,
    TResult? Function(BordersEditingEnum bordersEditingEnum,
            BordersStyleEnum bordersStyleEnum, Color bordersColor)?
        changeDiaryCellsBordersSettings,
    TResult? Function(
            FontWeightEnum? fontWeight,
            TextDecorationEnum? textDecoration,
            FontStyleEnum? fontStyle,
            double? fontSize,
            String? color,
            HorizontalAlignmentsEnum? horizontalAlignment,
            VerticalAlignmentsEnum? verticalAlignment,
            String? backgroundColor,
            BordersStyleEnum? bordersStyleEnum,
            Color? bordersColor)?
        changeCapitalCellSettings,
    TResult? Function(
            DiaryCell diaryCell,
            int index,
            DiaryCellTextSettings? newTextSettings,
            DiaryCellSettings? newSettings)?
        updateDiaryCellSettingsInFirebase,
    TResult? Function(DiaryColumnSettings newSettings)?
        updateCapitalCellSettingsInFirebase,
    TResult? Function(PointerMoveEvent details)? updateCapitalCellWidth,
    TResult? Function(PointerUpEvent details)? updateCapitalCellWidthInFirebase,
    TResult? Function(bool isTextEditing)? startEditingCells,
    TResult? Function(DiaryList diaryList, String name, int columnsCount,
            List<DiaryColumn> diaryColumns)?
        createDiaryColumn,
    TResult? Function(DiaryList diaryList, String columnId)? deleteDiaryColumn,
    TResult? Function(DiaryList diaryList, String? themeColor,
            String? themeBorderColor, String? themePanelBackgroundColor)?
        updateDiaryListSettings,
    TResult? Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<DiaryCell> diaryCells,
            List<CapitalCell> capitalCells,
            String themeName,
            String description)?
        shareTheme,
    TResult? Function()? startEditingColor,
    TResult? Function()? startEditingBorders,
    TResult? Function()? startEditingBorderStyle,
    TResult? Function()? turnBackEditing,
    TResult? Function()? startColumnDeleting,
    TResult? Function()? startColorThemeEditing,
    TResult? Function()? deleteColumns,
    TResult? Function()? loadThemes,
    TResult? Function(ListTheme listTheme)? loadFromTheme,
    TResult? Function(ListTheme listTheme)? takeTheme,
  }) {
    return getDiaryList?.call(date, delay);
  }

  @override
  @optionalTypeArgs
  TResult maybeWhen<TResult extends Object?>({
    TResult Function()? createSample,
    TResult Function()? initialLoad,
    TResult Function(DateTime date, int delay)? getDiaryList,
    TResult Function(DiaryList diaryList, List<DiaryList> lists)?
        getDiaryColumns,
    TResult Function(DiaryList diaryList, List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells, List<DiaryList> lists)?
        getDiaryCells,
    TResult Function(DiaryCell diaryCell)? selectDiaryCell,
    TResult Function(List<DiaryCell> diaryCells)? selectDiaryCells,
    TResult Function(CapitalCell capitalCell)? selectCapitalCell,
    TResult Function(
            DiaryCell diaryCell,
            GlobalObjectKey<State<StatefulWidget>> cellKey,
            DragUpdateDetails details,
            double scaleFactor)?
        onPanUpdate,
    TResult Function(DiaryList? selectedList)? startEditingList,
    TResult Function(
            String? newName, String? addedColumnName, int? addedColumnCount)?
        returnToLoaded,
    TResult Function()? returnToCellsSelected,
    TResult Function(DiaryList diaryList, String newName)? updateDiaryListName,
    TResult Function(DiaryCell diaryCell, String? textFieldText)?
        changeDiaryCell,
    TResult Function(CapitalCell capitalCell, String? textFieldText)?
        changeCapitalCell,
    TResult Function(DiaryCell diaryCell, String? textFieldText)?
        updateDiaryCellInFirebase,
    TResult Function(
            FontWeightEnum? fontWeight,
            TextDecorationEnum? textDecoration,
            FontStyleEnum? fontStyle,
            double? fontSize,
            String? color,
            HorizontalAlignmentsEnum? horizontalAlignment,
            VerticalAlignmentsEnum? verticalAlignment,
            String? backgroundColor)?
        changeDiaryCellsSettings,
    TResult Function(BordersEditingEnum bordersEditingEnum,
            BordersStyleEnum bordersStyleEnum, Color bordersColor)?
        changeDiaryCellsBordersSettings,
    TResult Function(
            FontWeightEnum? fontWeight,
            TextDecorationEnum? textDecoration,
            FontStyleEnum? fontStyle,
            double? fontSize,
            String? color,
            HorizontalAlignmentsEnum? horizontalAlignment,
            VerticalAlignmentsEnum? verticalAlignment,
            String? backgroundColor,
            BordersStyleEnum? bordersStyleEnum,
            Color? bordersColor)?
        changeCapitalCellSettings,
    TResult Function(
            DiaryCell diaryCell,
            int index,
            DiaryCellTextSettings? newTextSettings,
            DiaryCellSettings? newSettings)?
        updateDiaryCellSettingsInFirebase,
    TResult Function(DiaryColumnSettings newSettings)?
        updateCapitalCellSettingsInFirebase,
    TResult Function(PointerMoveEvent details)? updateCapitalCellWidth,
    TResult Function(PointerUpEvent details)? updateCapitalCellWidthInFirebase,
    TResult Function(bool isTextEditing)? startEditingCells,
    TResult Function(DiaryList diaryList, String name, int columnsCount,
            List<DiaryColumn> diaryColumns)?
        createDiaryColumn,
    TResult Function(DiaryList diaryList, String columnId)? deleteDiaryColumn,
    TResult Function(DiaryList diaryList, String? themeColor,
            String? themeBorderColor, String? themePanelBackgroundColor)?
        updateDiaryListSettings,
    TResult Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<DiaryCell> diaryCells,
            List<CapitalCell> capitalCells,
            String themeName,
            String description)?
        shareTheme,
    TResult Function()? startEditingColor,
    TResult Function()? startEditingBorders,
    TResult Function()? startEditingBorderStyle,
    TResult Function()? turnBackEditing,
    TResult Function()? startColumnDeleting,
    TResult Function()? startColorThemeEditing,
    TResult Function()? deleteColumns,
    TResult Function()? loadThemes,
    TResult Function(ListTheme listTheme)? loadFromTheme,
    TResult Function(ListTheme listTheme)? takeTheme,
    required TResult orElse(),
  }) {
    if (getDiaryList != null) {
      return getDiaryList(date, delay);
    }
    return orElse();
  }

  @override
  @optionalTypeArgs
  TResult map<TResult extends Object?>({
    required TResult Function(CreateSampleEvent value) createSample,
    required TResult Function(InitialLoadEvent value) initialLoad,
    required TResult Function(GetDiaryListEvent value) getDiaryList,
    required TResult Function(GetDiaryColumnsEvent value) getDiaryColumns,
    required TResult Function(GetDiaryCellsEvent value) getDiaryCells,
    required TResult Function(SelectDiaryCellEvent value) selectDiaryCell,
    required TResult Function(SelectDiaryCellsEvent value) selectDiaryCells,
    required TResult Function(SelectCapitalCellEvent value) selectCapitalCell,
    required TResult Function(OnPanUpdateEvent value) onPanUpdate,
    required TResult Function(StartEditingListEvent value) startEditingList,
    required TResult Function(ReturnToLoadedEvent value) returnToLoaded,
    required TResult Function(ReturnToCellsSelectedEvent value)
        returnToCellsSelected,
    required TResult Function(UpdateDiaryListNameEvent value)
        updateDiaryListName,
    required TResult Function(ChangeDiaryCellEvent value) changeDiaryCell,
    required TResult Function(ChangeCapitalCellEvent value) changeCapitalCell,
    required TResult Function(UpdateDiaryCellInFirebaseEvent value)
        updateDiaryCellInFirebase,
    required TResult Function(ChangeDiaryCellsSettingsEvent value)
        changeDiaryCellsSettings,
    required TResult Function(ChangeDiaryCellsBordersSettingsEvent value)
        changeDiaryCellsBordersSettings,
    required TResult Function(ChangeCapitalCellSettingsEvent value)
        changeCapitalCellSettings,
    required TResult Function(UpdateDiaryCellSettingsInFirebaseEvent value)
        updateDiaryCellSettingsInFirebase,
    required TResult Function(UpdateCapitalCellSettingsInFirebaseEvent value)
        updateCapitalCellSettingsInFirebase,
    required TResult Function(UpdateCapitalCellWidthEvent value)
        updateCapitalCellWidth,
    required TResult Function(UpdateCapitalCellWidthInFirebaseEvent value)
        updateCapitalCellWidthInFirebase,
    required TResult Function(StartEditingCellsEvent value) startEditingCells,
    required TResult Function(CreateDiaryColumnEvent value) createDiaryColumn,
    required TResult Function(DeleteDiaryColumnEvent value) deleteDiaryColumn,
    required TResult Function(UpdateDiaryListSettingsEvent value)
        updateDiaryListSettings,
    required TResult Function(ShareThemeEvent value) shareTheme,
    required TResult Function(StartEditingColorEvent value) startEditingColor,
    required TResult Function(StartEditingBordersEvent value)
        startEditingBorders,
    required TResult Function(StartEditingBordersStyleEvent value)
        startEditingBorderStyle,
    required TResult Function(TurnBackEditingEvent value) turnBackEditing,
    required TResult Function(StartColumnDeletingEvent value)
        startColumnDeleting,
    required TResult Function(StartColorThemeEditingEvent value)
        startColorThemeEditing,
    required TResult Function(DeleteColumnsEvent value) deleteColumns,
    required TResult Function(LoadThemesEvent value) loadThemes,
    required TResult Function(LoadFromThemeEvent value) loadFromTheme,
    required TResult Function(TakeThemeEvent value) takeTheme,
  }) {
    return getDiaryList(this);
  }

  @override
  @optionalTypeArgs
  TResult? mapOrNull<TResult extends Object?>({
    TResult? Function(CreateSampleEvent value)? createSample,
    TResult? Function(InitialLoadEvent value)? initialLoad,
    TResult? Function(GetDiaryListEvent value)? getDiaryList,
    TResult? Function(GetDiaryColumnsEvent value)? getDiaryColumns,
    TResult? Function(GetDiaryCellsEvent value)? getDiaryCells,
    TResult? Function(SelectDiaryCellEvent value)? selectDiaryCell,
    TResult? Function(SelectDiaryCellsEvent value)? selectDiaryCells,
    TResult? Function(SelectCapitalCellEvent value)? selectCapitalCell,
    TResult? Function(OnPanUpdateEvent value)? onPanUpdate,
    TResult? Function(StartEditingListEvent value)? startEditingList,
    TResult? Function(ReturnToLoadedEvent value)? returnToLoaded,
    TResult? Function(ReturnToCellsSelectedEvent value)? returnToCellsSelected,
    TResult? Function(UpdateDiaryListNameEvent value)? updateDiaryListName,
    TResult? Function(ChangeDiaryCellEvent value)? changeDiaryCell,
    TResult? Function(ChangeCapitalCellEvent value)? changeCapitalCell,
    TResult? Function(UpdateDiaryCellInFirebaseEvent value)?
        updateDiaryCellInFirebase,
    TResult? Function(ChangeDiaryCellsSettingsEvent value)?
        changeDiaryCellsSettings,
    TResult? Function(ChangeDiaryCellsBordersSettingsEvent value)?
        changeDiaryCellsBordersSettings,
    TResult? Function(ChangeCapitalCellSettingsEvent value)?
        changeCapitalCellSettings,
    TResult? Function(UpdateDiaryCellSettingsInFirebaseEvent value)?
        updateDiaryCellSettingsInFirebase,
    TResult? Function(UpdateCapitalCellSettingsInFirebaseEvent value)?
        updateCapitalCellSettingsInFirebase,
    TResult? Function(UpdateCapitalCellWidthEvent value)?
        updateCapitalCellWidth,
    TResult? Function(UpdateCapitalCellWidthInFirebaseEvent value)?
        updateCapitalCellWidthInFirebase,
    TResult? Function(StartEditingCellsEvent value)? startEditingCells,
    TResult? Function(CreateDiaryColumnEvent value)? createDiaryColumn,
    TResult? Function(DeleteDiaryColumnEvent value)? deleteDiaryColumn,
    TResult? Function(UpdateDiaryListSettingsEvent value)?
        updateDiaryListSettings,
    TResult? Function(ShareThemeEvent value)? shareTheme,
    TResult? Function(StartEditingColorEvent value)? startEditingColor,
    TResult? Function(StartEditingBordersEvent value)? startEditingBorders,
    TResult? Function(StartEditingBordersStyleEvent value)?
        startEditingBorderStyle,
    TResult? Function(TurnBackEditingEvent value)? turnBackEditing,
    TResult? Function(StartColumnDeletingEvent value)? startColumnDeleting,
    TResult? Function(StartColorThemeEditingEvent value)?
        startColorThemeEditing,
    TResult? Function(DeleteColumnsEvent value)? deleteColumns,
    TResult? Function(LoadThemesEvent value)? loadThemes,
    TResult? Function(LoadFromThemeEvent value)? loadFromTheme,
    TResult? Function(TakeThemeEvent value)? takeTheme,
  }) {
    return getDiaryList?.call(this);
  }

  @override
  @optionalTypeArgs
  TResult maybeMap<TResult extends Object?>({
    TResult Function(CreateSampleEvent value)? createSample,
    TResult Function(InitialLoadEvent value)? initialLoad,
    TResult Function(GetDiaryListEvent value)? getDiaryList,
    TResult Function(GetDiaryColumnsEvent value)? getDiaryColumns,
    TResult Function(GetDiaryCellsEvent value)? getDiaryCells,
    TResult Function(SelectDiaryCellEvent value)? selectDiaryCell,
    TResult Function(SelectDiaryCellsEvent value)? selectDiaryCells,
    TResult Function(SelectCapitalCellEvent value)? selectCapitalCell,
    TResult Function(OnPanUpdateEvent value)? onPanUpdate,
    TResult Function(StartEditingListEvent value)? startEditingList,
    TResult Function(ReturnToLoadedEvent value)? returnToLoaded,
    TResult Function(ReturnToCellsSelectedEvent value)? returnToCellsSelected,
    TResult Function(UpdateDiaryListNameEvent value)? updateDiaryListName,
    TResult Function(ChangeDiaryCellEvent value)? changeDiaryCell,
    TResult Function(ChangeCapitalCellEvent value)? changeCapitalCell,
    TResult Function(UpdateDiaryCellInFirebaseEvent value)?
        updateDiaryCellInFirebase,
    TResult Function(ChangeDiaryCellsSettingsEvent value)?
        changeDiaryCellsSettings,
    TResult Function(ChangeDiaryCellsBordersSettingsEvent value)?
        changeDiaryCellsBordersSettings,
    TResult Function(ChangeCapitalCellSettingsEvent value)?
        changeCapitalCellSettings,
    TResult Function(UpdateDiaryCellSettingsInFirebaseEvent value)?
        updateDiaryCellSettingsInFirebase,
    TResult Function(UpdateCapitalCellSettingsInFirebaseEvent value)?
        updateCapitalCellSettingsInFirebase,
    TResult Function(UpdateCapitalCellWidthEvent value)? updateCapitalCellWidth,
    TResult Function(UpdateCapitalCellWidthInFirebaseEvent value)?
        updateCapitalCellWidthInFirebase,
    TResult Function(StartEditingCellsEvent value)? startEditingCells,
    TResult Function(CreateDiaryColumnEvent value)? createDiaryColumn,
    TResult Function(DeleteDiaryColumnEvent value)? deleteDiaryColumn,
    TResult Function(UpdateDiaryListSettingsEvent value)?
        updateDiaryListSettings,
    TResult Function(ShareThemeEvent value)? shareTheme,
    TResult Function(StartEditingColorEvent value)? startEditingColor,
    TResult Function(StartEditingBordersEvent value)? startEditingBorders,
    TResult Function(StartEditingBordersStyleEvent value)?
        startEditingBorderStyle,
    TResult Function(TurnBackEditingEvent value)? turnBackEditing,
    TResult Function(StartColumnDeletingEvent value)? startColumnDeleting,
    TResult Function(StartColorThemeEditingEvent value)? startColorThemeEditing,
    TResult Function(DeleteColumnsEvent value)? deleteColumns,
    TResult Function(LoadThemesEvent value)? loadThemes,
    TResult Function(LoadFromThemeEvent value)? loadFromTheme,
    TResult Function(TakeThemeEvent value)? takeTheme,
    required TResult orElse(),
  }) {
    if (getDiaryList != null) {
      return getDiaryList(this);
    }
    return orElse();
  }
}

abstract class GetDiaryListEvent implements DiaryListEvent {
  const factory GetDiaryListEvent(
      {required final DateTime date,
      required final int delay}) = _$GetDiaryListEvent;

  DateTime get date;
  int get delay;
  @JsonKey(ignore: true)
  _$$GetDiaryListEventCopyWith<_$GetDiaryListEvent> get copyWith =>
      throw _privateConstructorUsedError;
}

/// @nodoc
abstract class _$$GetDiaryColumnsEventCopyWith<$Res> {
  factory _$$GetDiaryColumnsEventCopyWith(_$GetDiaryColumnsEvent value,
          $Res Function(_$GetDiaryColumnsEvent) then) =
      __$$GetDiaryColumnsEventCopyWithImpl<$Res>;
  @useResult
  $Res call({DiaryList diaryList, List<DiaryList> lists});
}

/// @nodoc
class __$$GetDiaryColumnsEventCopyWithImpl<$Res>
    extends _$DiaryListEventCopyWithImpl<$Res, _$GetDiaryColumnsEvent>
    implements _$$GetDiaryColumnsEventCopyWith<$Res> {
  __$$GetDiaryColumnsEventCopyWithImpl(_$GetDiaryColumnsEvent _value,
      $Res Function(_$GetDiaryColumnsEvent) _then)
      : super(_value, _then);

  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? diaryList = null,
    Object? lists = null,
  }) {
    return _then(_$GetDiaryColumnsEvent(
      diaryList: null == diaryList
          ? _value.diaryList
          : diaryList // ignore: cast_nullable_to_non_nullable
              as DiaryList,
      lists: null == lists
          ? _value._lists
          : lists // ignore: cast_nullable_to_non_nullable
              as List<DiaryList>,
    ));
  }
}

/// @nodoc

class _$GetDiaryColumnsEvent implements GetDiaryColumnsEvent {
  const _$GetDiaryColumnsEvent(
      {required this.diaryList, required final List<DiaryList> lists})
      : _lists = lists;

  @override
  final DiaryList diaryList;
  final List<DiaryList> _lists;
  @override
  List<DiaryList> get lists {
    if (_lists is EqualUnmodifiableListView) return _lists;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_lists);
  }

  @override
  String toString() {
    return 'DiaryListEvent.getDiaryColumns(diaryList: $diaryList, lists: $lists)';
  }

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$GetDiaryColumnsEvent &&
            (identical(other.diaryList, diaryList) ||
                other.diaryList == diaryList) &&
            const DeepCollectionEquality().equals(other._lists, _lists));
  }

  @override
  int get hashCode => Object.hash(
      runtimeType, diaryList, const DeepCollectionEquality().hash(_lists));

  @JsonKey(ignore: true)
  @override
  @pragma('vm:prefer-inline')
  _$$GetDiaryColumnsEventCopyWith<_$GetDiaryColumnsEvent> get copyWith =>
      __$$GetDiaryColumnsEventCopyWithImpl<_$GetDiaryColumnsEvent>(
          this, _$identity);

  @override
  @optionalTypeArgs
  TResult when<TResult extends Object?>({
    required TResult Function() createSample,
    required TResult Function() initialLoad,
    required TResult Function(DateTime date, int delay) getDiaryList,
    required TResult Function(DiaryList diaryList, List<DiaryList> lists)
        getDiaryColumns,
    required TResult Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells,
            List<DiaryList> lists)
        getDiaryCells,
    required TResult Function(DiaryCell diaryCell) selectDiaryCell,
    required TResult Function(List<DiaryCell> diaryCells) selectDiaryCells,
    required TResult Function(CapitalCell capitalCell) selectCapitalCell,
    required TResult Function(
            DiaryCell diaryCell,
            GlobalObjectKey<State<StatefulWidget>> cellKey,
            DragUpdateDetails details,
            double scaleFactor)
        onPanUpdate,
    required TResult Function(DiaryList? selectedList) startEditingList,
    required TResult Function(
            String? newName, String? addedColumnName, int? addedColumnCount)
        returnToLoaded,
    required TResult Function() returnToCellsSelected,
    required TResult Function(DiaryList diaryList, String newName)
        updateDiaryListName,
    required TResult Function(DiaryCell diaryCell, String? textFieldText)
        changeDiaryCell,
    required TResult Function(CapitalCell capitalCell, String? textFieldText)
        changeCapitalCell,
    required TResult Function(DiaryCell diaryCell, String? textFieldText)
        updateDiaryCellInFirebase,
    required TResult Function(
            FontWeightEnum? fontWeight,
            TextDecorationEnum? textDecoration,
            FontStyleEnum? fontStyle,
            double? fontSize,
            String? color,
            HorizontalAlignmentsEnum? horizontalAlignment,
            VerticalAlignmentsEnum? verticalAlignment,
            String? backgroundColor)
        changeDiaryCellsSettings,
    required TResult Function(BordersEditingEnum bordersEditingEnum,
            BordersStyleEnum bordersStyleEnum, Color bordersColor)
        changeDiaryCellsBordersSettings,
    required TResult Function(
            FontWeightEnum? fontWeight,
            TextDecorationEnum? textDecoration,
            FontStyleEnum? fontStyle,
            double? fontSize,
            String? color,
            HorizontalAlignmentsEnum? horizontalAlignment,
            VerticalAlignmentsEnum? verticalAlignment,
            String? backgroundColor,
            BordersStyleEnum? bordersStyleEnum,
            Color? bordersColor)
        changeCapitalCellSettings,
    required TResult Function(
            DiaryCell diaryCell,
            int index,
            DiaryCellTextSettings? newTextSettings,
            DiaryCellSettings? newSettings)
        updateDiaryCellSettingsInFirebase,
    required TResult Function(DiaryColumnSettings newSettings)
        updateCapitalCellSettingsInFirebase,
    required TResult Function(PointerMoveEvent details) updateCapitalCellWidth,
    required TResult Function(PointerUpEvent details)
        updateCapitalCellWidthInFirebase,
    required TResult Function(bool isTextEditing) startEditingCells,
    required TResult Function(DiaryList diaryList, String name,
            int columnsCount, List<DiaryColumn> diaryColumns)
        createDiaryColumn,
    required TResult Function(DiaryList diaryList, String columnId)
        deleteDiaryColumn,
    required TResult Function(DiaryList diaryList, String? themeColor,
            String? themeBorderColor, String? themePanelBackgroundColor)
        updateDiaryListSettings,
    required TResult Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<DiaryCell> diaryCells,
            List<CapitalCell> capitalCells,
            String themeName,
            String description)
        shareTheme,
    required TResult Function() startEditingColor,
    required TResult Function() startEditingBorders,
    required TResult Function() startEditingBorderStyle,
    required TResult Function() turnBackEditing,
    required TResult Function() startColumnDeleting,
    required TResult Function() startColorThemeEditing,
    required TResult Function() deleteColumns,
    required TResult Function() loadThemes,
    required TResult Function(ListTheme listTheme) loadFromTheme,
    required TResult Function(ListTheme listTheme) takeTheme,
  }) {
    return getDiaryColumns(diaryList, lists);
  }

  @override
  @optionalTypeArgs
  TResult? whenOrNull<TResult extends Object?>({
    TResult? Function()? createSample,
    TResult? Function()? initialLoad,
    TResult? Function(DateTime date, int delay)? getDiaryList,
    TResult? Function(DiaryList diaryList, List<DiaryList> lists)?
        getDiaryColumns,
    TResult? Function(DiaryList diaryList, List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells, List<DiaryList> lists)?
        getDiaryCells,
    TResult? Function(DiaryCell diaryCell)? selectDiaryCell,
    TResult? Function(List<DiaryCell> diaryCells)? selectDiaryCells,
    TResult? Function(CapitalCell capitalCell)? selectCapitalCell,
    TResult? Function(
            DiaryCell diaryCell,
            GlobalObjectKey<State<StatefulWidget>> cellKey,
            DragUpdateDetails details,
            double scaleFactor)?
        onPanUpdate,
    TResult? Function(DiaryList? selectedList)? startEditingList,
    TResult? Function(
            String? newName, String? addedColumnName, int? addedColumnCount)?
        returnToLoaded,
    TResult? Function()? returnToCellsSelected,
    TResult? Function(DiaryList diaryList, String newName)? updateDiaryListName,
    TResult? Function(DiaryCell diaryCell, String? textFieldText)?
        changeDiaryCell,
    TResult? Function(CapitalCell capitalCell, String? textFieldText)?
        changeCapitalCell,
    TResult? Function(DiaryCell diaryCell, String? textFieldText)?
        updateDiaryCellInFirebase,
    TResult? Function(
            FontWeightEnum? fontWeight,
            TextDecorationEnum? textDecoration,
            FontStyleEnum? fontStyle,
            double? fontSize,
            String? color,
            HorizontalAlignmentsEnum? horizontalAlignment,
            VerticalAlignmentsEnum? verticalAlignment,
            String? backgroundColor)?
        changeDiaryCellsSettings,
    TResult? Function(BordersEditingEnum bordersEditingEnum,
            BordersStyleEnum bordersStyleEnum, Color bordersColor)?
        changeDiaryCellsBordersSettings,
    TResult? Function(
            FontWeightEnum? fontWeight,
            TextDecorationEnum? textDecoration,
            FontStyleEnum? fontStyle,
            double? fontSize,
            String? color,
            HorizontalAlignmentsEnum? horizontalAlignment,
            VerticalAlignmentsEnum? verticalAlignment,
            String? backgroundColor,
            BordersStyleEnum? bordersStyleEnum,
            Color? bordersColor)?
        changeCapitalCellSettings,
    TResult? Function(
            DiaryCell diaryCell,
            int index,
            DiaryCellTextSettings? newTextSettings,
            DiaryCellSettings? newSettings)?
        updateDiaryCellSettingsInFirebase,
    TResult? Function(DiaryColumnSettings newSettings)?
        updateCapitalCellSettingsInFirebase,
    TResult? Function(PointerMoveEvent details)? updateCapitalCellWidth,
    TResult? Function(PointerUpEvent details)? updateCapitalCellWidthInFirebase,
    TResult? Function(bool isTextEditing)? startEditingCells,
    TResult? Function(DiaryList diaryList, String name, int columnsCount,
            List<DiaryColumn> diaryColumns)?
        createDiaryColumn,
    TResult? Function(DiaryList diaryList, String columnId)? deleteDiaryColumn,
    TResult? Function(DiaryList diaryList, String? themeColor,
            String? themeBorderColor, String? themePanelBackgroundColor)?
        updateDiaryListSettings,
    TResult? Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<DiaryCell> diaryCells,
            List<CapitalCell> capitalCells,
            String themeName,
            String description)?
        shareTheme,
    TResult? Function()? startEditingColor,
    TResult? Function()? startEditingBorders,
    TResult? Function()? startEditingBorderStyle,
    TResult? Function()? turnBackEditing,
    TResult? Function()? startColumnDeleting,
    TResult? Function()? startColorThemeEditing,
    TResult? Function()? deleteColumns,
    TResult? Function()? loadThemes,
    TResult? Function(ListTheme listTheme)? loadFromTheme,
    TResult? Function(ListTheme listTheme)? takeTheme,
  }) {
    return getDiaryColumns?.call(diaryList, lists);
  }

  @override
  @optionalTypeArgs
  TResult maybeWhen<TResult extends Object?>({
    TResult Function()? createSample,
    TResult Function()? initialLoad,
    TResult Function(DateTime date, int delay)? getDiaryList,
    TResult Function(DiaryList diaryList, List<DiaryList> lists)?
        getDiaryColumns,
    TResult Function(DiaryList diaryList, List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells, List<DiaryList> lists)?
        getDiaryCells,
    TResult Function(DiaryCell diaryCell)? selectDiaryCell,
    TResult Function(List<DiaryCell> diaryCells)? selectDiaryCells,
    TResult Function(CapitalCell capitalCell)? selectCapitalCell,
    TResult Function(
            DiaryCell diaryCell,
            GlobalObjectKey<State<StatefulWidget>> cellKey,
            DragUpdateDetails details,
            double scaleFactor)?
        onPanUpdate,
    TResult Function(DiaryList? selectedList)? startEditingList,
    TResult Function(
            String? newName, String? addedColumnName, int? addedColumnCount)?
        returnToLoaded,
    TResult Function()? returnToCellsSelected,
    TResult Function(DiaryList diaryList, String newName)? updateDiaryListName,
    TResult Function(DiaryCell diaryCell, String? textFieldText)?
        changeDiaryCell,
    TResult Function(CapitalCell capitalCell, String? textFieldText)?
        changeCapitalCell,
    TResult Function(DiaryCell diaryCell, String? textFieldText)?
        updateDiaryCellInFirebase,
    TResult Function(
            FontWeightEnum? fontWeight,
            TextDecorationEnum? textDecoration,
            FontStyleEnum? fontStyle,
            double? fontSize,
            String? color,
            HorizontalAlignmentsEnum? horizontalAlignment,
            VerticalAlignmentsEnum? verticalAlignment,
            String? backgroundColor)?
        changeDiaryCellsSettings,
    TResult Function(BordersEditingEnum bordersEditingEnum,
            BordersStyleEnum bordersStyleEnum, Color bordersColor)?
        changeDiaryCellsBordersSettings,
    TResult Function(
            FontWeightEnum? fontWeight,
            TextDecorationEnum? textDecoration,
            FontStyleEnum? fontStyle,
            double? fontSize,
            String? color,
            HorizontalAlignmentsEnum? horizontalAlignment,
            VerticalAlignmentsEnum? verticalAlignment,
            String? backgroundColor,
            BordersStyleEnum? bordersStyleEnum,
            Color? bordersColor)?
        changeCapitalCellSettings,
    TResult Function(
            DiaryCell diaryCell,
            int index,
            DiaryCellTextSettings? newTextSettings,
            DiaryCellSettings? newSettings)?
        updateDiaryCellSettingsInFirebase,
    TResult Function(DiaryColumnSettings newSettings)?
        updateCapitalCellSettingsInFirebase,
    TResult Function(PointerMoveEvent details)? updateCapitalCellWidth,
    TResult Function(PointerUpEvent details)? updateCapitalCellWidthInFirebase,
    TResult Function(bool isTextEditing)? startEditingCells,
    TResult Function(DiaryList diaryList, String name, int columnsCount,
            List<DiaryColumn> diaryColumns)?
        createDiaryColumn,
    TResult Function(DiaryList diaryList, String columnId)? deleteDiaryColumn,
    TResult Function(DiaryList diaryList, String? themeColor,
            String? themeBorderColor, String? themePanelBackgroundColor)?
        updateDiaryListSettings,
    TResult Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<DiaryCell> diaryCells,
            List<CapitalCell> capitalCells,
            String themeName,
            String description)?
        shareTheme,
    TResult Function()? startEditingColor,
    TResult Function()? startEditingBorders,
    TResult Function()? startEditingBorderStyle,
    TResult Function()? turnBackEditing,
    TResult Function()? startColumnDeleting,
    TResult Function()? startColorThemeEditing,
    TResult Function()? deleteColumns,
    TResult Function()? loadThemes,
    TResult Function(ListTheme listTheme)? loadFromTheme,
    TResult Function(ListTheme listTheme)? takeTheme,
    required TResult orElse(),
  }) {
    if (getDiaryColumns != null) {
      return getDiaryColumns(diaryList, lists);
    }
    return orElse();
  }

  @override
  @optionalTypeArgs
  TResult map<TResult extends Object?>({
    required TResult Function(CreateSampleEvent value) createSample,
    required TResult Function(InitialLoadEvent value) initialLoad,
    required TResult Function(GetDiaryListEvent value) getDiaryList,
    required TResult Function(GetDiaryColumnsEvent value) getDiaryColumns,
    required TResult Function(GetDiaryCellsEvent value) getDiaryCells,
    required TResult Function(SelectDiaryCellEvent value) selectDiaryCell,
    required TResult Function(SelectDiaryCellsEvent value) selectDiaryCells,
    required TResult Function(SelectCapitalCellEvent value) selectCapitalCell,
    required TResult Function(OnPanUpdateEvent value) onPanUpdate,
    required TResult Function(StartEditingListEvent value) startEditingList,
    required TResult Function(ReturnToLoadedEvent value) returnToLoaded,
    required TResult Function(ReturnToCellsSelectedEvent value)
        returnToCellsSelected,
    required TResult Function(UpdateDiaryListNameEvent value)
        updateDiaryListName,
    required TResult Function(ChangeDiaryCellEvent value) changeDiaryCell,
    required TResult Function(ChangeCapitalCellEvent value) changeCapitalCell,
    required TResult Function(UpdateDiaryCellInFirebaseEvent value)
        updateDiaryCellInFirebase,
    required TResult Function(ChangeDiaryCellsSettingsEvent value)
        changeDiaryCellsSettings,
    required TResult Function(ChangeDiaryCellsBordersSettingsEvent value)
        changeDiaryCellsBordersSettings,
    required TResult Function(ChangeCapitalCellSettingsEvent value)
        changeCapitalCellSettings,
    required TResult Function(UpdateDiaryCellSettingsInFirebaseEvent value)
        updateDiaryCellSettingsInFirebase,
    required TResult Function(UpdateCapitalCellSettingsInFirebaseEvent value)
        updateCapitalCellSettingsInFirebase,
    required TResult Function(UpdateCapitalCellWidthEvent value)
        updateCapitalCellWidth,
    required TResult Function(UpdateCapitalCellWidthInFirebaseEvent value)
        updateCapitalCellWidthInFirebase,
    required TResult Function(StartEditingCellsEvent value) startEditingCells,
    required TResult Function(CreateDiaryColumnEvent value) createDiaryColumn,
    required TResult Function(DeleteDiaryColumnEvent value) deleteDiaryColumn,
    required TResult Function(UpdateDiaryListSettingsEvent value)
        updateDiaryListSettings,
    required TResult Function(ShareThemeEvent value) shareTheme,
    required TResult Function(StartEditingColorEvent value) startEditingColor,
    required TResult Function(StartEditingBordersEvent value)
        startEditingBorders,
    required TResult Function(StartEditingBordersStyleEvent value)
        startEditingBorderStyle,
    required TResult Function(TurnBackEditingEvent value) turnBackEditing,
    required TResult Function(StartColumnDeletingEvent value)
        startColumnDeleting,
    required TResult Function(StartColorThemeEditingEvent value)
        startColorThemeEditing,
    required TResult Function(DeleteColumnsEvent value) deleteColumns,
    required TResult Function(LoadThemesEvent value) loadThemes,
    required TResult Function(LoadFromThemeEvent value) loadFromTheme,
    required TResult Function(TakeThemeEvent value) takeTheme,
  }) {
    return getDiaryColumns(this);
  }

  @override
  @optionalTypeArgs
  TResult? mapOrNull<TResult extends Object?>({
    TResult? Function(CreateSampleEvent value)? createSample,
    TResult? Function(InitialLoadEvent value)? initialLoad,
    TResult? Function(GetDiaryListEvent value)? getDiaryList,
    TResult? Function(GetDiaryColumnsEvent value)? getDiaryColumns,
    TResult? Function(GetDiaryCellsEvent value)? getDiaryCells,
    TResult? Function(SelectDiaryCellEvent value)? selectDiaryCell,
    TResult? Function(SelectDiaryCellsEvent value)? selectDiaryCells,
    TResult? Function(SelectCapitalCellEvent value)? selectCapitalCell,
    TResult? Function(OnPanUpdateEvent value)? onPanUpdate,
    TResult? Function(StartEditingListEvent value)? startEditingList,
    TResult? Function(ReturnToLoadedEvent value)? returnToLoaded,
    TResult? Function(ReturnToCellsSelectedEvent value)? returnToCellsSelected,
    TResult? Function(UpdateDiaryListNameEvent value)? updateDiaryListName,
    TResult? Function(ChangeDiaryCellEvent value)? changeDiaryCell,
    TResult? Function(ChangeCapitalCellEvent value)? changeCapitalCell,
    TResult? Function(UpdateDiaryCellInFirebaseEvent value)?
        updateDiaryCellInFirebase,
    TResult? Function(ChangeDiaryCellsSettingsEvent value)?
        changeDiaryCellsSettings,
    TResult? Function(ChangeDiaryCellsBordersSettingsEvent value)?
        changeDiaryCellsBordersSettings,
    TResult? Function(ChangeCapitalCellSettingsEvent value)?
        changeCapitalCellSettings,
    TResult? Function(UpdateDiaryCellSettingsInFirebaseEvent value)?
        updateDiaryCellSettingsInFirebase,
    TResult? Function(UpdateCapitalCellSettingsInFirebaseEvent value)?
        updateCapitalCellSettingsInFirebase,
    TResult? Function(UpdateCapitalCellWidthEvent value)?
        updateCapitalCellWidth,
    TResult? Function(UpdateCapitalCellWidthInFirebaseEvent value)?
        updateCapitalCellWidthInFirebase,
    TResult? Function(StartEditingCellsEvent value)? startEditingCells,
    TResult? Function(CreateDiaryColumnEvent value)? createDiaryColumn,
    TResult? Function(DeleteDiaryColumnEvent value)? deleteDiaryColumn,
    TResult? Function(UpdateDiaryListSettingsEvent value)?
        updateDiaryListSettings,
    TResult? Function(ShareThemeEvent value)? shareTheme,
    TResult? Function(StartEditingColorEvent value)? startEditingColor,
    TResult? Function(StartEditingBordersEvent value)? startEditingBorders,
    TResult? Function(StartEditingBordersStyleEvent value)?
        startEditingBorderStyle,
    TResult? Function(TurnBackEditingEvent value)? turnBackEditing,
    TResult? Function(StartColumnDeletingEvent value)? startColumnDeleting,
    TResult? Function(StartColorThemeEditingEvent value)?
        startColorThemeEditing,
    TResult? Function(DeleteColumnsEvent value)? deleteColumns,
    TResult? Function(LoadThemesEvent value)? loadThemes,
    TResult? Function(LoadFromThemeEvent value)? loadFromTheme,
    TResult? Function(TakeThemeEvent value)? takeTheme,
  }) {
    return getDiaryColumns?.call(this);
  }

  @override
  @optionalTypeArgs
  TResult maybeMap<TResult extends Object?>({
    TResult Function(CreateSampleEvent value)? createSample,
    TResult Function(InitialLoadEvent value)? initialLoad,
    TResult Function(GetDiaryListEvent value)? getDiaryList,
    TResult Function(GetDiaryColumnsEvent value)? getDiaryColumns,
    TResult Function(GetDiaryCellsEvent value)? getDiaryCells,
    TResult Function(SelectDiaryCellEvent value)? selectDiaryCell,
    TResult Function(SelectDiaryCellsEvent value)? selectDiaryCells,
    TResult Function(SelectCapitalCellEvent value)? selectCapitalCell,
    TResult Function(OnPanUpdateEvent value)? onPanUpdate,
    TResult Function(StartEditingListEvent value)? startEditingList,
    TResult Function(ReturnToLoadedEvent value)? returnToLoaded,
    TResult Function(ReturnToCellsSelectedEvent value)? returnToCellsSelected,
    TResult Function(UpdateDiaryListNameEvent value)? updateDiaryListName,
    TResult Function(ChangeDiaryCellEvent value)? changeDiaryCell,
    TResult Function(ChangeCapitalCellEvent value)? changeCapitalCell,
    TResult Function(UpdateDiaryCellInFirebaseEvent value)?
        updateDiaryCellInFirebase,
    TResult Function(ChangeDiaryCellsSettingsEvent value)?
        changeDiaryCellsSettings,
    TResult Function(ChangeDiaryCellsBordersSettingsEvent value)?
        changeDiaryCellsBordersSettings,
    TResult Function(ChangeCapitalCellSettingsEvent value)?
        changeCapitalCellSettings,
    TResult Function(UpdateDiaryCellSettingsInFirebaseEvent value)?
        updateDiaryCellSettingsInFirebase,
    TResult Function(UpdateCapitalCellSettingsInFirebaseEvent value)?
        updateCapitalCellSettingsInFirebase,
    TResult Function(UpdateCapitalCellWidthEvent value)? updateCapitalCellWidth,
    TResult Function(UpdateCapitalCellWidthInFirebaseEvent value)?
        updateCapitalCellWidthInFirebase,
    TResult Function(StartEditingCellsEvent value)? startEditingCells,
    TResult Function(CreateDiaryColumnEvent value)? createDiaryColumn,
    TResult Function(DeleteDiaryColumnEvent value)? deleteDiaryColumn,
    TResult Function(UpdateDiaryListSettingsEvent value)?
        updateDiaryListSettings,
    TResult Function(ShareThemeEvent value)? shareTheme,
    TResult Function(StartEditingColorEvent value)? startEditingColor,
    TResult Function(StartEditingBordersEvent value)? startEditingBorders,
    TResult Function(StartEditingBordersStyleEvent value)?
        startEditingBorderStyle,
    TResult Function(TurnBackEditingEvent value)? turnBackEditing,
    TResult Function(StartColumnDeletingEvent value)? startColumnDeleting,
    TResult Function(StartColorThemeEditingEvent value)? startColorThemeEditing,
    TResult Function(DeleteColumnsEvent value)? deleteColumns,
    TResult Function(LoadThemesEvent value)? loadThemes,
    TResult Function(LoadFromThemeEvent value)? loadFromTheme,
    TResult Function(TakeThemeEvent value)? takeTheme,
    required TResult orElse(),
  }) {
    if (getDiaryColumns != null) {
      return getDiaryColumns(this);
    }
    return orElse();
  }
}

abstract class GetDiaryColumnsEvent implements DiaryListEvent {
  const factory GetDiaryColumnsEvent(
      {required final DiaryList diaryList,
      required final List<DiaryList> lists}) = _$GetDiaryColumnsEvent;

  DiaryList get diaryList;
  List<DiaryList> get lists;
  @JsonKey(ignore: true)
  _$$GetDiaryColumnsEventCopyWith<_$GetDiaryColumnsEvent> get copyWith =>
      throw _privateConstructorUsedError;
}

/// @nodoc
abstract class _$$GetDiaryCellsEventCopyWith<$Res> {
  factory _$$GetDiaryCellsEventCopyWith(_$GetDiaryCellsEvent value,
          $Res Function(_$GetDiaryCellsEvent) then) =
      __$$GetDiaryCellsEventCopyWithImpl<$Res>;
  @useResult
  $Res call(
      {DiaryList diaryList,
      List<DiaryColumn> diaryColumns,
      List<CapitalCell> capitalCells,
      List<DiaryList> lists});
}

/// @nodoc
class __$$GetDiaryCellsEventCopyWithImpl<$Res>
    extends _$DiaryListEventCopyWithImpl<$Res, _$GetDiaryCellsEvent>
    implements _$$GetDiaryCellsEventCopyWith<$Res> {
  __$$GetDiaryCellsEventCopyWithImpl(
      _$GetDiaryCellsEvent _value, $Res Function(_$GetDiaryCellsEvent) _then)
      : super(_value, _then);

  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? diaryList = null,
    Object? diaryColumns = null,
    Object? capitalCells = null,
    Object? lists = null,
  }) {
    return _then(_$GetDiaryCellsEvent(
      diaryList: null == diaryList
          ? _value.diaryList
          : diaryList // ignore: cast_nullable_to_non_nullable
              as DiaryList,
      diaryColumns: null == diaryColumns
          ? _value._diaryColumns
          : diaryColumns // ignore: cast_nullable_to_non_nullable
              as List<DiaryColumn>,
      capitalCells: null == capitalCells
          ? _value._capitalCells
          : capitalCells // ignore: cast_nullable_to_non_nullable
              as List<CapitalCell>,
      lists: null == lists
          ? _value._lists
          : lists // ignore: cast_nullable_to_non_nullable
              as List<DiaryList>,
    ));
  }
}

/// @nodoc

class _$GetDiaryCellsEvent implements GetDiaryCellsEvent {
  const _$GetDiaryCellsEvent(
      {required this.diaryList,
      required final List<DiaryColumn> diaryColumns,
      required final List<CapitalCell> capitalCells,
      required final List<DiaryList> lists})
      : _diaryColumns = diaryColumns,
        _capitalCells = capitalCells,
        _lists = lists;

  @override
  final DiaryList diaryList;
  final List<DiaryColumn> _diaryColumns;
  @override
  List<DiaryColumn> get diaryColumns {
    if (_diaryColumns is EqualUnmodifiableListView) return _diaryColumns;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_diaryColumns);
  }

  final List<CapitalCell> _capitalCells;
  @override
  List<CapitalCell> get capitalCells {
    if (_capitalCells is EqualUnmodifiableListView) return _capitalCells;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_capitalCells);
  }

  final List<DiaryList> _lists;
  @override
  List<DiaryList> get lists {
    if (_lists is EqualUnmodifiableListView) return _lists;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_lists);
  }

  @override
  String toString() {
    return 'DiaryListEvent.getDiaryCells(diaryList: $diaryList, diaryColumns: $diaryColumns, capitalCells: $capitalCells, lists: $lists)';
  }

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$GetDiaryCellsEvent &&
            (identical(other.diaryList, diaryList) ||
                other.diaryList == diaryList) &&
            const DeepCollectionEquality()
                .equals(other._diaryColumns, _diaryColumns) &&
            const DeepCollectionEquality()
                .equals(other._capitalCells, _capitalCells) &&
            const DeepCollectionEquality().equals(other._lists, _lists));
  }

  @override
  int get hashCode => Object.hash(
      runtimeType,
      diaryList,
      const DeepCollectionEquality().hash(_diaryColumns),
      const DeepCollectionEquality().hash(_capitalCells),
      const DeepCollectionEquality().hash(_lists));

  @JsonKey(ignore: true)
  @override
  @pragma('vm:prefer-inline')
  _$$GetDiaryCellsEventCopyWith<_$GetDiaryCellsEvent> get copyWith =>
      __$$GetDiaryCellsEventCopyWithImpl<_$GetDiaryCellsEvent>(
          this, _$identity);

  @override
  @optionalTypeArgs
  TResult when<TResult extends Object?>({
    required TResult Function() createSample,
    required TResult Function() initialLoad,
    required TResult Function(DateTime date, int delay) getDiaryList,
    required TResult Function(DiaryList diaryList, List<DiaryList> lists)
        getDiaryColumns,
    required TResult Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells,
            List<DiaryList> lists)
        getDiaryCells,
    required TResult Function(DiaryCell diaryCell) selectDiaryCell,
    required TResult Function(List<DiaryCell> diaryCells) selectDiaryCells,
    required TResult Function(CapitalCell capitalCell) selectCapitalCell,
    required TResult Function(
            DiaryCell diaryCell,
            GlobalObjectKey<State<StatefulWidget>> cellKey,
            DragUpdateDetails details,
            double scaleFactor)
        onPanUpdate,
    required TResult Function(DiaryList? selectedList) startEditingList,
    required TResult Function(
            String? newName, String? addedColumnName, int? addedColumnCount)
        returnToLoaded,
    required TResult Function() returnToCellsSelected,
    required TResult Function(DiaryList diaryList, String newName)
        updateDiaryListName,
    required TResult Function(DiaryCell diaryCell, String? textFieldText)
        changeDiaryCell,
    required TResult Function(CapitalCell capitalCell, String? textFieldText)
        changeCapitalCell,
    required TResult Function(DiaryCell diaryCell, String? textFieldText)
        updateDiaryCellInFirebase,
    required TResult Function(
            FontWeightEnum? fontWeight,
            TextDecorationEnum? textDecoration,
            FontStyleEnum? fontStyle,
            double? fontSize,
            String? color,
            HorizontalAlignmentsEnum? horizontalAlignment,
            VerticalAlignmentsEnum? verticalAlignment,
            String? backgroundColor)
        changeDiaryCellsSettings,
    required TResult Function(BordersEditingEnum bordersEditingEnum,
            BordersStyleEnum bordersStyleEnum, Color bordersColor)
        changeDiaryCellsBordersSettings,
    required TResult Function(
            FontWeightEnum? fontWeight,
            TextDecorationEnum? textDecoration,
            FontStyleEnum? fontStyle,
            double? fontSize,
            String? color,
            HorizontalAlignmentsEnum? horizontalAlignment,
            VerticalAlignmentsEnum? verticalAlignment,
            String? backgroundColor,
            BordersStyleEnum? bordersStyleEnum,
            Color? bordersColor)
        changeCapitalCellSettings,
    required TResult Function(
            DiaryCell diaryCell,
            int index,
            DiaryCellTextSettings? newTextSettings,
            DiaryCellSettings? newSettings)
        updateDiaryCellSettingsInFirebase,
    required TResult Function(DiaryColumnSettings newSettings)
        updateCapitalCellSettingsInFirebase,
    required TResult Function(PointerMoveEvent details) updateCapitalCellWidth,
    required TResult Function(PointerUpEvent details)
        updateCapitalCellWidthInFirebase,
    required TResult Function(bool isTextEditing) startEditingCells,
    required TResult Function(DiaryList diaryList, String name,
            int columnsCount, List<DiaryColumn> diaryColumns)
        createDiaryColumn,
    required TResult Function(DiaryList diaryList, String columnId)
        deleteDiaryColumn,
    required TResult Function(DiaryList diaryList, String? themeColor,
            String? themeBorderColor, String? themePanelBackgroundColor)
        updateDiaryListSettings,
    required TResult Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<DiaryCell> diaryCells,
            List<CapitalCell> capitalCells,
            String themeName,
            String description)
        shareTheme,
    required TResult Function() startEditingColor,
    required TResult Function() startEditingBorders,
    required TResult Function() startEditingBorderStyle,
    required TResult Function() turnBackEditing,
    required TResult Function() startColumnDeleting,
    required TResult Function() startColorThemeEditing,
    required TResult Function() deleteColumns,
    required TResult Function() loadThemes,
    required TResult Function(ListTheme listTheme) loadFromTheme,
    required TResult Function(ListTheme listTheme) takeTheme,
  }) {
    return getDiaryCells(diaryList, diaryColumns, capitalCells, lists);
  }

  @override
  @optionalTypeArgs
  TResult? whenOrNull<TResult extends Object?>({
    TResult? Function()? createSample,
    TResult? Function()? initialLoad,
    TResult? Function(DateTime date, int delay)? getDiaryList,
    TResult? Function(DiaryList diaryList, List<DiaryList> lists)?
        getDiaryColumns,
    TResult? Function(DiaryList diaryList, List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells, List<DiaryList> lists)?
        getDiaryCells,
    TResult? Function(DiaryCell diaryCell)? selectDiaryCell,
    TResult? Function(List<DiaryCell> diaryCells)? selectDiaryCells,
    TResult? Function(CapitalCell capitalCell)? selectCapitalCell,
    TResult? Function(
            DiaryCell diaryCell,
            GlobalObjectKey<State<StatefulWidget>> cellKey,
            DragUpdateDetails details,
            double scaleFactor)?
        onPanUpdate,
    TResult? Function(DiaryList? selectedList)? startEditingList,
    TResult? Function(
            String? newName, String? addedColumnName, int? addedColumnCount)?
        returnToLoaded,
    TResult? Function()? returnToCellsSelected,
    TResult? Function(DiaryList diaryList, String newName)? updateDiaryListName,
    TResult? Function(DiaryCell diaryCell, String? textFieldText)?
        changeDiaryCell,
    TResult? Function(CapitalCell capitalCell, String? textFieldText)?
        changeCapitalCell,
    TResult? Function(DiaryCell diaryCell, String? textFieldText)?
        updateDiaryCellInFirebase,
    TResult? Function(
            FontWeightEnum? fontWeight,
            TextDecorationEnum? textDecoration,
            FontStyleEnum? fontStyle,
            double? fontSize,
            String? color,
            HorizontalAlignmentsEnum? horizontalAlignment,
            VerticalAlignmentsEnum? verticalAlignment,
            String? backgroundColor)?
        changeDiaryCellsSettings,
    TResult? Function(BordersEditingEnum bordersEditingEnum,
            BordersStyleEnum bordersStyleEnum, Color bordersColor)?
        changeDiaryCellsBordersSettings,
    TResult? Function(
            FontWeightEnum? fontWeight,
            TextDecorationEnum? textDecoration,
            FontStyleEnum? fontStyle,
            double? fontSize,
            String? color,
            HorizontalAlignmentsEnum? horizontalAlignment,
            VerticalAlignmentsEnum? verticalAlignment,
            String? backgroundColor,
            BordersStyleEnum? bordersStyleEnum,
            Color? bordersColor)?
        changeCapitalCellSettings,
    TResult? Function(
            DiaryCell diaryCell,
            int index,
            DiaryCellTextSettings? newTextSettings,
            DiaryCellSettings? newSettings)?
        updateDiaryCellSettingsInFirebase,
    TResult? Function(DiaryColumnSettings newSettings)?
        updateCapitalCellSettingsInFirebase,
    TResult? Function(PointerMoveEvent details)? updateCapitalCellWidth,
    TResult? Function(PointerUpEvent details)? updateCapitalCellWidthInFirebase,
    TResult? Function(bool isTextEditing)? startEditingCells,
    TResult? Function(DiaryList diaryList, String name, int columnsCount,
            List<DiaryColumn> diaryColumns)?
        createDiaryColumn,
    TResult? Function(DiaryList diaryList, String columnId)? deleteDiaryColumn,
    TResult? Function(DiaryList diaryList, String? themeColor,
            String? themeBorderColor, String? themePanelBackgroundColor)?
        updateDiaryListSettings,
    TResult? Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<DiaryCell> diaryCells,
            List<CapitalCell> capitalCells,
            String themeName,
            String description)?
        shareTheme,
    TResult? Function()? startEditingColor,
    TResult? Function()? startEditingBorders,
    TResult? Function()? startEditingBorderStyle,
    TResult? Function()? turnBackEditing,
    TResult? Function()? startColumnDeleting,
    TResult? Function()? startColorThemeEditing,
    TResult? Function()? deleteColumns,
    TResult? Function()? loadThemes,
    TResult? Function(ListTheme listTheme)? loadFromTheme,
    TResult? Function(ListTheme listTheme)? takeTheme,
  }) {
    return getDiaryCells?.call(diaryList, diaryColumns, capitalCells, lists);
  }

  @override
  @optionalTypeArgs
  TResult maybeWhen<TResult extends Object?>({
    TResult Function()? createSample,
    TResult Function()? initialLoad,
    TResult Function(DateTime date, int delay)? getDiaryList,
    TResult Function(DiaryList diaryList, List<DiaryList> lists)?
        getDiaryColumns,
    TResult Function(DiaryList diaryList, List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells, List<DiaryList> lists)?
        getDiaryCells,
    TResult Function(DiaryCell diaryCell)? selectDiaryCell,
    TResult Function(List<DiaryCell> diaryCells)? selectDiaryCells,
    TResult Function(CapitalCell capitalCell)? selectCapitalCell,
    TResult Function(
            DiaryCell diaryCell,
            GlobalObjectKey<State<StatefulWidget>> cellKey,
            DragUpdateDetails details,
            double scaleFactor)?
        onPanUpdate,
    TResult Function(DiaryList? selectedList)? startEditingList,
    TResult Function(
            String? newName, String? addedColumnName, int? addedColumnCount)?
        returnToLoaded,
    TResult Function()? returnToCellsSelected,
    TResult Function(DiaryList diaryList, String newName)? updateDiaryListName,
    TResult Function(DiaryCell diaryCell, String? textFieldText)?
        changeDiaryCell,
    TResult Function(CapitalCell capitalCell, String? textFieldText)?
        changeCapitalCell,
    TResult Function(DiaryCell diaryCell, String? textFieldText)?
        updateDiaryCellInFirebase,
    TResult Function(
            FontWeightEnum? fontWeight,
            TextDecorationEnum? textDecoration,
            FontStyleEnum? fontStyle,
            double? fontSize,
            String? color,
            HorizontalAlignmentsEnum? horizontalAlignment,
            VerticalAlignmentsEnum? verticalAlignment,
            String? backgroundColor)?
        changeDiaryCellsSettings,
    TResult Function(BordersEditingEnum bordersEditingEnum,
            BordersStyleEnum bordersStyleEnum, Color bordersColor)?
        changeDiaryCellsBordersSettings,
    TResult Function(
            FontWeightEnum? fontWeight,
            TextDecorationEnum? textDecoration,
            FontStyleEnum? fontStyle,
            double? fontSize,
            String? color,
            HorizontalAlignmentsEnum? horizontalAlignment,
            VerticalAlignmentsEnum? verticalAlignment,
            String? backgroundColor,
            BordersStyleEnum? bordersStyleEnum,
            Color? bordersColor)?
        changeCapitalCellSettings,
    TResult Function(
            DiaryCell diaryCell,
            int index,
            DiaryCellTextSettings? newTextSettings,
            DiaryCellSettings? newSettings)?
        updateDiaryCellSettingsInFirebase,
    TResult Function(DiaryColumnSettings newSettings)?
        updateCapitalCellSettingsInFirebase,
    TResult Function(PointerMoveEvent details)? updateCapitalCellWidth,
    TResult Function(PointerUpEvent details)? updateCapitalCellWidthInFirebase,
    TResult Function(bool isTextEditing)? startEditingCells,
    TResult Function(DiaryList diaryList, String name, int columnsCount,
            List<DiaryColumn> diaryColumns)?
        createDiaryColumn,
    TResult Function(DiaryList diaryList, String columnId)? deleteDiaryColumn,
    TResult Function(DiaryList diaryList, String? themeColor,
            String? themeBorderColor, String? themePanelBackgroundColor)?
        updateDiaryListSettings,
    TResult Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<DiaryCell> diaryCells,
            List<CapitalCell> capitalCells,
            String themeName,
            String description)?
        shareTheme,
    TResult Function()? startEditingColor,
    TResult Function()? startEditingBorders,
    TResult Function()? startEditingBorderStyle,
    TResult Function()? turnBackEditing,
    TResult Function()? startColumnDeleting,
    TResult Function()? startColorThemeEditing,
    TResult Function()? deleteColumns,
    TResult Function()? loadThemes,
    TResult Function(ListTheme listTheme)? loadFromTheme,
    TResult Function(ListTheme listTheme)? takeTheme,
    required TResult orElse(),
  }) {
    if (getDiaryCells != null) {
      return getDiaryCells(diaryList, diaryColumns, capitalCells, lists);
    }
    return orElse();
  }

  @override
  @optionalTypeArgs
  TResult map<TResult extends Object?>({
    required TResult Function(CreateSampleEvent value) createSample,
    required TResult Function(InitialLoadEvent value) initialLoad,
    required TResult Function(GetDiaryListEvent value) getDiaryList,
    required TResult Function(GetDiaryColumnsEvent value) getDiaryColumns,
    required TResult Function(GetDiaryCellsEvent value) getDiaryCells,
    required TResult Function(SelectDiaryCellEvent value) selectDiaryCell,
    required TResult Function(SelectDiaryCellsEvent value) selectDiaryCells,
    required TResult Function(SelectCapitalCellEvent value) selectCapitalCell,
    required TResult Function(OnPanUpdateEvent value) onPanUpdate,
    required TResult Function(StartEditingListEvent value) startEditingList,
    required TResult Function(ReturnToLoadedEvent value) returnToLoaded,
    required TResult Function(ReturnToCellsSelectedEvent value)
        returnToCellsSelected,
    required TResult Function(UpdateDiaryListNameEvent value)
        updateDiaryListName,
    required TResult Function(ChangeDiaryCellEvent value) changeDiaryCell,
    required TResult Function(ChangeCapitalCellEvent value) changeCapitalCell,
    required TResult Function(UpdateDiaryCellInFirebaseEvent value)
        updateDiaryCellInFirebase,
    required TResult Function(ChangeDiaryCellsSettingsEvent value)
        changeDiaryCellsSettings,
    required TResult Function(ChangeDiaryCellsBordersSettingsEvent value)
        changeDiaryCellsBordersSettings,
    required TResult Function(ChangeCapitalCellSettingsEvent value)
        changeCapitalCellSettings,
    required TResult Function(UpdateDiaryCellSettingsInFirebaseEvent value)
        updateDiaryCellSettingsInFirebase,
    required TResult Function(UpdateCapitalCellSettingsInFirebaseEvent value)
        updateCapitalCellSettingsInFirebase,
    required TResult Function(UpdateCapitalCellWidthEvent value)
        updateCapitalCellWidth,
    required TResult Function(UpdateCapitalCellWidthInFirebaseEvent value)
        updateCapitalCellWidthInFirebase,
    required TResult Function(StartEditingCellsEvent value) startEditingCells,
    required TResult Function(CreateDiaryColumnEvent value) createDiaryColumn,
    required TResult Function(DeleteDiaryColumnEvent value) deleteDiaryColumn,
    required TResult Function(UpdateDiaryListSettingsEvent value)
        updateDiaryListSettings,
    required TResult Function(ShareThemeEvent value) shareTheme,
    required TResult Function(StartEditingColorEvent value) startEditingColor,
    required TResult Function(StartEditingBordersEvent value)
        startEditingBorders,
    required TResult Function(StartEditingBordersStyleEvent value)
        startEditingBorderStyle,
    required TResult Function(TurnBackEditingEvent value) turnBackEditing,
    required TResult Function(StartColumnDeletingEvent value)
        startColumnDeleting,
    required TResult Function(StartColorThemeEditingEvent value)
        startColorThemeEditing,
    required TResult Function(DeleteColumnsEvent value) deleteColumns,
    required TResult Function(LoadThemesEvent value) loadThemes,
    required TResult Function(LoadFromThemeEvent value) loadFromTheme,
    required TResult Function(TakeThemeEvent value) takeTheme,
  }) {
    return getDiaryCells(this);
  }

  @override
  @optionalTypeArgs
  TResult? mapOrNull<TResult extends Object?>({
    TResult? Function(CreateSampleEvent value)? createSample,
    TResult? Function(InitialLoadEvent value)? initialLoad,
    TResult? Function(GetDiaryListEvent value)? getDiaryList,
    TResult? Function(GetDiaryColumnsEvent value)? getDiaryColumns,
    TResult? Function(GetDiaryCellsEvent value)? getDiaryCells,
    TResult? Function(SelectDiaryCellEvent value)? selectDiaryCell,
    TResult? Function(SelectDiaryCellsEvent value)? selectDiaryCells,
    TResult? Function(SelectCapitalCellEvent value)? selectCapitalCell,
    TResult? Function(OnPanUpdateEvent value)? onPanUpdate,
    TResult? Function(StartEditingListEvent value)? startEditingList,
    TResult? Function(ReturnToLoadedEvent value)? returnToLoaded,
    TResult? Function(ReturnToCellsSelectedEvent value)? returnToCellsSelected,
    TResult? Function(UpdateDiaryListNameEvent value)? updateDiaryListName,
    TResult? Function(ChangeDiaryCellEvent value)? changeDiaryCell,
    TResult? Function(ChangeCapitalCellEvent value)? changeCapitalCell,
    TResult? Function(UpdateDiaryCellInFirebaseEvent value)?
        updateDiaryCellInFirebase,
    TResult? Function(ChangeDiaryCellsSettingsEvent value)?
        changeDiaryCellsSettings,
    TResult? Function(ChangeDiaryCellsBordersSettingsEvent value)?
        changeDiaryCellsBordersSettings,
    TResult? Function(ChangeCapitalCellSettingsEvent value)?
        changeCapitalCellSettings,
    TResult? Function(UpdateDiaryCellSettingsInFirebaseEvent value)?
        updateDiaryCellSettingsInFirebase,
    TResult? Function(UpdateCapitalCellSettingsInFirebaseEvent value)?
        updateCapitalCellSettingsInFirebase,
    TResult? Function(UpdateCapitalCellWidthEvent value)?
        updateCapitalCellWidth,
    TResult? Function(UpdateCapitalCellWidthInFirebaseEvent value)?
        updateCapitalCellWidthInFirebase,
    TResult? Function(StartEditingCellsEvent value)? startEditingCells,
    TResult? Function(CreateDiaryColumnEvent value)? createDiaryColumn,
    TResult? Function(DeleteDiaryColumnEvent value)? deleteDiaryColumn,
    TResult? Function(UpdateDiaryListSettingsEvent value)?
        updateDiaryListSettings,
    TResult? Function(ShareThemeEvent value)? shareTheme,
    TResult? Function(StartEditingColorEvent value)? startEditingColor,
    TResult? Function(StartEditingBordersEvent value)? startEditingBorders,
    TResult? Function(StartEditingBordersStyleEvent value)?
        startEditingBorderStyle,
    TResult? Function(TurnBackEditingEvent value)? turnBackEditing,
    TResult? Function(StartColumnDeletingEvent value)? startColumnDeleting,
    TResult? Function(StartColorThemeEditingEvent value)?
        startColorThemeEditing,
    TResult? Function(DeleteColumnsEvent value)? deleteColumns,
    TResult? Function(LoadThemesEvent value)? loadThemes,
    TResult? Function(LoadFromThemeEvent value)? loadFromTheme,
    TResult? Function(TakeThemeEvent value)? takeTheme,
  }) {
    return getDiaryCells?.call(this);
  }

  @override
  @optionalTypeArgs
  TResult maybeMap<TResult extends Object?>({
    TResult Function(CreateSampleEvent value)? createSample,
    TResult Function(InitialLoadEvent value)? initialLoad,
    TResult Function(GetDiaryListEvent value)? getDiaryList,
    TResult Function(GetDiaryColumnsEvent value)? getDiaryColumns,
    TResult Function(GetDiaryCellsEvent value)? getDiaryCells,
    TResult Function(SelectDiaryCellEvent value)? selectDiaryCell,
    TResult Function(SelectDiaryCellsEvent value)? selectDiaryCells,
    TResult Function(SelectCapitalCellEvent value)? selectCapitalCell,
    TResult Function(OnPanUpdateEvent value)? onPanUpdate,
    TResult Function(StartEditingListEvent value)? startEditingList,
    TResult Function(ReturnToLoadedEvent value)? returnToLoaded,
    TResult Function(ReturnToCellsSelectedEvent value)? returnToCellsSelected,
    TResult Function(UpdateDiaryListNameEvent value)? updateDiaryListName,
    TResult Function(ChangeDiaryCellEvent value)? changeDiaryCell,
    TResult Function(ChangeCapitalCellEvent value)? changeCapitalCell,
    TResult Function(UpdateDiaryCellInFirebaseEvent value)?
        updateDiaryCellInFirebase,
    TResult Function(ChangeDiaryCellsSettingsEvent value)?
        changeDiaryCellsSettings,
    TResult Function(ChangeDiaryCellsBordersSettingsEvent value)?
        changeDiaryCellsBordersSettings,
    TResult Function(ChangeCapitalCellSettingsEvent value)?
        changeCapitalCellSettings,
    TResult Function(UpdateDiaryCellSettingsInFirebaseEvent value)?
        updateDiaryCellSettingsInFirebase,
    TResult Function(UpdateCapitalCellSettingsInFirebaseEvent value)?
        updateCapitalCellSettingsInFirebase,
    TResult Function(UpdateCapitalCellWidthEvent value)? updateCapitalCellWidth,
    TResult Function(UpdateCapitalCellWidthInFirebaseEvent value)?
        updateCapitalCellWidthInFirebase,
    TResult Function(StartEditingCellsEvent value)? startEditingCells,
    TResult Function(CreateDiaryColumnEvent value)? createDiaryColumn,
    TResult Function(DeleteDiaryColumnEvent value)? deleteDiaryColumn,
    TResult Function(UpdateDiaryListSettingsEvent value)?
        updateDiaryListSettings,
    TResult Function(ShareThemeEvent value)? shareTheme,
    TResult Function(StartEditingColorEvent value)? startEditingColor,
    TResult Function(StartEditingBordersEvent value)? startEditingBorders,
    TResult Function(StartEditingBordersStyleEvent value)?
        startEditingBorderStyle,
    TResult Function(TurnBackEditingEvent value)? turnBackEditing,
    TResult Function(StartColumnDeletingEvent value)? startColumnDeleting,
    TResult Function(StartColorThemeEditingEvent value)? startColorThemeEditing,
    TResult Function(DeleteColumnsEvent value)? deleteColumns,
    TResult Function(LoadThemesEvent value)? loadThemes,
    TResult Function(LoadFromThemeEvent value)? loadFromTheme,
    TResult Function(TakeThemeEvent value)? takeTheme,
    required TResult orElse(),
  }) {
    if (getDiaryCells != null) {
      return getDiaryCells(this);
    }
    return orElse();
  }
}

abstract class GetDiaryCellsEvent implements DiaryListEvent {
  const factory GetDiaryCellsEvent(
      {required final DiaryList diaryList,
      required final List<DiaryColumn> diaryColumns,
      required final List<CapitalCell> capitalCells,
      required final List<DiaryList> lists}) = _$GetDiaryCellsEvent;

  DiaryList get diaryList;
  List<DiaryColumn> get diaryColumns;
  List<CapitalCell> get capitalCells;
  List<DiaryList> get lists;
  @JsonKey(ignore: true)
  _$$GetDiaryCellsEventCopyWith<_$GetDiaryCellsEvent> get copyWith =>
      throw _privateConstructorUsedError;
}

/// @nodoc
abstract class _$$SelectDiaryCellEventCopyWith<$Res> {
  factory _$$SelectDiaryCellEventCopyWith(_$SelectDiaryCellEvent value,
          $Res Function(_$SelectDiaryCellEvent) then) =
      __$$SelectDiaryCellEventCopyWithImpl<$Res>;
  @useResult
  $Res call({DiaryCell diaryCell});
}

/// @nodoc
class __$$SelectDiaryCellEventCopyWithImpl<$Res>
    extends _$DiaryListEventCopyWithImpl<$Res, _$SelectDiaryCellEvent>
    implements _$$SelectDiaryCellEventCopyWith<$Res> {
  __$$SelectDiaryCellEventCopyWithImpl(_$SelectDiaryCellEvent _value,
      $Res Function(_$SelectDiaryCellEvent) _then)
      : super(_value, _then);

  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? diaryCell = null,
  }) {
    return _then(_$SelectDiaryCellEvent(
      diaryCell: null == diaryCell
          ? _value.diaryCell
          : diaryCell // ignore: cast_nullable_to_non_nullable
              as DiaryCell,
    ));
  }
}

/// @nodoc

class _$SelectDiaryCellEvent implements SelectDiaryCellEvent {
  const _$SelectDiaryCellEvent({required this.diaryCell});

  @override
  final DiaryCell diaryCell;

  @override
  String toString() {
    return 'DiaryListEvent.selectDiaryCell(diaryCell: $diaryCell)';
  }

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$SelectDiaryCellEvent &&
            (identical(other.diaryCell, diaryCell) ||
                other.diaryCell == diaryCell));
  }

  @override
  int get hashCode => Object.hash(runtimeType, diaryCell);

  @JsonKey(ignore: true)
  @override
  @pragma('vm:prefer-inline')
  _$$SelectDiaryCellEventCopyWith<_$SelectDiaryCellEvent> get copyWith =>
      __$$SelectDiaryCellEventCopyWithImpl<_$SelectDiaryCellEvent>(
          this, _$identity);

  @override
  @optionalTypeArgs
  TResult when<TResult extends Object?>({
    required TResult Function() createSample,
    required TResult Function() initialLoad,
    required TResult Function(DateTime date, int delay) getDiaryList,
    required TResult Function(DiaryList diaryList, List<DiaryList> lists)
        getDiaryColumns,
    required TResult Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells,
            List<DiaryList> lists)
        getDiaryCells,
    required TResult Function(DiaryCell diaryCell) selectDiaryCell,
    required TResult Function(List<DiaryCell> diaryCells) selectDiaryCells,
    required TResult Function(CapitalCell capitalCell) selectCapitalCell,
    required TResult Function(
            DiaryCell diaryCell,
            GlobalObjectKey<State<StatefulWidget>> cellKey,
            DragUpdateDetails details,
            double scaleFactor)
        onPanUpdate,
    required TResult Function(DiaryList? selectedList) startEditingList,
    required TResult Function(
            String? newName, String? addedColumnName, int? addedColumnCount)
        returnToLoaded,
    required TResult Function() returnToCellsSelected,
    required TResult Function(DiaryList diaryList, String newName)
        updateDiaryListName,
    required TResult Function(DiaryCell diaryCell, String? textFieldText)
        changeDiaryCell,
    required TResult Function(CapitalCell capitalCell, String? textFieldText)
        changeCapitalCell,
    required TResult Function(DiaryCell diaryCell, String? textFieldText)
        updateDiaryCellInFirebase,
    required TResult Function(
            FontWeightEnum? fontWeight,
            TextDecorationEnum? textDecoration,
            FontStyleEnum? fontStyle,
            double? fontSize,
            String? color,
            HorizontalAlignmentsEnum? horizontalAlignment,
            VerticalAlignmentsEnum? verticalAlignment,
            String? backgroundColor)
        changeDiaryCellsSettings,
    required TResult Function(BordersEditingEnum bordersEditingEnum,
            BordersStyleEnum bordersStyleEnum, Color bordersColor)
        changeDiaryCellsBordersSettings,
    required TResult Function(
            FontWeightEnum? fontWeight,
            TextDecorationEnum? textDecoration,
            FontStyleEnum? fontStyle,
            double? fontSize,
            String? color,
            HorizontalAlignmentsEnum? horizontalAlignment,
            VerticalAlignmentsEnum? verticalAlignment,
            String? backgroundColor,
            BordersStyleEnum? bordersStyleEnum,
            Color? bordersColor)
        changeCapitalCellSettings,
    required TResult Function(
            DiaryCell diaryCell,
            int index,
            DiaryCellTextSettings? newTextSettings,
            DiaryCellSettings? newSettings)
        updateDiaryCellSettingsInFirebase,
    required TResult Function(DiaryColumnSettings newSettings)
        updateCapitalCellSettingsInFirebase,
    required TResult Function(PointerMoveEvent details) updateCapitalCellWidth,
    required TResult Function(PointerUpEvent details)
        updateCapitalCellWidthInFirebase,
    required TResult Function(bool isTextEditing) startEditingCells,
    required TResult Function(DiaryList diaryList, String name,
            int columnsCount, List<DiaryColumn> diaryColumns)
        createDiaryColumn,
    required TResult Function(DiaryList diaryList, String columnId)
        deleteDiaryColumn,
    required TResult Function(DiaryList diaryList, String? themeColor,
            String? themeBorderColor, String? themePanelBackgroundColor)
        updateDiaryListSettings,
    required TResult Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<DiaryCell> diaryCells,
            List<CapitalCell> capitalCells,
            String themeName,
            String description)
        shareTheme,
    required TResult Function() startEditingColor,
    required TResult Function() startEditingBorders,
    required TResult Function() startEditingBorderStyle,
    required TResult Function() turnBackEditing,
    required TResult Function() startColumnDeleting,
    required TResult Function() startColorThemeEditing,
    required TResult Function() deleteColumns,
    required TResult Function() loadThemes,
    required TResult Function(ListTheme listTheme) loadFromTheme,
    required TResult Function(ListTheme listTheme) takeTheme,
  }) {
    return selectDiaryCell(diaryCell);
  }

  @override
  @optionalTypeArgs
  TResult? whenOrNull<TResult extends Object?>({
    TResult? Function()? createSample,
    TResult? Function()? initialLoad,
    TResult? Function(DateTime date, int delay)? getDiaryList,
    TResult? Function(DiaryList diaryList, List<DiaryList> lists)?
        getDiaryColumns,
    TResult? Function(DiaryList diaryList, List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells, List<DiaryList> lists)?
        getDiaryCells,
    TResult? Function(DiaryCell diaryCell)? selectDiaryCell,
    TResult? Function(List<DiaryCell> diaryCells)? selectDiaryCells,
    TResult? Function(CapitalCell capitalCell)? selectCapitalCell,
    TResult? Function(
            DiaryCell diaryCell,
            GlobalObjectKey<State<StatefulWidget>> cellKey,
            DragUpdateDetails details,
            double scaleFactor)?
        onPanUpdate,
    TResult? Function(DiaryList? selectedList)? startEditingList,
    TResult? Function(
            String? newName, String? addedColumnName, int? addedColumnCount)?
        returnToLoaded,
    TResult? Function()? returnToCellsSelected,
    TResult? Function(DiaryList diaryList, String newName)? updateDiaryListName,
    TResult? Function(DiaryCell diaryCell, String? textFieldText)?
        changeDiaryCell,
    TResult? Function(CapitalCell capitalCell, String? textFieldText)?
        changeCapitalCell,
    TResult? Function(DiaryCell diaryCell, String? textFieldText)?
        updateDiaryCellInFirebase,
    TResult? Function(
            FontWeightEnum? fontWeight,
            TextDecorationEnum? textDecoration,
            FontStyleEnum? fontStyle,
            double? fontSize,
            String? color,
            HorizontalAlignmentsEnum? horizontalAlignment,
            VerticalAlignmentsEnum? verticalAlignment,
            String? backgroundColor)?
        changeDiaryCellsSettings,
    TResult? Function(BordersEditingEnum bordersEditingEnum,
            BordersStyleEnum bordersStyleEnum, Color bordersColor)?
        changeDiaryCellsBordersSettings,
    TResult? Function(
            FontWeightEnum? fontWeight,
            TextDecorationEnum? textDecoration,
            FontStyleEnum? fontStyle,
            double? fontSize,
            String? color,
            HorizontalAlignmentsEnum? horizontalAlignment,
            VerticalAlignmentsEnum? verticalAlignment,
            String? backgroundColor,
            BordersStyleEnum? bordersStyleEnum,
            Color? bordersColor)?
        changeCapitalCellSettings,
    TResult? Function(
            DiaryCell diaryCell,
            int index,
            DiaryCellTextSettings? newTextSettings,
            DiaryCellSettings? newSettings)?
        updateDiaryCellSettingsInFirebase,
    TResult? Function(DiaryColumnSettings newSettings)?
        updateCapitalCellSettingsInFirebase,
    TResult? Function(PointerMoveEvent details)? updateCapitalCellWidth,
    TResult? Function(PointerUpEvent details)? updateCapitalCellWidthInFirebase,
    TResult? Function(bool isTextEditing)? startEditingCells,
    TResult? Function(DiaryList diaryList, String name, int columnsCount,
            List<DiaryColumn> diaryColumns)?
        createDiaryColumn,
    TResult? Function(DiaryList diaryList, String columnId)? deleteDiaryColumn,
    TResult? Function(DiaryList diaryList, String? themeColor,
            String? themeBorderColor, String? themePanelBackgroundColor)?
        updateDiaryListSettings,
    TResult? Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<DiaryCell> diaryCells,
            List<CapitalCell> capitalCells,
            String themeName,
            String description)?
        shareTheme,
    TResult? Function()? startEditingColor,
    TResult? Function()? startEditingBorders,
    TResult? Function()? startEditingBorderStyle,
    TResult? Function()? turnBackEditing,
    TResult? Function()? startColumnDeleting,
    TResult? Function()? startColorThemeEditing,
    TResult? Function()? deleteColumns,
    TResult? Function()? loadThemes,
    TResult? Function(ListTheme listTheme)? loadFromTheme,
    TResult? Function(ListTheme listTheme)? takeTheme,
  }) {
    return selectDiaryCell?.call(diaryCell);
  }

  @override
  @optionalTypeArgs
  TResult maybeWhen<TResult extends Object?>({
    TResult Function()? createSample,
    TResult Function()? initialLoad,
    TResult Function(DateTime date, int delay)? getDiaryList,
    TResult Function(DiaryList diaryList, List<DiaryList> lists)?
        getDiaryColumns,
    TResult Function(DiaryList diaryList, List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells, List<DiaryList> lists)?
        getDiaryCells,
    TResult Function(DiaryCell diaryCell)? selectDiaryCell,
    TResult Function(List<DiaryCell> diaryCells)? selectDiaryCells,
    TResult Function(CapitalCell capitalCell)? selectCapitalCell,
    TResult Function(
            DiaryCell diaryCell,
            GlobalObjectKey<State<StatefulWidget>> cellKey,
            DragUpdateDetails details,
            double scaleFactor)?
        onPanUpdate,
    TResult Function(DiaryList? selectedList)? startEditingList,
    TResult Function(
            String? newName, String? addedColumnName, int? addedColumnCount)?
        returnToLoaded,
    TResult Function()? returnToCellsSelected,
    TResult Function(DiaryList diaryList, String newName)? updateDiaryListName,
    TResult Function(DiaryCell diaryCell, String? textFieldText)?
        changeDiaryCell,
    TResult Function(CapitalCell capitalCell, String? textFieldText)?
        changeCapitalCell,
    TResult Function(DiaryCell diaryCell, String? textFieldText)?
        updateDiaryCellInFirebase,
    TResult Function(
            FontWeightEnum? fontWeight,
            TextDecorationEnum? textDecoration,
            FontStyleEnum? fontStyle,
            double? fontSize,
            String? color,
            HorizontalAlignmentsEnum? horizontalAlignment,
            VerticalAlignmentsEnum? verticalAlignment,
            String? backgroundColor)?
        changeDiaryCellsSettings,
    TResult Function(BordersEditingEnum bordersEditingEnum,
            BordersStyleEnum bordersStyleEnum, Color bordersColor)?
        changeDiaryCellsBordersSettings,
    TResult Function(
            FontWeightEnum? fontWeight,
            TextDecorationEnum? textDecoration,
            FontStyleEnum? fontStyle,
            double? fontSize,
            String? color,
            HorizontalAlignmentsEnum? horizontalAlignment,
            VerticalAlignmentsEnum? verticalAlignment,
            String? backgroundColor,
            BordersStyleEnum? bordersStyleEnum,
            Color? bordersColor)?
        changeCapitalCellSettings,
    TResult Function(
            DiaryCell diaryCell,
            int index,
            DiaryCellTextSettings? newTextSettings,
            DiaryCellSettings? newSettings)?
        updateDiaryCellSettingsInFirebase,
    TResult Function(DiaryColumnSettings newSettings)?
        updateCapitalCellSettingsInFirebase,
    TResult Function(PointerMoveEvent details)? updateCapitalCellWidth,
    TResult Function(PointerUpEvent details)? updateCapitalCellWidthInFirebase,
    TResult Function(bool isTextEditing)? startEditingCells,
    TResult Function(DiaryList diaryList, String name, int columnsCount,
            List<DiaryColumn> diaryColumns)?
        createDiaryColumn,
    TResult Function(DiaryList diaryList, String columnId)? deleteDiaryColumn,
    TResult Function(DiaryList diaryList, String? themeColor,
            String? themeBorderColor, String? themePanelBackgroundColor)?
        updateDiaryListSettings,
    TResult Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<DiaryCell> diaryCells,
            List<CapitalCell> capitalCells,
            String themeName,
            String description)?
        shareTheme,
    TResult Function()? startEditingColor,
    TResult Function()? startEditingBorders,
    TResult Function()? startEditingBorderStyle,
    TResult Function()? turnBackEditing,
    TResult Function()? startColumnDeleting,
    TResult Function()? startColorThemeEditing,
    TResult Function()? deleteColumns,
    TResult Function()? loadThemes,
    TResult Function(ListTheme listTheme)? loadFromTheme,
    TResult Function(ListTheme listTheme)? takeTheme,
    required TResult orElse(),
  }) {
    if (selectDiaryCell != null) {
      return selectDiaryCell(diaryCell);
    }
    return orElse();
  }

  @override
  @optionalTypeArgs
  TResult map<TResult extends Object?>({
    required TResult Function(CreateSampleEvent value) createSample,
    required TResult Function(InitialLoadEvent value) initialLoad,
    required TResult Function(GetDiaryListEvent value) getDiaryList,
    required TResult Function(GetDiaryColumnsEvent value) getDiaryColumns,
    required TResult Function(GetDiaryCellsEvent value) getDiaryCells,
    required TResult Function(SelectDiaryCellEvent value) selectDiaryCell,
    required TResult Function(SelectDiaryCellsEvent value) selectDiaryCells,
    required TResult Function(SelectCapitalCellEvent value) selectCapitalCell,
    required TResult Function(OnPanUpdateEvent value) onPanUpdate,
    required TResult Function(StartEditingListEvent value) startEditingList,
    required TResult Function(ReturnToLoadedEvent value) returnToLoaded,
    required TResult Function(ReturnToCellsSelectedEvent value)
        returnToCellsSelected,
    required TResult Function(UpdateDiaryListNameEvent value)
        updateDiaryListName,
    required TResult Function(ChangeDiaryCellEvent value) changeDiaryCell,
    required TResult Function(ChangeCapitalCellEvent value) changeCapitalCell,
    required TResult Function(UpdateDiaryCellInFirebaseEvent value)
        updateDiaryCellInFirebase,
    required TResult Function(ChangeDiaryCellsSettingsEvent value)
        changeDiaryCellsSettings,
    required TResult Function(ChangeDiaryCellsBordersSettingsEvent value)
        changeDiaryCellsBordersSettings,
    required TResult Function(ChangeCapitalCellSettingsEvent value)
        changeCapitalCellSettings,
    required TResult Function(UpdateDiaryCellSettingsInFirebaseEvent value)
        updateDiaryCellSettingsInFirebase,
    required TResult Function(UpdateCapitalCellSettingsInFirebaseEvent value)
        updateCapitalCellSettingsInFirebase,
    required TResult Function(UpdateCapitalCellWidthEvent value)
        updateCapitalCellWidth,
    required TResult Function(UpdateCapitalCellWidthInFirebaseEvent value)
        updateCapitalCellWidthInFirebase,
    required TResult Function(StartEditingCellsEvent value) startEditingCells,
    required TResult Function(CreateDiaryColumnEvent value) createDiaryColumn,
    required TResult Function(DeleteDiaryColumnEvent value) deleteDiaryColumn,
    required TResult Function(UpdateDiaryListSettingsEvent value)
        updateDiaryListSettings,
    required TResult Function(ShareThemeEvent value) shareTheme,
    required TResult Function(StartEditingColorEvent value) startEditingColor,
    required TResult Function(StartEditingBordersEvent value)
        startEditingBorders,
    required TResult Function(StartEditingBordersStyleEvent value)
        startEditingBorderStyle,
    required TResult Function(TurnBackEditingEvent value) turnBackEditing,
    required TResult Function(StartColumnDeletingEvent value)
        startColumnDeleting,
    required TResult Function(StartColorThemeEditingEvent value)
        startColorThemeEditing,
    required TResult Function(DeleteColumnsEvent value) deleteColumns,
    required TResult Function(LoadThemesEvent value) loadThemes,
    required TResult Function(LoadFromThemeEvent value) loadFromTheme,
    required TResult Function(TakeThemeEvent value) takeTheme,
  }) {
    return selectDiaryCell(this);
  }

  @override
  @optionalTypeArgs
  TResult? mapOrNull<TResult extends Object?>({
    TResult? Function(CreateSampleEvent value)? createSample,
    TResult? Function(InitialLoadEvent value)? initialLoad,
    TResult? Function(GetDiaryListEvent value)? getDiaryList,
    TResult? Function(GetDiaryColumnsEvent value)? getDiaryColumns,
    TResult? Function(GetDiaryCellsEvent value)? getDiaryCells,
    TResult? Function(SelectDiaryCellEvent value)? selectDiaryCell,
    TResult? Function(SelectDiaryCellsEvent value)? selectDiaryCells,
    TResult? Function(SelectCapitalCellEvent value)? selectCapitalCell,
    TResult? Function(OnPanUpdateEvent value)? onPanUpdate,
    TResult? Function(StartEditingListEvent value)? startEditingList,
    TResult? Function(ReturnToLoadedEvent value)? returnToLoaded,
    TResult? Function(ReturnToCellsSelectedEvent value)? returnToCellsSelected,
    TResult? Function(UpdateDiaryListNameEvent value)? updateDiaryListName,
    TResult? Function(ChangeDiaryCellEvent value)? changeDiaryCell,
    TResult? Function(ChangeCapitalCellEvent value)? changeCapitalCell,
    TResult? Function(UpdateDiaryCellInFirebaseEvent value)?
        updateDiaryCellInFirebase,
    TResult? Function(ChangeDiaryCellsSettingsEvent value)?
        changeDiaryCellsSettings,
    TResult? Function(ChangeDiaryCellsBordersSettingsEvent value)?
        changeDiaryCellsBordersSettings,
    TResult? Function(ChangeCapitalCellSettingsEvent value)?
        changeCapitalCellSettings,
    TResult? Function(UpdateDiaryCellSettingsInFirebaseEvent value)?
        updateDiaryCellSettingsInFirebase,
    TResult? Function(UpdateCapitalCellSettingsInFirebaseEvent value)?
        updateCapitalCellSettingsInFirebase,
    TResult? Function(UpdateCapitalCellWidthEvent value)?
        updateCapitalCellWidth,
    TResult? Function(UpdateCapitalCellWidthInFirebaseEvent value)?
        updateCapitalCellWidthInFirebase,
    TResult? Function(StartEditingCellsEvent value)? startEditingCells,
    TResult? Function(CreateDiaryColumnEvent value)? createDiaryColumn,
    TResult? Function(DeleteDiaryColumnEvent value)? deleteDiaryColumn,
    TResult? Function(UpdateDiaryListSettingsEvent value)?
        updateDiaryListSettings,
    TResult? Function(ShareThemeEvent value)? shareTheme,
    TResult? Function(StartEditingColorEvent value)? startEditingColor,
    TResult? Function(StartEditingBordersEvent value)? startEditingBorders,
    TResult? Function(StartEditingBordersStyleEvent value)?
        startEditingBorderStyle,
    TResult? Function(TurnBackEditingEvent value)? turnBackEditing,
    TResult? Function(StartColumnDeletingEvent value)? startColumnDeleting,
    TResult? Function(StartColorThemeEditingEvent value)?
        startColorThemeEditing,
    TResult? Function(DeleteColumnsEvent value)? deleteColumns,
    TResult? Function(LoadThemesEvent value)? loadThemes,
    TResult? Function(LoadFromThemeEvent value)? loadFromTheme,
    TResult? Function(TakeThemeEvent value)? takeTheme,
  }) {
    return selectDiaryCell?.call(this);
  }

  @override
  @optionalTypeArgs
  TResult maybeMap<TResult extends Object?>({
    TResult Function(CreateSampleEvent value)? createSample,
    TResult Function(InitialLoadEvent value)? initialLoad,
    TResult Function(GetDiaryListEvent value)? getDiaryList,
    TResult Function(GetDiaryColumnsEvent value)? getDiaryColumns,
    TResult Function(GetDiaryCellsEvent value)? getDiaryCells,
    TResult Function(SelectDiaryCellEvent value)? selectDiaryCell,
    TResult Function(SelectDiaryCellsEvent value)? selectDiaryCells,
    TResult Function(SelectCapitalCellEvent value)? selectCapitalCell,
    TResult Function(OnPanUpdateEvent value)? onPanUpdate,
    TResult Function(StartEditingListEvent value)? startEditingList,
    TResult Function(ReturnToLoadedEvent value)? returnToLoaded,
    TResult Function(ReturnToCellsSelectedEvent value)? returnToCellsSelected,
    TResult Function(UpdateDiaryListNameEvent value)? updateDiaryListName,
    TResult Function(ChangeDiaryCellEvent value)? changeDiaryCell,
    TResult Function(ChangeCapitalCellEvent value)? changeCapitalCell,
    TResult Function(UpdateDiaryCellInFirebaseEvent value)?
        updateDiaryCellInFirebase,
    TResult Function(ChangeDiaryCellsSettingsEvent value)?
        changeDiaryCellsSettings,
    TResult Function(ChangeDiaryCellsBordersSettingsEvent value)?
        changeDiaryCellsBordersSettings,
    TResult Function(ChangeCapitalCellSettingsEvent value)?
        changeCapitalCellSettings,
    TResult Function(UpdateDiaryCellSettingsInFirebaseEvent value)?
        updateDiaryCellSettingsInFirebase,
    TResult Function(UpdateCapitalCellSettingsInFirebaseEvent value)?
        updateCapitalCellSettingsInFirebase,
    TResult Function(UpdateCapitalCellWidthEvent value)? updateCapitalCellWidth,
    TResult Function(UpdateCapitalCellWidthInFirebaseEvent value)?
        updateCapitalCellWidthInFirebase,
    TResult Function(StartEditingCellsEvent value)? startEditingCells,
    TResult Function(CreateDiaryColumnEvent value)? createDiaryColumn,
    TResult Function(DeleteDiaryColumnEvent value)? deleteDiaryColumn,
    TResult Function(UpdateDiaryListSettingsEvent value)?
        updateDiaryListSettings,
    TResult Function(ShareThemeEvent value)? shareTheme,
    TResult Function(StartEditingColorEvent value)? startEditingColor,
    TResult Function(StartEditingBordersEvent value)? startEditingBorders,
    TResult Function(StartEditingBordersStyleEvent value)?
        startEditingBorderStyle,
    TResult Function(TurnBackEditingEvent value)? turnBackEditing,
    TResult Function(StartColumnDeletingEvent value)? startColumnDeleting,
    TResult Function(StartColorThemeEditingEvent value)? startColorThemeEditing,
    TResult Function(DeleteColumnsEvent value)? deleteColumns,
    TResult Function(LoadThemesEvent value)? loadThemes,
    TResult Function(LoadFromThemeEvent value)? loadFromTheme,
    TResult Function(TakeThemeEvent value)? takeTheme,
    required TResult orElse(),
  }) {
    if (selectDiaryCell != null) {
      return selectDiaryCell(this);
    }
    return orElse();
  }
}

abstract class SelectDiaryCellEvent implements DiaryListEvent {
  const factory SelectDiaryCellEvent({required final DiaryCell diaryCell}) =
      _$SelectDiaryCellEvent;

  DiaryCell get diaryCell;
  @JsonKey(ignore: true)
  _$$SelectDiaryCellEventCopyWith<_$SelectDiaryCellEvent> get copyWith =>
      throw _privateConstructorUsedError;
}

/// @nodoc
abstract class _$$SelectDiaryCellsEventCopyWith<$Res> {
  factory _$$SelectDiaryCellsEventCopyWith(_$SelectDiaryCellsEvent value,
          $Res Function(_$SelectDiaryCellsEvent) then) =
      __$$SelectDiaryCellsEventCopyWithImpl<$Res>;
  @useResult
  $Res call({List<DiaryCell> diaryCells});
}

/// @nodoc
class __$$SelectDiaryCellsEventCopyWithImpl<$Res>
    extends _$DiaryListEventCopyWithImpl<$Res, _$SelectDiaryCellsEvent>
    implements _$$SelectDiaryCellsEventCopyWith<$Res> {
  __$$SelectDiaryCellsEventCopyWithImpl(_$SelectDiaryCellsEvent _value,
      $Res Function(_$SelectDiaryCellsEvent) _then)
      : super(_value, _then);

  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? diaryCells = null,
  }) {
    return _then(_$SelectDiaryCellsEvent(
      diaryCells: null == diaryCells
          ? _value._diaryCells
          : diaryCells // ignore: cast_nullable_to_non_nullable
              as List<DiaryCell>,
    ));
  }
}

/// @nodoc

class _$SelectDiaryCellsEvent implements SelectDiaryCellsEvent {
  const _$SelectDiaryCellsEvent({required final List<DiaryCell> diaryCells})
      : _diaryCells = diaryCells;

  final List<DiaryCell> _diaryCells;
  @override
  List<DiaryCell> get diaryCells {
    if (_diaryCells is EqualUnmodifiableListView) return _diaryCells;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_diaryCells);
  }

  @override
  String toString() {
    return 'DiaryListEvent.selectDiaryCells(diaryCells: $diaryCells)';
  }

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$SelectDiaryCellsEvent &&
            const DeepCollectionEquality()
                .equals(other._diaryCells, _diaryCells));
  }

  @override
  int get hashCode => Object.hash(
      runtimeType, const DeepCollectionEquality().hash(_diaryCells));

  @JsonKey(ignore: true)
  @override
  @pragma('vm:prefer-inline')
  _$$SelectDiaryCellsEventCopyWith<_$SelectDiaryCellsEvent> get copyWith =>
      __$$SelectDiaryCellsEventCopyWithImpl<_$SelectDiaryCellsEvent>(
          this, _$identity);

  @override
  @optionalTypeArgs
  TResult when<TResult extends Object?>({
    required TResult Function() createSample,
    required TResult Function() initialLoad,
    required TResult Function(DateTime date, int delay) getDiaryList,
    required TResult Function(DiaryList diaryList, List<DiaryList> lists)
        getDiaryColumns,
    required TResult Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells,
            List<DiaryList> lists)
        getDiaryCells,
    required TResult Function(DiaryCell diaryCell) selectDiaryCell,
    required TResult Function(List<DiaryCell> diaryCells) selectDiaryCells,
    required TResult Function(CapitalCell capitalCell) selectCapitalCell,
    required TResult Function(
            DiaryCell diaryCell,
            GlobalObjectKey<State<StatefulWidget>> cellKey,
            DragUpdateDetails details,
            double scaleFactor)
        onPanUpdate,
    required TResult Function(DiaryList? selectedList) startEditingList,
    required TResult Function(
            String? newName, String? addedColumnName, int? addedColumnCount)
        returnToLoaded,
    required TResult Function() returnToCellsSelected,
    required TResult Function(DiaryList diaryList, String newName)
        updateDiaryListName,
    required TResult Function(DiaryCell diaryCell, String? textFieldText)
        changeDiaryCell,
    required TResult Function(CapitalCell capitalCell, String? textFieldText)
        changeCapitalCell,
    required TResult Function(DiaryCell diaryCell, String? textFieldText)
        updateDiaryCellInFirebase,
    required TResult Function(
            FontWeightEnum? fontWeight,
            TextDecorationEnum? textDecoration,
            FontStyleEnum? fontStyle,
            double? fontSize,
            String? color,
            HorizontalAlignmentsEnum? horizontalAlignment,
            VerticalAlignmentsEnum? verticalAlignment,
            String? backgroundColor)
        changeDiaryCellsSettings,
    required TResult Function(BordersEditingEnum bordersEditingEnum,
            BordersStyleEnum bordersStyleEnum, Color bordersColor)
        changeDiaryCellsBordersSettings,
    required TResult Function(
            FontWeightEnum? fontWeight,
            TextDecorationEnum? textDecoration,
            FontStyleEnum? fontStyle,
            double? fontSize,
            String? color,
            HorizontalAlignmentsEnum? horizontalAlignment,
            VerticalAlignmentsEnum? verticalAlignment,
            String? backgroundColor,
            BordersStyleEnum? bordersStyleEnum,
            Color? bordersColor)
        changeCapitalCellSettings,
    required TResult Function(
            DiaryCell diaryCell,
            int index,
            DiaryCellTextSettings? newTextSettings,
            DiaryCellSettings? newSettings)
        updateDiaryCellSettingsInFirebase,
    required TResult Function(DiaryColumnSettings newSettings)
        updateCapitalCellSettingsInFirebase,
    required TResult Function(PointerMoveEvent details) updateCapitalCellWidth,
    required TResult Function(PointerUpEvent details)
        updateCapitalCellWidthInFirebase,
    required TResult Function(bool isTextEditing) startEditingCells,
    required TResult Function(DiaryList diaryList, String name,
            int columnsCount, List<DiaryColumn> diaryColumns)
        createDiaryColumn,
    required TResult Function(DiaryList diaryList, String columnId)
        deleteDiaryColumn,
    required TResult Function(DiaryList diaryList, String? themeColor,
            String? themeBorderColor, String? themePanelBackgroundColor)
        updateDiaryListSettings,
    required TResult Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<DiaryCell> diaryCells,
            List<CapitalCell> capitalCells,
            String themeName,
            String description)
        shareTheme,
    required TResult Function() startEditingColor,
    required TResult Function() startEditingBorders,
    required TResult Function() startEditingBorderStyle,
    required TResult Function() turnBackEditing,
    required TResult Function() startColumnDeleting,
    required TResult Function() startColorThemeEditing,
    required TResult Function() deleteColumns,
    required TResult Function() loadThemes,
    required TResult Function(ListTheme listTheme) loadFromTheme,
    required TResult Function(ListTheme listTheme) takeTheme,
  }) {
    return selectDiaryCells(diaryCells);
  }

  @override
  @optionalTypeArgs
  TResult? whenOrNull<TResult extends Object?>({
    TResult? Function()? createSample,
    TResult? Function()? initialLoad,
    TResult? Function(DateTime date, int delay)? getDiaryList,
    TResult? Function(DiaryList diaryList, List<DiaryList> lists)?
        getDiaryColumns,
    TResult? Function(DiaryList diaryList, List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells, List<DiaryList> lists)?
        getDiaryCells,
    TResult? Function(DiaryCell diaryCell)? selectDiaryCell,
    TResult? Function(List<DiaryCell> diaryCells)? selectDiaryCells,
    TResult? Function(CapitalCell capitalCell)? selectCapitalCell,
    TResult? Function(
            DiaryCell diaryCell,
            GlobalObjectKey<State<StatefulWidget>> cellKey,
            DragUpdateDetails details,
            double scaleFactor)?
        onPanUpdate,
    TResult? Function(DiaryList? selectedList)? startEditingList,
    TResult? Function(
            String? newName, String? addedColumnName, int? addedColumnCount)?
        returnToLoaded,
    TResult? Function()? returnToCellsSelected,
    TResult? Function(DiaryList diaryList, String newName)? updateDiaryListName,
    TResult? Function(DiaryCell diaryCell, String? textFieldText)?
        changeDiaryCell,
    TResult? Function(CapitalCell capitalCell, String? textFieldText)?
        changeCapitalCell,
    TResult? Function(DiaryCell diaryCell, String? textFieldText)?
        updateDiaryCellInFirebase,
    TResult? Function(
            FontWeightEnum? fontWeight,
            TextDecorationEnum? textDecoration,
            FontStyleEnum? fontStyle,
            double? fontSize,
            String? color,
            HorizontalAlignmentsEnum? horizontalAlignment,
            VerticalAlignmentsEnum? verticalAlignment,
            String? backgroundColor)?
        changeDiaryCellsSettings,
    TResult? Function(BordersEditingEnum bordersEditingEnum,
            BordersStyleEnum bordersStyleEnum, Color bordersColor)?
        changeDiaryCellsBordersSettings,
    TResult? Function(
            FontWeightEnum? fontWeight,
            TextDecorationEnum? textDecoration,
            FontStyleEnum? fontStyle,
            double? fontSize,
            String? color,
            HorizontalAlignmentsEnum? horizontalAlignment,
            VerticalAlignmentsEnum? verticalAlignment,
            String? backgroundColor,
            BordersStyleEnum? bordersStyleEnum,
            Color? bordersColor)?
        changeCapitalCellSettings,
    TResult? Function(
            DiaryCell diaryCell,
            int index,
            DiaryCellTextSettings? newTextSettings,
            DiaryCellSettings? newSettings)?
        updateDiaryCellSettingsInFirebase,
    TResult? Function(DiaryColumnSettings newSettings)?
        updateCapitalCellSettingsInFirebase,
    TResult? Function(PointerMoveEvent details)? updateCapitalCellWidth,
    TResult? Function(PointerUpEvent details)? updateCapitalCellWidthInFirebase,
    TResult? Function(bool isTextEditing)? startEditingCells,
    TResult? Function(DiaryList diaryList, String name, int columnsCount,
            List<DiaryColumn> diaryColumns)?
        createDiaryColumn,
    TResult? Function(DiaryList diaryList, String columnId)? deleteDiaryColumn,
    TResult? Function(DiaryList diaryList, String? themeColor,
            String? themeBorderColor, String? themePanelBackgroundColor)?
        updateDiaryListSettings,
    TResult? Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<DiaryCell> diaryCells,
            List<CapitalCell> capitalCells,
            String themeName,
            String description)?
        shareTheme,
    TResult? Function()? startEditingColor,
    TResult? Function()? startEditingBorders,
    TResult? Function()? startEditingBorderStyle,
    TResult? Function()? turnBackEditing,
    TResult? Function()? startColumnDeleting,
    TResult? Function()? startColorThemeEditing,
    TResult? Function()? deleteColumns,
    TResult? Function()? loadThemes,
    TResult? Function(ListTheme listTheme)? loadFromTheme,
    TResult? Function(ListTheme listTheme)? takeTheme,
  }) {
    return selectDiaryCells?.call(diaryCells);
  }

  @override
  @optionalTypeArgs
  TResult maybeWhen<TResult extends Object?>({
    TResult Function()? createSample,
    TResult Function()? initialLoad,
    TResult Function(DateTime date, int delay)? getDiaryList,
    TResult Function(DiaryList diaryList, List<DiaryList> lists)?
        getDiaryColumns,
    TResult Function(DiaryList diaryList, List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells, List<DiaryList> lists)?
        getDiaryCells,
    TResult Function(DiaryCell diaryCell)? selectDiaryCell,
    TResult Function(List<DiaryCell> diaryCells)? selectDiaryCells,
    TResult Function(CapitalCell capitalCell)? selectCapitalCell,
    TResult Function(
            DiaryCell diaryCell,
            GlobalObjectKey<State<StatefulWidget>> cellKey,
            DragUpdateDetails details,
            double scaleFactor)?
        onPanUpdate,
    TResult Function(DiaryList? selectedList)? startEditingList,
    TResult Function(
            String? newName, String? addedColumnName, int? addedColumnCount)?
        returnToLoaded,
    TResult Function()? returnToCellsSelected,
    TResult Function(DiaryList diaryList, String newName)? updateDiaryListName,
    TResult Function(DiaryCell diaryCell, String? textFieldText)?
        changeDiaryCell,
    TResult Function(CapitalCell capitalCell, String? textFieldText)?
        changeCapitalCell,
    TResult Function(DiaryCell diaryCell, String? textFieldText)?
        updateDiaryCellInFirebase,
    TResult Function(
            FontWeightEnum? fontWeight,
            TextDecorationEnum? textDecoration,
            FontStyleEnum? fontStyle,
            double? fontSize,
            String? color,
            HorizontalAlignmentsEnum? horizontalAlignment,
            VerticalAlignmentsEnum? verticalAlignment,
            String? backgroundColor)?
        changeDiaryCellsSettings,
    TResult Function(BordersEditingEnum bordersEditingEnum,
            BordersStyleEnum bordersStyleEnum, Color bordersColor)?
        changeDiaryCellsBordersSettings,
    TResult Function(
            FontWeightEnum? fontWeight,
            TextDecorationEnum? textDecoration,
            FontStyleEnum? fontStyle,
            double? fontSize,
            String? color,
            HorizontalAlignmentsEnum? horizontalAlignment,
            VerticalAlignmentsEnum? verticalAlignment,
            String? backgroundColor,
            BordersStyleEnum? bordersStyleEnum,
            Color? bordersColor)?
        changeCapitalCellSettings,
    TResult Function(
            DiaryCell diaryCell,
            int index,
            DiaryCellTextSettings? newTextSettings,
            DiaryCellSettings? newSettings)?
        updateDiaryCellSettingsInFirebase,
    TResult Function(DiaryColumnSettings newSettings)?
        updateCapitalCellSettingsInFirebase,
    TResult Function(PointerMoveEvent details)? updateCapitalCellWidth,
    TResult Function(PointerUpEvent details)? updateCapitalCellWidthInFirebase,
    TResult Function(bool isTextEditing)? startEditingCells,
    TResult Function(DiaryList diaryList, String name, int columnsCount,
            List<DiaryColumn> diaryColumns)?
        createDiaryColumn,
    TResult Function(DiaryList diaryList, String columnId)? deleteDiaryColumn,
    TResult Function(DiaryList diaryList, String? themeColor,
            String? themeBorderColor, String? themePanelBackgroundColor)?
        updateDiaryListSettings,
    TResult Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<DiaryCell> diaryCells,
            List<CapitalCell> capitalCells,
            String themeName,
            String description)?
        shareTheme,
    TResult Function()? startEditingColor,
    TResult Function()? startEditingBorders,
    TResult Function()? startEditingBorderStyle,
    TResult Function()? turnBackEditing,
    TResult Function()? startColumnDeleting,
    TResult Function()? startColorThemeEditing,
    TResult Function()? deleteColumns,
    TResult Function()? loadThemes,
    TResult Function(ListTheme listTheme)? loadFromTheme,
    TResult Function(ListTheme listTheme)? takeTheme,
    required TResult orElse(),
  }) {
    if (selectDiaryCells != null) {
      return selectDiaryCells(diaryCells);
    }
    return orElse();
  }

  @override
  @optionalTypeArgs
  TResult map<TResult extends Object?>({
    required TResult Function(CreateSampleEvent value) createSample,
    required TResult Function(InitialLoadEvent value) initialLoad,
    required TResult Function(GetDiaryListEvent value) getDiaryList,
    required TResult Function(GetDiaryColumnsEvent value) getDiaryColumns,
    required TResult Function(GetDiaryCellsEvent value) getDiaryCells,
    required TResult Function(SelectDiaryCellEvent value) selectDiaryCell,
    required TResult Function(SelectDiaryCellsEvent value) selectDiaryCells,
    required TResult Function(SelectCapitalCellEvent value) selectCapitalCell,
    required TResult Function(OnPanUpdateEvent value) onPanUpdate,
    required TResult Function(StartEditingListEvent value) startEditingList,
    required TResult Function(ReturnToLoadedEvent value) returnToLoaded,
    required TResult Function(ReturnToCellsSelectedEvent value)
        returnToCellsSelected,
    required TResult Function(UpdateDiaryListNameEvent value)
        updateDiaryListName,
    required TResult Function(ChangeDiaryCellEvent value) changeDiaryCell,
    required TResult Function(ChangeCapitalCellEvent value) changeCapitalCell,
    required TResult Function(UpdateDiaryCellInFirebaseEvent value)
        updateDiaryCellInFirebase,
    required TResult Function(ChangeDiaryCellsSettingsEvent value)
        changeDiaryCellsSettings,
    required TResult Function(ChangeDiaryCellsBordersSettingsEvent value)
        changeDiaryCellsBordersSettings,
    required TResult Function(ChangeCapitalCellSettingsEvent value)
        changeCapitalCellSettings,
    required TResult Function(UpdateDiaryCellSettingsInFirebaseEvent value)
        updateDiaryCellSettingsInFirebase,
    required TResult Function(UpdateCapitalCellSettingsInFirebaseEvent value)
        updateCapitalCellSettingsInFirebase,
    required TResult Function(UpdateCapitalCellWidthEvent value)
        updateCapitalCellWidth,
    required TResult Function(UpdateCapitalCellWidthInFirebaseEvent value)
        updateCapitalCellWidthInFirebase,
    required TResult Function(StartEditingCellsEvent value) startEditingCells,
    required TResult Function(CreateDiaryColumnEvent value) createDiaryColumn,
    required TResult Function(DeleteDiaryColumnEvent value) deleteDiaryColumn,
    required TResult Function(UpdateDiaryListSettingsEvent value)
        updateDiaryListSettings,
    required TResult Function(ShareThemeEvent value) shareTheme,
    required TResult Function(StartEditingColorEvent value) startEditingColor,
    required TResult Function(StartEditingBordersEvent value)
        startEditingBorders,
    required TResult Function(StartEditingBordersStyleEvent value)
        startEditingBorderStyle,
    required TResult Function(TurnBackEditingEvent value) turnBackEditing,
    required TResult Function(StartColumnDeletingEvent value)
        startColumnDeleting,
    required TResult Function(StartColorThemeEditingEvent value)
        startColorThemeEditing,
    required TResult Function(DeleteColumnsEvent value) deleteColumns,
    required TResult Function(LoadThemesEvent value) loadThemes,
    required TResult Function(LoadFromThemeEvent value) loadFromTheme,
    required TResult Function(TakeThemeEvent value) takeTheme,
  }) {
    return selectDiaryCells(this);
  }

  @override
  @optionalTypeArgs
  TResult? mapOrNull<TResult extends Object?>({
    TResult? Function(CreateSampleEvent value)? createSample,
    TResult? Function(InitialLoadEvent value)? initialLoad,
    TResult? Function(GetDiaryListEvent value)? getDiaryList,
    TResult? Function(GetDiaryColumnsEvent value)? getDiaryColumns,
    TResult? Function(GetDiaryCellsEvent value)? getDiaryCells,
    TResult? Function(SelectDiaryCellEvent value)? selectDiaryCell,
    TResult? Function(SelectDiaryCellsEvent value)? selectDiaryCells,
    TResult? Function(SelectCapitalCellEvent value)? selectCapitalCell,
    TResult? Function(OnPanUpdateEvent value)? onPanUpdate,
    TResult? Function(StartEditingListEvent value)? startEditingList,
    TResult? Function(ReturnToLoadedEvent value)? returnToLoaded,
    TResult? Function(ReturnToCellsSelectedEvent value)? returnToCellsSelected,
    TResult? Function(UpdateDiaryListNameEvent value)? updateDiaryListName,
    TResult? Function(ChangeDiaryCellEvent value)? changeDiaryCell,
    TResult? Function(ChangeCapitalCellEvent value)? changeCapitalCell,
    TResult? Function(UpdateDiaryCellInFirebaseEvent value)?
        updateDiaryCellInFirebase,
    TResult? Function(ChangeDiaryCellsSettingsEvent value)?
        changeDiaryCellsSettings,
    TResult? Function(ChangeDiaryCellsBordersSettingsEvent value)?
        changeDiaryCellsBordersSettings,
    TResult? Function(ChangeCapitalCellSettingsEvent value)?
        changeCapitalCellSettings,
    TResult? Function(UpdateDiaryCellSettingsInFirebaseEvent value)?
        updateDiaryCellSettingsInFirebase,
    TResult? Function(UpdateCapitalCellSettingsInFirebaseEvent value)?
        updateCapitalCellSettingsInFirebase,
    TResult? Function(UpdateCapitalCellWidthEvent value)?
        updateCapitalCellWidth,
    TResult? Function(UpdateCapitalCellWidthInFirebaseEvent value)?
        updateCapitalCellWidthInFirebase,
    TResult? Function(StartEditingCellsEvent value)? startEditingCells,
    TResult? Function(CreateDiaryColumnEvent value)? createDiaryColumn,
    TResult? Function(DeleteDiaryColumnEvent value)? deleteDiaryColumn,
    TResult? Function(UpdateDiaryListSettingsEvent value)?
        updateDiaryListSettings,
    TResult? Function(ShareThemeEvent value)? shareTheme,
    TResult? Function(StartEditingColorEvent value)? startEditingColor,
    TResult? Function(StartEditingBordersEvent value)? startEditingBorders,
    TResult? Function(StartEditingBordersStyleEvent value)?
        startEditingBorderStyle,
    TResult? Function(TurnBackEditingEvent value)? turnBackEditing,
    TResult? Function(StartColumnDeletingEvent value)? startColumnDeleting,
    TResult? Function(StartColorThemeEditingEvent value)?
        startColorThemeEditing,
    TResult? Function(DeleteColumnsEvent value)? deleteColumns,
    TResult? Function(LoadThemesEvent value)? loadThemes,
    TResult? Function(LoadFromThemeEvent value)? loadFromTheme,
    TResult? Function(TakeThemeEvent value)? takeTheme,
  }) {
    return selectDiaryCells?.call(this);
  }

  @override
  @optionalTypeArgs
  TResult maybeMap<TResult extends Object?>({
    TResult Function(CreateSampleEvent value)? createSample,
    TResult Function(InitialLoadEvent value)? initialLoad,
    TResult Function(GetDiaryListEvent value)? getDiaryList,
    TResult Function(GetDiaryColumnsEvent value)? getDiaryColumns,
    TResult Function(GetDiaryCellsEvent value)? getDiaryCells,
    TResult Function(SelectDiaryCellEvent value)? selectDiaryCell,
    TResult Function(SelectDiaryCellsEvent value)? selectDiaryCells,
    TResult Function(SelectCapitalCellEvent value)? selectCapitalCell,
    TResult Function(OnPanUpdateEvent value)? onPanUpdate,
    TResult Function(StartEditingListEvent value)? startEditingList,
    TResult Function(ReturnToLoadedEvent value)? returnToLoaded,
    TResult Function(ReturnToCellsSelectedEvent value)? returnToCellsSelected,
    TResult Function(UpdateDiaryListNameEvent value)? updateDiaryListName,
    TResult Function(ChangeDiaryCellEvent value)? changeDiaryCell,
    TResult Function(ChangeCapitalCellEvent value)? changeCapitalCell,
    TResult Function(UpdateDiaryCellInFirebaseEvent value)?
        updateDiaryCellInFirebase,
    TResult Function(ChangeDiaryCellsSettingsEvent value)?
        changeDiaryCellsSettings,
    TResult Function(ChangeDiaryCellsBordersSettingsEvent value)?
        changeDiaryCellsBordersSettings,
    TResult Function(ChangeCapitalCellSettingsEvent value)?
        changeCapitalCellSettings,
    TResult Function(UpdateDiaryCellSettingsInFirebaseEvent value)?
        updateDiaryCellSettingsInFirebase,
    TResult Function(UpdateCapitalCellSettingsInFirebaseEvent value)?
        updateCapitalCellSettingsInFirebase,
    TResult Function(UpdateCapitalCellWidthEvent value)? updateCapitalCellWidth,
    TResult Function(UpdateCapitalCellWidthInFirebaseEvent value)?
        updateCapitalCellWidthInFirebase,
    TResult Function(StartEditingCellsEvent value)? startEditingCells,
    TResult Function(CreateDiaryColumnEvent value)? createDiaryColumn,
    TResult Function(DeleteDiaryColumnEvent value)? deleteDiaryColumn,
    TResult Function(UpdateDiaryListSettingsEvent value)?
        updateDiaryListSettings,
    TResult Function(ShareThemeEvent value)? shareTheme,
    TResult Function(StartEditingColorEvent value)? startEditingColor,
    TResult Function(StartEditingBordersEvent value)? startEditingBorders,
    TResult Function(StartEditingBordersStyleEvent value)?
        startEditingBorderStyle,
    TResult Function(TurnBackEditingEvent value)? turnBackEditing,
    TResult Function(StartColumnDeletingEvent value)? startColumnDeleting,
    TResult Function(StartColorThemeEditingEvent value)? startColorThemeEditing,
    TResult Function(DeleteColumnsEvent value)? deleteColumns,
    TResult Function(LoadThemesEvent value)? loadThemes,
    TResult Function(LoadFromThemeEvent value)? loadFromTheme,
    TResult Function(TakeThemeEvent value)? takeTheme,
    required TResult orElse(),
  }) {
    if (selectDiaryCells != null) {
      return selectDiaryCells(this);
    }
    return orElse();
  }
}

abstract class SelectDiaryCellsEvent implements DiaryListEvent {
  const factory SelectDiaryCellsEvent(
      {required final List<DiaryCell> diaryCells}) = _$SelectDiaryCellsEvent;

  List<DiaryCell> get diaryCells;
  @JsonKey(ignore: true)
  _$$SelectDiaryCellsEventCopyWith<_$SelectDiaryCellsEvent> get copyWith =>
      throw _privateConstructorUsedError;
}

/// @nodoc
abstract class _$$SelectCapitalCellEventCopyWith<$Res> {
  factory _$$SelectCapitalCellEventCopyWith(_$SelectCapitalCellEvent value,
          $Res Function(_$SelectCapitalCellEvent) then) =
      __$$SelectCapitalCellEventCopyWithImpl<$Res>;
  @useResult
  $Res call({CapitalCell capitalCell});
}

/// @nodoc
class __$$SelectCapitalCellEventCopyWithImpl<$Res>
    extends _$DiaryListEventCopyWithImpl<$Res, _$SelectCapitalCellEvent>
    implements _$$SelectCapitalCellEventCopyWith<$Res> {
  __$$SelectCapitalCellEventCopyWithImpl(_$SelectCapitalCellEvent _value,
      $Res Function(_$SelectCapitalCellEvent) _then)
      : super(_value, _then);

  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? capitalCell = null,
  }) {
    return _then(_$SelectCapitalCellEvent(
      capitalCell: null == capitalCell
          ? _value.capitalCell
          : capitalCell // ignore: cast_nullable_to_non_nullable
              as CapitalCell,
    ));
  }
}

/// @nodoc

class _$SelectCapitalCellEvent implements SelectCapitalCellEvent {
  const _$SelectCapitalCellEvent({required this.capitalCell});

  @override
  final CapitalCell capitalCell;

  @override
  String toString() {
    return 'DiaryListEvent.selectCapitalCell(capitalCell: $capitalCell)';
  }

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$SelectCapitalCellEvent &&
            (identical(other.capitalCell, capitalCell) ||
                other.capitalCell == capitalCell));
  }

  @override
  int get hashCode => Object.hash(runtimeType, capitalCell);

  @JsonKey(ignore: true)
  @override
  @pragma('vm:prefer-inline')
  _$$SelectCapitalCellEventCopyWith<_$SelectCapitalCellEvent> get copyWith =>
      __$$SelectCapitalCellEventCopyWithImpl<_$SelectCapitalCellEvent>(
          this, _$identity);

  @override
  @optionalTypeArgs
  TResult when<TResult extends Object?>({
    required TResult Function() createSample,
    required TResult Function() initialLoad,
    required TResult Function(DateTime date, int delay) getDiaryList,
    required TResult Function(DiaryList diaryList, List<DiaryList> lists)
        getDiaryColumns,
    required TResult Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells,
            List<DiaryList> lists)
        getDiaryCells,
    required TResult Function(DiaryCell diaryCell) selectDiaryCell,
    required TResult Function(List<DiaryCell> diaryCells) selectDiaryCells,
    required TResult Function(CapitalCell capitalCell) selectCapitalCell,
    required TResult Function(
            DiaryCell diaryCell,
            GlobalObjectKey<State<StatefulWidget>> cellKey,
            DragUpdateDetails details,
            double scaleFactor)
        onPanUpdate,
    required TResult Function(DiaryList? selectedList) startEditingList,
    required TResult Function(
            String? newName, String? addedColumnName, int? addedColumnCount)
        returnToLoaded,
    required TResult Function() returnToCellsSelected,
    required TResult Function(DiaryList diaryList, String newName)
        updateDiaryListName,
    required TResult Function(DiaryCell diaryCell, String? textFieldText)
        changeDiaryCell,
    required TResult Function(CapitalCell capitalCell, String? textFieldText)
        changeCapitalCell,
    required TResult Function(DiaryCell diaryCell, String? textFieldText)
        updateDiaryCellInFirebase,
    required TResult Function(
            FontWeightEnum? fontWeight,
            TextDecorationEnum? textDecoration,
            FontStyleEnum? fontStyle,
            double? fontSize,
            String? color,
            HorizontalAlignmentsEnum? horizontalAlignment,
            VerticalAlignmentsEnum? verticalAlignment,
            String? backgroundColor)
        changeDiaryCellsSettings,
    required TResult Function(BordersEditingEnum bordersEditingEnum,
            BordersStyleEnum bordersStyleEnum, Color bordersColor)
        changeDiaryCellsBordersSettings,
    required TResult Function(
            FontWeightEnum? fontWeight,
            TextDecorationEnum? textDecoration,
            FontStyleEnum? fontStyle,
            double? fontSize,
            String? color,
            HorizontalAlignmentsEnum? horizontalAlignment,
            VerticalAlignmentsEnum? verticalAlignment,
            String? backgroundColor,
            BordersStyleEnum? bordersStyleEnum,
            Color? bordersColor)
        changeCapitalCellSettings,
    required TResult Function(
            DiaryCell diaryCell,
            int index,
            DiaryCellTextSettings? newTextSettings,
            DiaryCellSettings? newSettings)
        updateDiaryCellSettingsInFirebase,
    required TResult Function(DiaryColumnSettings newSettings)
        updateCapitalCellSettingsInFirebase,
    required TResult Function(PointerMoveEvent details) updateCapitalCellWidth,
    required TResult Function(PointerUpEvent details)
        updateCapitalCellWidthInFirebase,
    required TResult Function(bool isTextEditing) startEditingCells,
    required TResult Function(DiaryList diaryList, String name,
            int columnsCount, List<DiaryColumn> diaryColumns)
        createDiaryColumn,
    required TResult Function(DiaryList diaryList, String columnId)
        deleteDiaryColumn,
    required TResult Function(DiaryList diaryList, String? themeColor,
            String? themeBorderColor, String? themePanelBackgroundColor)
        updateDiaryListSettings,
    required TResult Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<DiaryCell> diaryCells,
            List<CapitalCell> capitalCells,
            String themeName,
            String description)
        shareTheme,
    required TResult Function() startEditingColor,
    required TResult Function() startEditingBorders,
    required TResult Function() startEditingBorderStyle,
    required TResult Function() turnBackEditing,
    required TResult Function() startColumnDeleting,
    required TResult Function() startColorThemeEditing,
    required TResult Function() deleteColumns,
    required TResult Function() loadThemes,
    required TResult Function(ListTheme listTheme) loadFromTheme,
    required TResult Function(ListTheme listTheme) takeTheme,
  }) {
    return selectCapitalCell(capitalCell);
  }

  @override
  @optionalTypeArgs
  TResult? whenOrNull<TResult extends Object?>({
    TResult? Function()? createSample,
    TResult? Function()? initialLoad,
    TResult? Function(DateTime date, int delay)? getDiaryList,
    TResult? Function(DiaryList diaryList, List<DiaryList> lists)?
        getDiaryColumns,
    TResult? Function(DiaryList diaryList, List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells, List<DiaryList> lists)?
        getDiaryCells,
    TResult? Function(DiaryCell diaryCell)? selectDiaryCell,
    TResult? Function(List<DiaryCell> diaryCells)? selectDiaryCells,
    TResult? Function(CapitalCell capitalCell)? selectCapitalCell,
    TResult? Function(
            DiaryCell diaryCell,
            GlobalObjectKey<State<StatefulWidget>> cellKey,
            DragUpdateDetails details,
            double scaleFactor)?
        onPanUpdate,
    TResult? Function(DiaryList? selectedList)? startEditingList,
    TResult? Function(
            String? newName, String? addedColumnName, int? addedColumnCount)?
        returnToLoaded,
    TResult? Function()? returnToCellsSelected,
    TResult? Function(DiaryList diaryList, String newName)? updateDiaryListName,
    TResult? Function(DiaryCell diaryCell, String? textFieldText)?
        changeDiaryCell,
    TResult? Function(CapitalCell capitalCell, String? textFieldText)?
        changeCapitalCell,
    TResult? Function(DiaryCell diaryCell, String? textFieldText)?
        updateDiaryCellInFirebase,
    TResult? Function(
            FontWeightEnum? fontWeight,
            TextDecorationEnum? textDecoration,
            FontStyleEnum? fontStyle,
            double? fontSize,
            String? color,
            HorizontalAlignmentsEnum? horizontalAlignment,
            VerticalAlignmentsEnum? verticalAlignment,
            String? backgroundColor)?
        changeDiaryCellsSettings,
    TResult? Function(BordersEditingEnum bordersEditingEnum,
            BordersStyleEnum bordersStyleEnum, Color bordersColor)?
        changeDiaryCellsBordersSettings,
    TResult? Function(
            FontWeightEnum? fontWeight,
            TextDecorationEnum? textDecoration,
            FontStyleEnum? fontStyle,
            double? fontSize,
            String? color,
            HorizontalAlignmentsEnum? horizontalAlignment,
            VerticalAlignmentsEnum? verticalAlignment,
            String? backgroundColor,
            BordersStyleEnum? bordersStyleEnum,
            Color? bordersColor)?
        changeCapitalCellSettings,
    TResult? Function(
            DiaryCell diaryCell,
            int index,
            DiaryCellTextSettings? newTextSettings,
            DiaryCellSettings? newSettings)?
        updateDiaryCellSettingsInFirebase,
    TResult? Function(DiaryColumnSettings newSettings)?
        updateCapitalCellSettingsInFirebase,
    TResult? Function(PointerMoveEvent details)? updateCapitalCellWidth,
    TResult? Function(PointerUpEvent details)? updateCapitalCellWidthInFirebase,
    TResult? Function(bool isTextEditing)? startEditingCells,
    TResult? Function(DiaryList diaryList, String name, int columnsCount,
            List<DiaryColumn> diaryColumns)?
        createDiaryColumn,
    TResult? Function(DiaryList diaryList, String columnId)? deleteDiaryColumn,
    TResult? Function(DiaryList diaryList, String? themeColor,
            String? themeBorderColor, String? themePanelBackgroundColor)?
        updateDiaryListSettings,
    TResult? Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<DiaryCell> diaryCells,
            List<CapitalCell> capitalCells,
            String themeName,
            String description)?
        shareTheme,
    TResult? Function()? startEditingColor,
    TResult? Function()? startEditingBorders,
    TResult? Function()? startEditingBorderStyle,
    TResult? Function()? turnBackEditing,
    TResult? Function()? startColumnDeleting,
    TResult? Function()? startColorThemeEditing,
    TResult? Function()? deleteColumns,
    TResult? Function()? loadThemes,
    TResult? Function(ListTheme listTheme)? loadFromTheme,
    TResult? Function(ListTheme listTheme)? takeTheme,
  }) {
    return selectCapitalCell?.call(capitalCell);
  }

  @override
  @optionalTypeArgs
  TResult maybeWhen<TResult extends Object?>({
    TResult Function()? createSample,
    TResult Function()? initialLoad,
    TResult Function(DateTime date, int delay)? getDiaryList,
    TResult Function(DiaryList diaryList, List<DiaryList> lists)?
        getDiaryColumns,
    TResult Function(DiaryList diaryList, List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells, List<DiaryList> lists)?
        getDiaryCells,
    TResult Function(DiaryCell diaryCell)? selectDiaryCell,
    TResult Function(List<DiaryCell> diaryCells)? selectDiaryCells,
    TResult Function(CapitalCell capitalCell)? selectCapitalCell,
    TResult Function(
            DiaryCell diaryCell,
            GlobalObjectKey<State<StatefulWidget>> cellKey,
            DragUpdateDetails details,
            double scaleFactor)?
        onPanUpdate,
    TResult Function(DiaryList? selectedList)? startEditingList,
    TResult Function(
            String? newName, String? addedColumnName, int? addedColumnCount)?
        returnToLoaded,
    TResult Function()? returnToCellsSelected,
    TResult Function(DiaryList diaryList, String newName)? updateDiaryListName,
    TResult Function(DiaryCell diaryCell, String? textFieldText)?
        changeDiaryCell,
    TResult Function(CapitalCell capitalCell, String? textFieldText)?
        changeCapitalCell,
    TResult Function(DiaryCell diaryCell, String? textFieldText)?
        updateDiaryCellInFirebase,
    TResult Function(
            FontWeightEnum? fontWeight,
            TextDecorationEnum? textDecoration,
            FontStyleEnum? fontStyle,
            double? fontSize,
            String? color,
            HorizontalAlignmentsEnum? horizontalAlignment,
            VerticalAlignmentsEnum? verticalAlignment,
            String? backgroundColor)?
        changeDiaryCellsSettings,
    TResult Function(BordersEditingEnum bordersEditingEnum,
            BordersStyleEnum bordersStyleEnum, Color bordersColor)?
        changeDiaryCellsBordersSettings,
    TResult Function(
            FontWeightEnum? fontWeight,
            TextDecorationEnum? textDecoration,
            FontStyleEnum? fontStyle,
            double? fontSize,
            String? color,
            HorizontalAlignmentsEnum? horizontalAlignment,
            VerticalAlignmentsEnum? verticalAlignment,
            String? backgroundColor,
            BordersStyleEnum? bordersStyleEnum,
            Color? bordersColor)?
        changeCapitalCellSettings,
    TResult Function(
            DiaryCell diaryCell,
            int index,
            DiaryCellTextSettings? newTextSettings,
            DiaryCellSettings? newSettings)?
        updateDiaryCellSettingsInFirebase,
    TResult Function(DiaryColumnSettings newSettings)?
        updateCapitalCellSettingsInFirebase,
    TResult Function(PointerMoveEvent details)? updateCapitalCellWidth,
    TResult Function(PointerUpEvent details)? updateCapitalCellWidthInFirebase,
    TResult Function(bool isTextEditing)? startEditingCells,
    TResult Function(DiaryList diaryList, String name, int columnsCount,
            List<DiaryColumn> diaryColumns)?
        createDiaryColumn,
    TResult Function(DiaryList diaryList, String columnId)? deleteDiaryColumn,
    TResult Function(DiaryList diaryList, String? themeColor,
            String? themeBorderColor, String? themePanelBackgroundColor)?
        updateDiaryListSettings,
    TResult Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<DiaryCell> diaryCells,
            List<CapitalCell> capitalCells,
            String themeName,
            String description)?
        shareTheme,
    TResult Function()? startEditingColor,
    TResult Function()? startEditingBorders,
    TResult Function()? startEditingBorderStyle,
    TResult Function()? turnBackEditing,
    TResult Function()? startColumnDeleting,
    TResult Function()? startColorThemeEditing,
    TResult Function()? deleteColumns,
    TResult Function()? loadThemes,
    TResult Function(ListTheme listTheme)? loadFromTheme,
    TResult Function(ListTheme listTheme)? takeTheme,
    required TResult orElse(),
  }) {
    if (selectCapitalCell != null) {
      return selectCapitalCell(capitalCell);
    }
    return orElse();
  }

  @override
  @optionalTypeArgs
  TResult map<TResult extends Object?>({
    required TResult Function(CreateSampleEvent value) createSample,
    required TResult Function(InitialLoadEvent value) initialLoad,
    required TResult Function(GetDiaryListEvent value) getDiaryList,
    required TResult Function(GetDiaryColumnsEvent value) getDiaryColumns,
    required TResult Function(GetDiaryCellsEvent value) getDiaryCells,
    required TResult Function(SelectDiaryCellEvent value) selectDiaryCell,
    required TResult Function(SelectDiaryCellsEvent value) selectDiaryCells,
    required TResult Function(SelectCapitalCellEvent value) selectCapitalCell,
    required TResult Function(OnPanUpdateEvent value) onPanUpdate,
    required TResult Function(StartEditingListEvent value) startEditingList,
    required TResult Function(ReturnToLoadedEvent value) returnToLoaded,
    required TResult Function(ReturnToCellsSelectedEvent value)
        returnToCellsSelected,
    required TResult Function(UpdateDiaryListNameEvent value)
        updateDiaryListName,
    required TResult Function(ChangeDiaryCellEvent value) changeDiaryCell,
    required TResult Function(ChangeCapitalCellEvent value) changeCapitalCell,
    required TResult Function(UpdateDiaryCellInFirebaseEvent value)
        updateDiaryCellInFirebase,
    required TResult Function(ChangeDiaryCellsSettingsEvent value)
        changeDiaryCellsSettings,
    required TResult Function(ChangeDiaryCellsBordersSettingsEvent value)
        changeDiaryCellsBordersSettings,
    required TResult Function(ChangeCapitalCellSettingsEvent value)
        changeCapitalCellSettings,
    required TResult Function(UpdateDiaryCellSettingsInFirebaseEvent value)
        updateDiaryCellSettingsInFirebase,
    required TResult Function(UpdateCapitalCellSettingsInFirebaseEvent value)
        updateCapitalCellSettingsInFirebase,
    required TResult Function(UpdateCapitalCellWidthEvent value)
        updateCapitalCellWidth,
    required TResult Function(UpdateCapitalCellWidthInFirebaseEvent value)
        updateCapitalCellWidthInFirebase,
    required TResult Function(StartEditingCellsEvent value) startEditingCells,
    required TResult Function(CreateDiaryColumnEvent value) createDiaryColumn,
    required TResult Function(DeleteDiaryColumnEvent value) deleteDiaryColumn,
    required TResult Function(UpdateDiaryListSettingsEvent value)
        updateDiaryListSettings,
    required TResult Function(ShareThemeEvent value) shareTheme,
    required TResult Function(StartEditingColorEvent value) startEditingColor,
    required TResult Function(StartEditingBordersEvent value)
        startEditingBorders,
    required TResult Function(StartEditingBordersStyleEvent value)
        startEditingBorderStyle,
    required TResult Function(TurnBackEditingEvent value) turnBackEditing,
    required TResult Function(StartColumnDeletingEvent value)
        startColumnDeleting,
    required TResult Function(StartColorThemeEditingEvent value)
        startColorThemeEditing,
    required TResult Function(DeleteColumnsEvent value) deleteColumns,
    required TResult Function(LoadThemesEvent value) loadThemes,
    required TResult Function(LoadFromThemeEvent value) loadFromTheme,
    required TResult Function(TakeThemeEvent value) takeTheme,
  }) {
    return selectCapitalCell(this);
  }

  @override
  @optionalTypeArgs
  TResult? mapOrNull<TResult extends Object?>({
    TResult? Function(CreateSampleEvent value)? createSample,
    TResult? Function(InitialLoadEvent value)? initialLoad,
    TResult? Function(GetDiaryListEvent value)? getDiaryList,
    TResult? Function(GetDiaryColumnsEvent value)? getDiaryColumns,
    TResult? Function(GetDiaryCellsEvent value)? getDiaryCells,
    TResult? Function(SelectDiaryCellEvent value)? selectDiaryCell,
    TResult? Function(SelectDiaryCellsEvent value)? selectDiaryCells,
    TResult? Function(SelectCapitalCellEvent value)? selectCapitalCell,
    TResult? Function(OnPanUpdateEvent value)? onPanUpdate,
    TResult? Function(StartEditingListEvent value)? startEditingList,
    TResult? Function(ReturnToLoadedEvent value)? returnToLoaded,
    TResult? Function(ReturnToCellsSelectedEvent value)? returnToCellsSelected,
    TResult? Function(UpdateDiaryListNameEvent value)? updateDiaryListName,
    TResult? Function(ChangeDiaryCellEvent value)? changeDiaryCell,
    TResult? Function(ChangeCapitalCellEvent value)? changeCapitalCell,
    TResult? Function(UpdateDiaryCellInFirebaseEvent value)?
        updateDiaryCellInFirebase,
    TResult? Function(ChangeDiaryCellsSettingsEvent value)?
        changeDiaryCellsSettings,
    TResult? Function(ChangeDiaryCellsBordersSettingsEvent value)?
        changeDiaryCellsBordersSettings,
    TResult? Function(ChangeCapitalCellSettingsEvent value)?
        changeCapitalCellSettings,
    TResult? Function(UpdateDiaryCellSettingsInFirebaseEvent value)?
        updateDiaryCellSettingsInFirebase,
    TResult? Function(UpdateCapitalCellSettingsInFirebaseEvent value)?
        updateCapitalCellSettingsInFirebase,
    TResult? Function(UpdateCapitalCellWidthEvent value)?
        updateCapitalCellWidth,
    TResult? Function(UpdateCapitalCellWidthInFirebaseEvent value)?
        updateCapitalCellWidthInFirebase,
    TResult? Function(StartEditingCellsEvent value)? startEditingCells,
    TResult? Function(CreateDiaryColumnEvent value)? createDiaryColumn,
    TResult? Function(DeleteDiaryColumnEvent value)? deleteDiaryColumn,
    TResult? Function(UpdateDiaryListSettingsEvent value)?
        updateDiaryListSettings,
    TResult? Function(ShareThemeEvent value)? shareTheme,
    TResult? Function(StartEditingColorEvent value)? startEditingColor,
    TResult? Function(StartEditingBordersEvent value)? startEditingBorders,
    TResult? Function(StartEditingBordersStyleEvent value)?
        startEditingBorderStyle,
    TResult? Function(TurnBackEditingEvent value)? turnBackEditing,
    TResult? Function(StartColumnDeletingEvent value)? startColumnDeleting,
    TResult? Function(StartColorThemeEditingEvent value)?
        startColorThemeEditing,
    TResult? Function(DeleteColumnsEvent value)? deleteColumns,
    TResult? Function(LoadThemesEvent value)? loadThemes,
    TResult? Function(LoadFromThemeEvent value)? loadFromTheme,
    TResult? Function(TakeThemeEvent value)? takeTheme,
  }) {
    return selectCapitalCell?.call(this);
  }

  @override
  @optionalTypeArgs
  TResult maybeMap<TResult extends Object?>({
    TResult Function(CreateSampleEvent value)? createSample,
    TResult Function(InitialLoadEvent value)? initialLoad,
    TResult Function(GetDiaryListEvent value)? getDiaryList,
    TResult Function(GetDiaryColumnsEvent value)? getDiaryColumns,
    TResult Function(GetDiaryCellsEvent value)? getDiaryCells,
    TResult Function(SelectDiaryCellEvent value)? selectDiaryCell,
    TResult Function(SelectDiaryCellsEvent value)? selectDiaryCells,
    TResult Function(SelectCapitalCellEvent value)? selectCapitalCell,
    TResult Function(OnPanUpdateEvent value)? onPanUpdate,
    TResult Function(StartEditingListEvent value)? startEditingList,
    TResult Function(ReturnToLoadedEvent value)? returnToLoaded,
    TResult Function(ReturnToCellsSelectedEvent value)? returnToCellsSelected,
    TResult Function(UpdateDiaryListNameEvent value)? updateDiaryListName,
    TResult Function(ChangeDiaryCellEvent value)? changeDiaryCell,
    TResult Function(ChangeCapitalCellEvent value)? changeCapitalCell,
    TResult Function(UpdateDiaryCellInFirebaseEvent value)?
        updateDiaryCellInFirebase,
    TResult Function(ChangeDiaryCellsSettingsEvent value)?
        changeDiaryCellsSettings,
    TResult Function(ChangeDiaryCellsBordersSettingsEvent value)?
        changeDiaryCellsBordersSettings,
    TResult Function(ChangeCapitalCellSettingsEvent value)?
        changeCapitalCellSettings,
    TResult Function(UpdateDiaryCellSettingsInFirebaseEvent value)?
        updateDiaryCellSettingsInFirebase,
    TResult Function(UpdateCapitalCellSettingsInFirebaseEvent value)?
        updateCapitalCellSettingsInFirebase,
    TResult Function(UpdateCapitalCellWidthEvent value)? updateCapitalCellWidth,
    TResult Function(UpdateCapitalCellWidthInFirebaseEvent value)?
        updateCapitalCellWidthInFirebase,
    TResult Function(StartEditingCellsEvent value)? startEditingCells,
    TResult Function(CreateDiaryColumnEvent value)? createDiaryColumn,
    TResult Function(DeleteDiaryColumnEvent value)? deleteDiaryColumn,
    TResult Function(UpdateDiaryListSettingsEvent value)?
        updateDiaryListSettings,
    TResult Function(ShareThemeEvent value)? shareTheme,
    TResult Function(StartEditingColorEvent value)? startEditingColor,
    TResult Function(StartEditingBordersEvent value)? startEditingBorders,
    TResult Function(StartEditingBordersStyleEvent value)?
        startEditingBorderStyle,
    TResult Function(TurnBackEditingEvent value)? turnBackEditing,
    TResult Function(StartColumnDeletingEvent value)? startColumnDeleting,
    TResult Function(StartColorThemeEditingEvent value)? startColorThemeEditing,
    TResult Function(DeleteColumnsEvent value)? deleteColumns,
    TResult Function(LoadThemesEvent value)? loadThemes,
    TResult Function(LoadFromThemeEvent value)? loadFromTheme,
    TResult Function(TakeThemeEvent value)? takeTheme,
    required TResult orElse(),
  }) {
    if (selectCapitalCell != null) {
      return selectCapitalCell(this);
    }
    return orElse();
  }
}

abstract class SelectCapitalCellEvent implements DiaryListEvent {
  const factory SelectCapitalCellEvent(
      {required final CapitalCell capitalCell}) = _$SelectCapitalCellEvent;

  CapitalCell get capitalCell;
  @JsonKey(ignore: true)
  _$$SelectCapitalCellEventCopyWith<_$SelectCapitalCellEvent> get copyWith =>
      throw _privateConstructorUsedError;
}

/// @nodoc
abstract class _$$OnPanUpdateEventCopyWith<$Res> {
  factory _$$OnPanUpdateEventCopyWith(
          _$OnPanUpdateEvent value, $Res Function(_$OnPanUpdateEvent) then) =
      __$$OnPanUpdateEventCopyWithImpl<$Res>;
  @useResult
  $Res call(
      {DiaryCell diaryCell,
      GlobalObjectKey<State<StatefulWidget>> cellKey,
      DragUpdateDetails details,
      double scaleFactor});
}

/// @nodoc
class __$$OnPanUpdateEventCopyWithImpl<$Res>
    extends _$DiaryListEventCopyWithImpl<$Res, _$OnPanUpdateEvent>
    implements _$$OnPanUpdateEventCopyWith<$Res> {
  __$$OnPanUpdateEventCopyWithImpl(
      _$OnPanUpdateEvent _value, $Res Function(_$OnPanUpdateEvent) _then)
      : super(_value, _then);

  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? diaryCell = null,
    Object? cellKey = null,
    Object? details = null,
    Object? scaleFactor = null,
  }) {
    return _then(_$OnPanUpdateEvent(
      diaryCell: null == diaryCell
          ? _value.diaryCell
          : diaryCell // ignore: cast_nullable_to_non_nullable
              as DiaryCell,
      cellKey: null == cellKey
          ? _value.cellKey
          : cellKey // ignore: cast_nullable_to_non_nullable
              as GlobalObjectKey<State<StatefulWidget>>,
      details: null == details
          ? _value.details
          : details // ignore: cast_nullable_to_non_nullable
              as DragUpdateDetails,
      scaleFactor: null == scaleFactor
          ? _value.scaleFactor
          : scaleFactor // ignore: cast_nullable_to_non_nullable
              as double,
    ));
  }
}

/// @nodoc

class _$OnPanUpdateEvent implements OnPanUpdateEvent {
  const _$OnPanUpdateEvent(
      {required this.diaryCell,
      required this.cellKey,
      required this.details,
      required this.scaleFactor});

  @override
  final DiaryCell diaryCell;
  @override
  final GlobalObjectKey<State<StatefulWidget>> cellKey;
  @override
  final DragUpdateDetails details;
  @override
  final double scaleFactor;

  @override
  String toString() {
    return 'DiaryListEvent.onPanUpdate(diaryCell: $diaryCell, cellKey: $cellKey, details: $details, scaleFactor: $scaleFactor)';
  }

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$OnPanUpdateEvent &&
            (identical(other.diaryCell, diaryCell) ||
                other.diaryCell == diaryCell) &&
            (identical(other.cellKey, cellKey) || other.cellKey == cellKey) &&
            (identical(other.details, details) || other.details == details) &&
            (identical(other.scaleFactor, scaleFactor) ||
                other.scaleFactor == scaleFactor));
  }

  @override
  int get hashCode =>
      Object.hash(runtimeType, diaryCell, cellKey, details, scaleFactor);

  @JsonKey(ignore: true)
  @override
  @pragma('vm:prefer-inline')
  _$$OnPanUpdateEventCopyWith<_$OnPanUpdateEvent> get copyWith =>
      __$$OnPanUpdateEventCopyWithImpl<_$OnPanUpdateEvent>(this, _$identity);

  @override
  @optionalTypeArgs
  TResult when<TResult extends Object?>({
    required TResult Function() createSample,
    required TResult Function() initialLoad,
    required TResult Function(DateTime date, int delay) getDiaryList,
    required TResult Function(DiaryList diaryList, List<DiaryList> lists)
        getDiaryColumns,
    required TResult Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells,
            List<DiaryList> lists)
        getDiaryCells,
    required TResult Function(DiaryCell diaryCell) selectDiaryCell,
    required TResult Function(List<DiaryCell> diaryCells) selectDiaryCells,
    required TResult Function(CapitalCell capitalCell) selectCapitalCell,
    required TResult Function(
            DiaryCell diaryCell,
            GlobalObjectKey<State<StatefulWidget>> cellKey,
            DragUpdateDetails details,
            double scaleFactor)
        onPanUpdate,
    required TResult Function(DiaryList? selectedList) startEditingList,
    required TResult Function(
            String? newName, String? addedColumnName, int? addedColumnCount)
        returnToLoaded,
    required TResult Function() returnToCellsSelected,
    required TResult Function(DiaryList diaryList, String newName)
        updateDiaryListName,
    required TResult Function(DiaryCell diaryCell, String? textFieldText)
        changeDiaryCell,
    required TResult Function(CapitalCell capitalCell, String? textFieldText)
        changeCapitalCell,
    required TResult Function(DiaryCell diaryCell, String? textFieldText)
        updateDiaryCellInFirebase,
    required TResult Function(
            FontWeightEnum? fontWeight,
            TextDecorationEnum? textDecoration,
            FontStyleEnum? fontStyle,
            double? fontSize,
            String? color,
            HorizontalAlignmentsEnum? horizontalAlignment,
            VerticalAlignmentsEnum? verticalAlignment,
            String? backgroundColor)
        changeDiaryCellsSettings,
    required TResult Function(BordersEditingEnum bordersEditingEnum,
            BordersStyleEnum bordersStyleEnum, Color bordersColor)
        changeDiaryCellsBordersSettings,
    required TResult Function(
            FontWeightEnum? fontWeight,
            TextDecorationEnum? textDecoration,
            FontStyleEnum? fontStyle,
            double? fontSize,
            String? color,
            HorizontalAlignmentsEnum? horizontalAlignment,
            VerticalAlignmentsEnum? verticalAlignment,
            String? backgroundColor,
            BordersStyleEnum? bordersStyleEnum,
            Color? bordersColor)
        changeCapitalCellSettings,
    required TResult Function(
            DiaryCell diaryCell,
            int index,
            DiaryCellTextSettings? newTextSettings,
            DiaryCellSettings? newSettings)
        updateDiaryCellSettingsInFirebase,
    required TResult Function(DiaryColumnSettings newSettings)
        updateCapitalCellSettingsInFirebase,
    required TResult Function(PointerMoveEvent details) updateCapitalCellWidth,
    required TResult Function(PointerUpEvent details)
        updateCapitalCellWidthInFirebase,
    required TResult Function(bool isTextEditing) startEditingCells,
    required TResult Function(DiaryList diaryList, String name,
            int columnsCount, List<DiaryColumn> diaryColumns)
        createDiaryColumn,
    required TResult Function(DiaryList diaryList, String columnId)
        deleteDiaryColumn,
    required TResult Function(DiaryList diaryList, String? themeColor,
            String? themeBorderColor, String? themePanelBackgroundColor)
        updateDiaryListSettings,
    required TResult Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<DiaryCell> diaryCells,
            List<CapitalCell> capitalCells,
            String themeName,
            String description)
        shareTheme,
    required TResult Function() startEditingColor,
    required TResult Function() startEditingBorders,
    required TResult Function() startEditingBorderStyle,
    required TResult Function() turnBackEditing,
    required TResult Function() startColumnDeleting,
    required TResult Function() startColorThemeEditing,
    required TResult Function() deleteColumns,
    required TResult Function() loadThemes,
    required TResult Function(ListTheme listTheme) loadFromTheme,
    required TResult Function(ListTheme listTheme) takeTheme,
  }) {
    return onPanUpdate(diaryCell, cellKey, details, scaleFactor);
  }

  @override
  @optionalTypeArgs
  TResult? whenOrNull<TResult extends Object?>({
    TResult? Function()? createSample,
    TResult? Function()? initialLoad,
    TResult? Function(DateTime date, int delay)? getDiaryList,
    TResult? Function(DiaryList diaryList, List<DiaryList> lists)?
        getDiaryColumns,
    TResult? Function(DiaryList diaryList, List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells, List<DiaryList> lists)?
        getDiaryCells,
    TResult? Function(DiaryCell diaryCell)? selectDiaryCell,
    TResult? Function(List<DiaryCell> diaryCells)? selectDiaryCells,
    TResult? Function(CapitalCell capitalCell)? selectCapitalCell,
    TResult? Function(
            DiaryCell diaryCell,
            GlobalObjectKey<State<StatefulWidget>> cellKey,
            DragUpdateDetails details,
            double scaleFactor)?
        onPanUpdate,
    TResult? Function(DiaryList? selectedList)? startEditingList,
    TResult? Function(
            String? newName, String? addedColumnName, int? addedColumnCount)?
        returnToLoaded,
    TResult? Function()? returnToCellsSelected,
    TResult? Function(DiaryList diaryList, String newName)? updateDiaryListName,
    TResult? Function(DiaryCell diaryCell, String? textFieldText)?
        changeDiaryCell,
    TResult? Function(CapitalCell capitalCell, String? textFieldText)?
        changeCapitalCell,
    TResult? Function(DiaryCell diaryCell, String? textFieldText)?
        updateDiaryCellInFirebase,
    TResult? Function(
            FontWeightEnum? fontWeight,
            TextDecorationEnum? textDecoration,
            FontStyleEnum? fontStyle,
            double? fontSize,
            String? color,
            HorizontalAlignmentsEnum? horizontalAlignment,
            VerticalAlignmentsEnum? verticalAlignment,
            String? backgroundColor)?
        changeDiaryCellsSettings,
    TResult? Function(BordersEditingEnum bordersEditingEnum,
            BordersStyleEnum bordersStyleEnum, Color bordersColor)?
        changeDiaryCellsBordersSettings,
    TResult? Function(
            FontWeightEnum? fontWeight,
            TextDecorationEnum? textDecoration,
            FontStyleEnum? fontStyle,
            double? fontSize,
            String? color,
            HorizontalAlignmentsEnum? horizontalAlignment,
            VerticalAlignmentsEnum? verticalAlignment,
            String? backgroundColor,
            BordersStyleEnum? bordersStyleEnum,
            Color? bordersColor)?
        changeCapitalCellSettings,
    TResult? Function(
            DiaryCell diaryCell,
            int index,
            DiaryCellTextSettings? newTextSettings,
            DiaryCellSettings? newSettings)?
        updateDiaryCellSettingsInFirebase,
    TResult? Function(DiaryColumnSettings newSettings)?
        updateCapitalCellSettingsInFirebase,
    TResult? Function(PointerMoveEvent details)? updateCapitalCellWidth,
    TResult? Function(PointerUpEvent details)? updateCapitalCellWidthInFirebase,
    TResult? Function(bool isTextEditing)? startEditingCells,
    TResult? Function(DiaryList diaryList, String name, int columnsCount,
            List<DiaryColumn> diaryColumns)?
        createDiaryColumn,
    TResult? Function(DiaryList diaryList, String columnId)? deleteDiaryColumn,
    TResult? Function(DiaryList diaryList, String? themeColor,
            String? themeBorderColor, String? themePanelBackgroundColor)?
        updateDiaryListSettings,
    TResult? Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<DiaryCell> diaryCells,
            List<CapitalCell> capitalCells,
            String themeName,
            String description)?
        shareTheme,
    TResult? Function()? startEditingColor,
    TResult? Function()? startEditingBorders,
    TResult? Function()? startEditingBorderStyle,
    TResult? Function()? turnBackEditing,
    TResult? Function()? startColumnDeleting,
    TResult? Function()? startColorThemeEditing,
    TResult? Function()? deleteColumns,
    TResult? Function()? loadThemes,
    TResult? Function(ListTheme listTheme)? loadFromTheme,
    TResult? Function(ListTheme listTheme)? takeTheme,
  }) {
    return onPanUpdate?.call(diaryCell, cellKey, details, scaleFactor);
  }

  @override
  @optionalTypeArgs
  TResult maybeWhen<TResult extends Object?>({
    TResult Function()? createSample,
    TResult Function()? initialLoad,
    TResult Function(DateTime date, int delay)? getDiaryList,
    TResult Function(DiaryList diaryList, List<DiaryList> lists)?
        getDiaryColumns,
    TResult Function(DiaryList diaryList, List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells, List<DiaryList> lists)?
        getDiaryCells,
    TResult Function(DiaryCell diaryCell)? selectDiaryCell,
    TResult Function(List<DiaryCell> diaryCells)? selectDiaryCells,
    TResult Function(CapitalCell capitalCell)? selectCapitalCell,
    TResult Function(
            DiaryCell diaryCell,
            GlobalObjectKey<State<StatefulWidget>> cellKey,
            DragUpdateDetails details,
            double scaleFactor)?
        onPanUpdate,
    TResult Function(DiaryList? selectedList)? startEditingList,
    TResult Function(
            String? newName, String? addedColumnName, int? addedColumnCount)?
        returnToLoaded,
    TResult Function()? returnToCellsSelected,
    TResult Function(DiaryList diaryList, String newName)? updateDiaryListName,
    TResult Function(DiaryCell diaryCell, String? textFieldText)?
        changeDiaryCell,
    TResult Function(CapitalCell capitalCell, String? textFieldText)?
        changeCapitalCell,
    TResult Function(DiaryCell diaryCell, String? textFieldText)?
        updateDiaryCellInFirebase,
    TResult Function(
            FontWeightEnum? fontWeight,
            TextDecorationEnum? textDecoration,
            FontStyleEnum? fontStyle,
            double? fontSize,
            String? color,
            HorizontalAlignmentsEnum? horizontalAlignment,
            VerticalAlignmentsEnum? verticalAlignment,
            String? backgroundColor)?
        changeDiaryCellsSettings,
    TResult Function(BordersEditingEnum bordersEditingEnum,
            BordersStyleEnum bordersStyleEnum, Color bordersColor)?
        changeDiaryCellsBordersSettings,
    TResult Function(
            FontWeightEnum? fontWeight,
            TextDecorationEnum? textDecoration,
            FontStyleEnum? fontStyle,
            double? fontSize,
            String? color,
            HorizontalAlignmentsEnum? horizontalAlignment,
            VerticalAlignmentsEnum? verticalAlignment,
            String? backgroundColor,
            BordersStyleEnum? bordersStyleEnum,
            Color? bordersColor)?
        changeCapitalCellSettings,
    TResult Function(
            DiaryCell diaryCell,
            int index,
            DiaryCellTextSettings? newTextSettings,
            DiaryCellSettings? newSettings)?
        updateDiaryCellSettingsInFirebase,
    TResult Function(DiaryColumnSettings newSettings)?
        updateCapitalCellSettingsInFirebase,
    TResult Function(PointerMoveEvent details)? updateCapitalCellWidth,
    TResult Function(PointerUpEvent details)? updateCapitalCellWidthInFirebase,
    TResult Function(bool isTextEditing)? startEditingCells,
    TResult Function(DiaryList diaryList, String name, int columnsCount,
            List<DiaryColumn> diaryColumns)?
        createDiaryColumn,
    TResult Function(DiaryList diaryList, String columnId)? deleteDiaryColumn,
    TResult Function(DiaryList diaryList, String? themeColor,
            String? themeBorderColor, String? themePanelBackgroundColor)?
        updateDiaryListSettings,
    TResult Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<DiaryCell> diaryCells,
            List<CapitalCell> capitalCells,
            String themeName,
            String description)?
        shareTheme,
    TResult Function()? startEditingColor,
    TResult Function()? startEditingBorders,
    TResult Function()? startEditingBorderStyle,
    TResult Function()? turnBackEditing,
    TResult Function()? startColumnDeleting,
    TResult Function()? startColorThemeEditing,
    TResult Function()? deleteColumns,
    TResult Function()? loadThemes,
    TResult Function(ListTheme listTheme)? loadFromTheme,
    TResult Function(ListTheme listTheme)? takeTheme,
    required TResult orElse(),
  }) {
    if (onPanUpdate != null) {
      return onPanUpdate(diaryCell, cellKey, details, scaleFactor);
    }
    return orElse();
  }

  @override
  @optionalTypeArgs
  TResult map<TResult extends Object?>({
    required TResult Function(CreateSampleEvent value) createSample,
    required TResult Function(InitialLoadEvent value) initialLoad,
    required TResult Function(GetDiaryListEvent value) getDiaryList,
    required TResult Function(GetDiaryColumnsEvent value) getDiaryColumns,
    required TResult Function(GetDiaryCellsEvent value) getDiaryCells,
    required TResult Function(SelectDiaryCellEvent value) selectDiaryCell,
    required TResult Function(SelectDiaryCellsEvent value) selectDiaryCells,
    required TResult Function(SelectCapitalCellEvent value) selectCapitalCell,
    required TResult Function(OnPanUpdateEvent value) onPanUpdate,
    required TResult Function(StartEditingListEvent value) startEditingList,
    required TResult Function(ReturnToLoadedEvent value) returnToLoaded,
    required TResult Function(ReturnToCellsSelectedEvent value)
        returnToCellsSelected,
    required TResult Function(UpdateDiaryListNameEvent value)
        updateDiaryListName,
    required TResult Function(ChangeDiaryCellEvent value) changeDiaryCell,
    required TResult Function(ChangeCapitalCellEvent value) changeCapitalCell,
    required TResult Function(UpdateDiaryCellInFirebaseEvent value)
        updateDiaryCellInFirebase,
    required TResult Function(ChangeDiaryCellsSettingsEvent value)
        changeDiaryCellsSettings,
    required TResult Function(ChangeDiaryCellsBordersSettingsEvent value)
        changeDiaryCellsBordersSettings,
    required TResult Function(ChangeCapitalCellSettingsEvent value)
        changeCapitalCellSettings,
    required TResult Function(UpdateDiaryCellSettingsInFirebaseEvent value)
        updateDiaryCellSettingsInFirebase,
    required TResult Function(UpdateCapitalCellSettingsInFirebaseEvent value)
        updateCapitalCellSettingsInFirebase,
    required TResult Function(UpdateCapitalCellWidthEvent value)
        updateCapitalCellWidth,
    required TResult Function(UpdateCapitalCellWidthInFirebaseEvent value)
        updateCapitalCellWidthInFirebase,
    required TResult Function(StartEditingCellsEvent value) startEditingCells,
    required TResult Function(CreateDiaryColumnEvent value) createDiaryColumn,
    required TResult Function(DeleteDiaryColumnEvent value) deleteDiaryColumn,
    required TResult Function(UpdateDiaryListSettingsEvent value)
        updateDiaryListSettings,
    required TResult Function(ShareThemeEvent value) shareTheme,
    required TResult Function(StartEditingColorEvent value) startEditingColor,
    required TResult Function(StartEditingBordersEvent value)
        startEditingBorders,
    required TResult Function(StartEditingBordersStyleEvent value)
        startEditingBorderStyle,
    required TResult Function(TurnBackEditingEvent value) turnBackEditing,
    required TResult Function(StartColumnDeletingEvent value)
        startColumnDeleting,
    required TResult Function(StartColorThemeEditingEvent value)
        startColorThemeEditing,
    required TResult Function(DeleteColumnsEvent value) deleteColumns,
    required TResult Function(LoadThemesEvent value) loadThemes,
    required TResult Function(LoadFromThemeEvent value) loadFromTheme,
    required TResult Function(TakeThemeEvent value) takeTheme,
  }) {
    return onPanUpdate(this);
  }

  @override
  @optionalTypeArgs
  TResult? mapOrNull<TResult extends Object?>({
    TResult? Function(CreateSampleEvent value)? createSample,
    TResult? Function(InitialLoadEvent value)? initialLoad,
    TResult? Function(GetDiaryListEvent value)? getDiaryList,
    TResult? Function(GetDiaryColumnsEvent value)? getDiaryColumns,
    TResult? Function(GetDiaryCellsEvent value)? getDiaryCells,
    TResult? Function(SelectDiaryCellEvent value)? selectDiaryCell,
    TResult? Function(SelectDiaryCellsEvent value)? selectDiaryCells,
    TResult? Function(SelectCapitalCellEvent value)? selectCapitalCell,
    TResult? Function(OnPanUpdateEvent value)? onPanUpdate,
    TResult? Function(StartEditingListEvent value)? startEditingList,
    TResult? Function(ReturnToLoadedEvent value)? returnToLoaded,
    TResult? Function(ReturnToCellsSelectedEvent value)? returnToCellsSelected,
    TResult? Function(UpdateDiaryListNameEvent value)? updateDiaryListName,
    TResult? Function(ChangeDiaryCellEvent value)? changeDiaryCell,
    TResult? Function(ChangeCapitalCellEvent value)? changeCapitalCell,
    TResult? Function(UpdateDiaryCellInFirebaseEvent value)?
        updateDiaryCellInFirebase,
    TResult? Function(ChangeDiaryCellsSettingsEvent value)?
        changeDiaryCellsSettings,
    TResult? Function(ChangeDiaryCellsBordersSettingsEvent value)?
        changeDiaryCellsBordersSettings,
    TResult? Function(ChangeCapitalCellSettingsEvent value)?
        changeCapitalCellSettings,
    TResult? Function(UpdateDiaryCellSettingsInFirebaseEvent value)?
        updateDiaryCellSettingsInFirebase,
    TResult? Function(UpdateCapitalCellSettingsInFirebaseEvent value)?
        updateCapitalCellSettingsInFirebase,
    TResult? Function(UpdateCapitalCellWidthEvent value)?
        updateCapitalCellWidth,
    TResult? Function(UpdateCapitalCellWidthInFirebaseEvent value)?
        updateCapitalCellWidthInFirebase,
    TResult? Function(StartEditingCellsEvent value)? startEditingCells,
    TResult? Function(CreateDiaryColumnEvent value)? createDiaryColumn,
    TResult? Function(DeleteDiaryColumnEvent value)? deleteDiaryColumn,
    TResult? Function(UpdateDiaryListSettingsEvent value)?
        updateDiaryListSettings,
    TResult? Function(ShareThemeEvent value)? shareTheme,
    TResult? Function(StartEditingColorEvent value)? startEditingColor,
    TResult? Function(StartEditingBordersEvent value)? startEditingBorders,
    TResult? Function(StartEditingBordersStyleEvent value)?
        startEditingBorderStyle,
    TResult? Function(TurnBackEditingEvent value)? turnBackEditing,
    TResult? Function(StartColumnDeletingEvent value)? startColumnDeleting,
    TResult? Function(StartColorThemeEditingEvent value)?
        startColorThemeEditing,
    TResult? Function(DeleteColumnsEvent value)? deleteColumns,
    TResult? Function(LoadThemesEvent value)? loadThemes,
    TResult? Function(LoadFromThemeEvent value)? loadFromTheme,
    TResult? Function(TakeThemeEvent value)? takeTheme,
  }) {
    return onPanUpdate?.call(this);
  }

  @override
  @optionalTypeArgs
  TResult maybeMap<TResult extends Object?>({
    TResult Function(CreateSampleEvent value)? createSample,
    TResult Function(InitialLoadEvent value)? initialLoad,
    TResult Function(GetDiaryListEvent value)? getDiaryList,
    TResult Function(GetDiaryColumnsEvent value)? getDiaryColumns,
    TResult Function(GetDiaryCellsEvent value)? getDiaryCells,
    TResult Function(SelectDiaryCellEvent value)? selectDiaryCell,
    TResult Function(SelectDiaryCellsEvent value)? selectDiaryCells,
    TResult Function(SelectCapitalCellEvent value)? selectCapitalCell,
    TResult Function(OnPanUpdateEvent value)? onPanUpdate,
    TResult Function(StartEditingListEvent value)? startEditingList,
    TResult Function(ReturnToLoadedEvent value)? returnToLoaded,
    TResult Function(ReturnToCellsSelectedEvent value)? returnToCellsSelected,
    TResult Function(UpdateDiaryListNameEvent value)? updateDiaryListName,
    TResult Function(ChangeDiaryCellEvent value)? changeDiaryCell,
    TResult Function(ChangeCapitalCellEvent value)? changeCapitalCell,
    TResult Function(UpdateDiaryCellInFirebaseEvent value)?
        updateDiaryCellInFirebase,
    TResult Function(ChangeDiaryCellsSettingsEvent value)?
        changeDiaryCellsSettings,
    TResult Function(ChangeDiaryCellsBordersSettingsEvent value)?
        changeDiaryCellsBordersSettings,
    TResult Function(ChangeCapitalCellSettingsEvent value)?
        changeCapitalCellSettings,
    TResult Function(UpdateDiaryCellSettingsInFirebaseEvent value)?
        updateDiaryCellSettingsInFirebase,
    TResult Function(UpdateCapitalCellSettingsInFirebaseEvent value)?
        updateCapitalCellSettingsInFirebase,
    TResult Function(UpdateCapitalCellWidthEvent value)? updateCapitalCellWidth,
    TResult Function(UpdateCapitalCellWidthInFirebaseEvent value)?
        updateCapitalCellWidthInFirebase,
    TResult Function(StartEditingCellsEvent value)? startEditingCells,
    TResult Function(CreateDiaryColumnEvent value)? createDiaryColumn,
    TResult Function(DeleteDiaryColumnEvent value)? deleteDiaryColumn,
    TResult Function(UpdateDiaryListSettingsEvent value)?
        updateDiaryListSettings,
    TResult Function(ShareThemeEvent value)? shareTheme,
    TResult Function(StartEditingColorEvent value)? startEditingColor,
    TResult Function(StartEditingBordersEvent value)? startEditingBorders,
    TResult Function(StartEditingBordersStyleEvent value)?
        startEditingBorderStyle,
    TResult Function(TurnBackEditingEvent value)? turnBackEditing,
    TResult Function(StartColumnDeletingEvent value)? startColumnDeleting,
    TResult Function(StartColorThemeEditingEvent value)? startColorThemeEditing,
    TResult Function(DeleteColumnsEvent value)? deleteColumns,
    TResult Function(LoadThemesEvent value)? loadThemes,
    TResult Function(LoadFromThemeEvent value)? loadFromTheme,
    TResult Function(TakeThemeEvent value)? takeTheme,
    required TResult orElse(),
  }) {
    if (onPanUpdate != null) {
      return onPanUpdate(this);
    }
    return orElse();
  }
}

abstract class OnPanUpdateEvent implements DiaryListEvent {
  const factory OnPanUpdateEvent(
      {required final DiaryCell diaryCell,
      required final GlobalObjectKey<State<StatefulWidget>> cellKey,
      required final DragUpdateDetails details,
      required final double scaleFactor}) = _$OnPanUpdateEvent;

  DiaryCell get diaryCell;
  GlobalObjectKey<State<StatefulWidget>> get cellKey;
  DragUpdateDetails get details;
  double get scaleFactor;
  @JsonKey(ignore: true)
  _$$OnPanUpdateEventCopyWith<_$OnPanUpdateEvent> get copyWith =>
      throw _privateConstructorUsedError;
}

/// @nodoc
abstract class _$$StartEditingListEventCopyWith<$Res> {
  factory _$$StartEditingListEventCopyWith(_$StartEditingListEvent value,
          $Res Function(_$StartEditingListEvent) then) =
      __$$StartEditingListEventCopyWithImpl<$Res>;
  @useResult
  $Res call({DiaryList? selectedList});
}

/// @nodoc
class __$$StartEditingListEventCopyWithImpl<$Res>
    extends _$DiaryListEventCopyWithImpl<$Res, _$StartEditingListEvent>
    implements _$$StartEditingListEventCopyWith<$Res> {
  __$$StartEditingListEventCopyWithImpl(_$StartEditingListEvent _value,
      $Res Function(_$StartEditingListEvent) _then)
      : super(_value, _then);

  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? selectedList = freezed,
  }) {
    return _then(_$StartEditingListEvent(
      selectedList: freezed == selectedList
          ? _value.selectedList
          : selectedList // ignore: cast_nullable_to_non_nullable
              as DiaryList?,
    ));
  }
}

/// @nodoc

class _$StartEditingListEvent implements StartEditingListEvent {
  const _$StartEditingListEvent({this.selectedList});

  @override
  final DiaryList? selectedList;

  @override
  String toString() {
    return 'DiaryListEvent.startEditingList(selectedList: $selectedList)';
  }

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$StartEditingListEvent &&
            (identical(other.selectedList, selectedList) ||
                other.selectedList == selectedList));
  }

  @override
  int get hashCode => Object.hash(runtimeType, selectedList);

  @JsonKey(ignore: true)
  @override
  @pragma('vm:prefer-inline')
  _$$StartEditingListEventCopyWith<_$StartEditingListEvent> get copyWith =>
      __$$StartEditingListEventCopyWithImpl<_$StartEditingListEvent>(
          this, _$identity);

  @override
  @optionalTypeArgs
  TResult when<TResult extends Object?>({
    required TResult Function() createSample,
    required TResult Function() initialLoad,
    required TResult Function(DateTime date, int delay) getDiaryList,
    required TResult Function(DiaryList diaryList, List<DiaryList> lists)
        getDiaryColumns,
    required TResult Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells,
            List<DiaryList> lists)
        getDiaryCells,
    required TResult Function(DiaryCell diaryCell) selectDiaryCell,
    required TResult Function(List<DiaryCell> diaryCells) selectDiaryCells,
    required TResult Function(CapitalCell capitalCell) selectCapitalCell,
    required TResult Function(
            DiaryCell diaryCell,
            GlobalObjectKey<State<StatefulWidget>> cellKey,
            DragUpdateDetails details,
            double scaleFactor)
        onPanUpdate,
    required TResult Function(DiaryList? selectedList) startEditingList,
    required TResult Function(
            String? newName, String? addedColumnName, int? addedColumnCount)
        returnToLoaded,
    required TResult Function() returnToCellsSelected,
    required TResult Function(DiaryList diaryList, String newName)
        updateDiaryListName,
    required TResult Function(DiaryCell diaryCell, String? textFieldText)
        changeDiaryCell,
    required TResult Function(CapitalCell capitalCell, String? textFieldText)
        changeCapitalCell,
    required TResult Function(DiaryCell diaryCell, String? textFieldText)
        updateDiaryCellInFirebase,
    required TResult Function(
            FontWeightEnum? fontWeight,
            TextDecorationEnum? textDecoration,
            FontStyleEnum? fontStyle,
            double? fontSize,
            String? color,
            HorizontalAlignmentsEnum? horizontalAlignment,
            VerticalAlignmentsEnum? verticalAlignment,
            String? backgroundColor)
        changeDiaryCellsSettings,
    required TResult Function(BordersEditingEnum bordersEditingEnum,
            BordersStyleEnum bordersStyleEnum, Color bordersColor)
        changeDiaryCellsBordersSettings,
    required TResult Function(
            FontWeightEnum? fontWeight,
            TextDecorationEnum? textDecoration,
            FontStyleEnum? fontStyle,
            double? fontSize,
            String? color,
            HorizontalAlignmentsEnum? horizontalAlignment,
            VerticalAlignmentsEnum? verticalAlignment,
            String? backgroundColor,
            BordersStyleEnum? bordersStyleEnum,
            Color? bordersColor)
        changeCapitalCellSettings,
    required TResult Function(
            DiaryCell diaryCell,
            int index,
            DiaryCellTextSettings? newTextSettings,
            DiaryCellSettings? newSettings)
        updateDiaryCellSettingsInFirebase,
    required TResult Function(DiaryColumnSettings newSettings)
        updateCapitalCellSettingsInFirebase,
    required TResult Function(PointerMoveEvent details) updateCapitalCellWidth,
    required TResult Function(PointerUpEvent details)
        updateCapitalCellWidthInFirebase,
    required TResult Function(bool isTextEditing) startEditingCells,
    required TResult Function(DiaryList diaryList, String name,
            int columnsCount, List<DiaryColumn> diaryColumns)
        createDiaryColumn,
    required TResult Function(DiaryList diaryList, String columnId)
        deleteDiaryColumn,
    required TResult Function(DiaryList diaryList, String? themeColor,
            String? themeBorderColor, String? themePanelBackgroundColor)
        updateDiaryListSettings,
    required TResult Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<DiaryCell> diaryCells,
            List<CapitalCell> capitalCells,
            String themeName,
            String description)
        shareTheme,
    required TResult Function() startEditingColor,
    required TResult Function() startEditingBorders,
    required TResult Function() startEditingBorderStyle,
    required TResult Function() turnBackEditing,
    required TResult Function() startColumnDeleting,
    required TResult Function() startColorThemeEditing,
    required TResult Function() deleteColumns,
    required TResult Function() loadThemes,
    required TResult Function(ListTheme listTheme) loadFromTheme,
    required TResult Function(ListTheme listTheme) takeTheme,
  }) {
    return startEditingList(selectedList);
  }

  @override
  @optionalTypeArgs
  TResult? whenOrNull<TResult extends Object?>({
    TResult? Function()? createSample,
    TResult? Function()? initialLoad,
    TResult? Function(DateTime date, int delay)? getDiaryList,
    TResult? Function(DiaryList diaryList, List<DiaryList> lists)?
        getDiaryColumns,
    TResult? Function(DiaryList diaryList, List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells, List<DiaryList> lists)?
        getDiaryCells,
    TResult? Function(DiaryCell diaryCell)? selectDiaryCell,
    TResult? Function(List<DiaryCell> diaryCells)? selectDiaryCells,
    TResult? Function(CapitalCell capitalCell)? selectCapitalCell,
    TResult? Function(
            DiaryCell diaryCell,
            GlobalObjectKey<State<StatefulWidget>> cellKey,
            DragUpdateDetails details,
            double scaleFactor)?
        onPanUpdate,
    TResult? Function(DiaryList? selectedList)? startEditingList,
    TResult? Function(
            String? newName, String? addedColumnName, int? addedColumnCount)?
        returnToLoaded,
    TResult? Function()? returnToCellsSelected,
    TResult? Function(DiaryList diaryList, String newName)? updateDiaryListName,
    TResult? Function(DiaryCell diaryCell, String? textFieldText)?
        changeDiaryCell,
    TResult? Function(CapitalCell capitalCell, String? textFieldText)?
        changeCapitalCell,
    TResult? Function(DiaryCell diaryCell, String? textFieldText)?
        updateDiaryCellInFirebase,
    TResult? Function(
            FontWeightEnum? fontWeight,
            TextDecorationEnum? textDecoration,
            FontStyleEnum? fontStyle,
            double? fontSize,
            String? color,
            HorizontalAlignmentsEnum? horizontalAlignment,
            VerticalAlignmentsEnum? verticalAlignment,
            String? backgroundColor)?
        changeDiaryCellsSettings,
    TResult? Function(BordersEditingEnum bordersEditingEnum,
            BordersStyleEnum bordersStyleEnum, Color bordersColor)?
        changeDiaryCellsBordersSettings,
    TResult? Function(
            FontWeightEnum? fontWeight,
            TextDecorationEnum? textDecoration,
            FontStyleEnum? fontStyle,
            double? fontSize,
            String? color,
            HorizontalAlignmentsEnum? horizontalAlignment,
            VerticalAlignmentsEnum? verticalAlignment,
            String? backgroundColor,
            BordersStyleEnum? bordersStyleEnum,
            Color? bordersColor)?
        changeCapitalCellSettings,
    TResult? Function(
            DiaryCell diaryCell,
            int index,
            DiaryCellTextSettings? newTextSettings,
            DiaryCellSettings? newSettings)?
        updateDiaryCellSettingsInFirebase,
    TResult? Function(DiaryColumnSettings newSettings)?
        updateCapitalCellSettingsInFirebase,
    TResult? Function(PointerMoveEvent details)? updateCapitalCellWidth,
    TResult? Function(PointerUpEvent details)? updateCapitalCellWidthInFirebase,
    TResult? Function(bool isTextEditing)? startEditingCells,
    TResult? Function(DiaryList diaryList, String name, int columnsCount,
            List<DiaryColumn> diaryColumns)?
        createDiaryColumn,
    TResult? Function(DiaryList diaryList, String columnId)? deleteDiaryColumn,
    TResult? Function(DiaryList diaryList, String? themeColor,
            String? themeBorderColor, String? themePanelBackgroundColor)?
        updateDiaryListSettings,
    TResult? Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<DiaryCell> diaryCells,
            List<CapitalCell> capitalCells,
            String themeName,
            String description)?
        shareTheme,
    TResult? Function()? startEditingColor,
    TResult? Function()? startEditingBorders,
    TResult? Function()? startEditingBorderStyle,
    TResult? Function()? turnBackEditing,
    TResult? Function()? startColumnDeleting,
    TResult? Function()? startColorThemeEditing,
    TResult? Function()? deleteColumns,
    TResult? Function()? loadThemes,
    TResult? Function(ListTheme listTheme)? loadFromTheme,
    TResult? Function(ListTheme listTheme)? takeTheme,
  }) {
    return startEditingList?.call(selectedList);
  }

  @override
  @optionalTypeArgs
  TResult maybeWhen<TResult extends Object?>({
    TResult Function()? createSample,
    TResult Function()? initialLoad,
    TResult Function(DateTime date, int delay)? getDiaryList,
    TResult Function(DiaryList diaryList, List<DiaryList> lists)?
        getDiaryColumns,
    TResult Function(DiaryList diaryList, List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells, List<DiaryList> lists)?
        getDiaryCells,
    TResult Function(DiaryCell diaryCell)? selectDiaryCell,
    TResult Function(List<DiaryCell> diaryCells)? selectDiaryCells,
    TResult Function(CapitalCell capitalCell)? selectCapitalCell,
    TResult Function(
            DiaryCell diaryCell,
            GlobalObjectKey<State<StatefulWidget>> cellKey,
            DragUpdateDetails details,
            double scaleFactor)?
        onPanUpdate,
    TResult Function(DiaryList? selectedList)? startEditingList,
    TResult Function(
            String? newName, String? addedColumnName, int? addedColumnCount)?
        returnToLoaded,
    TResult Function()? returnToCellsSelected,
    TResult Function(DiaryList diaryList, String newName)? updateDiaryListName,
    TResult Function(DiaryCell diaryCell, String? textFieldText)?
        changeDiaryCell,
    TResult Function(CapitalCell capitalCell, String? textFieldText)?
        changeCapitalCell,
    TResult Function(DiaryCell diaryCell, String? textFieldText)?
        updateDiaryCellInFirebase,
    TResult Function(
            FontWeightEnum? fontWeight,
            TextDecorationEnum? textDecoration,
            FontStyleEnum? fontStyle,
            double? fontSize,
            String? color,
            HorizontalAlignmentsEnum? horizontalAlignment,
            VerticalAlignmentsEnum? verticalAlignment,
            String? backgroundColor)?
        changeDiaryCellsSettings,
    TResult Function(BordersEditingEnum bordersEditingEnum,
            BordersStyleEnum bordersStyleEnum, Color bordersColor)?
        changeDiaryCellsBordersSettings,
    TResult Function(
            FontWeightEnum? fontWeight,
            TextDecorationEnum? textDecoration,
            FontStyleEnum? fontStyle,
            double? fontSize,
            String? color,
            HorizontalAlignmentsEnum? horizontalAlignment,
            VerticalAlignmentsEnum? verticalAlignment,
            String? backgroundColor,
            BordersStyleEnum? bordersStyleEnum,
            Color? bordersColor)?
        changeCapitalCellSettings,
    TResult Function(
            DiaryCell diaryCell,
            int index,
            DiaryCellTextSettings? newTextSettings,
            DiaryCellSettings? newSettings)?
        updateDiaryCellSettingsInFirebase,
    TResult Function(DiaryColumnSettings newSettings)?
        updateCapitalCellSettingsInFirebase,
    TResult Function(PointerMoveEvent details)? updateCapitalCellWidth,
    TResult Function(PointerUpEvent details)? updateCapitalCellWidthInFirebase,
    TResult Function(bool isTextEditing)? startEditingCells,
    TResult Function(DiaryList diaryList, String name, int columnsCount,
            List<DiaryColumn> diaryColumns)?
        createDiaryColumn,
    TResult Function(DiaryList diaryList, String columnId)? deleteDiaryColumn,
    TResult Function(DiaryList diaryList, String? themeColor,
            String? themeBorderColor, String? themePanelBackgroundColor)?
        updateDiaryListSettings,
    TResult Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<DiaryCell> diaryCells,
            List<CapitalCell> capitalCells,
            String themeName,
            String description)?
        shareTheme,
    TResult Function()? startEditingColor,
    TResult Function()? startEditingBorders,
    TResult Function()? startEditingBorderStyle,
    TResult Function()? turnBackEditing,
    TResult Function()? startColumnDeleting,
    TResult Function()? startColorThemeEditing,
    TResult Function()? deleteColumns,
    TResult Function()? loadThemes,
    TResult Function(ListTheme listTheme)? loadFromTheme,
    TResult Function(ListTheme listTheme)? takeTheme,
    required TResult orElse(),
  }) {
    if (startEditingList != null) {
      return startEditingList(selectedList);
    }
    return orElse();
  }

  @override
  @optionalTypeArgs
  TResult map<TResult extends Object?>({
    required TResult Function(CreateSampleEvent value) createSample,
    required TResult Function(InitialLoadEvent value) initialLoad,
    required TResult Function(GetDiaryListEvent value) getDiaryList,
    required TResult Function(GetDiaryColumnsEvent value) getDiaryColumns,
    required TResult Function(GetDiaryCellsEvent value) getDiaryCells,
    required TResult Function(SelectDiaryCellEvent value) selectDiaryCell,
    required TResult Function(SelectDiaryCellsEvent value) selectDiaryCells,
    required TResult Function(SelectCapitalCellEvent value) selectCapitalCell,
    required TResult Function(OnPanUpdateEvent value) onPanUpdate,
    required TResult Function(StartEditingListEvent value) startEditingList,
    required TResult Function(ReturnToLoadedEvent value) returnToLoaded,
    required TResult Function(ReturnToCellsSelectedEvent value)
        returnToCellsSelected,
    required TResult Function(UpdateDiaryListNameEvent value)
        updateDiaryListName,
    required TResult Function(ChangeDiaryCellEvent value) changeDiaryCell,
    required TResult Function(ChangeCapitalCellEvent value) changeCapitalCell,
    required TResult Function(UpdateDiaryCellInFirebaseEvent value)
        updateDiaryCellInFirebase,
    required TResult Function(ChangeDiaryCellsSettingsEvent value)
        changeDiaryCellsSettings,
    required TResult Function(ChangeDiaryCellsBordersSettingsEvent value)
        changeDiaryCellsBordersSettings,
    required TResult Function(ChangeCapitalCellSettingsEvent value)
        changeCapitalCellSettings,
    required TResult Function(UpdateDiaryCellSettingsInFirebaseEvent value)
        updateDiaryCellSettingsInFirebase,
    required TResult Function(UpdateCapitalCellSettingsInFirebaseEvent value)
        updateCapitalCellSettingsInFirebase,
    required TResult Function(UpdateCapitalCellWidthEvent value)
        updateCapitalCellWidth,
    required TResult Function(UpdateCapitalCellWidthInFirebaseEvent value)
        updateCapitalCellWidthInFirebase,
    required TResult Function(StartEditingCellsEvent value) startEditingCells,
    required TResult Function(CreateDiaryColumnEvent value) createDiaryColumn,
    required TResult Function(DeleteDiaryColumnEvent value) deleteDiaryColumn,
    required TResult Function(UpdateDiaryListSettingsEvent value)
        updateDiaryListSettings,
    required TResult Function(ShareThemeEvent value) shareTheme,
    required TResult Function(StartEditingColorEvent value) startEditingColor,
    required TResult Function(StartEditingBordersEvent value)
        startEditingBorders,
    required TResult Function(StartEditingBordersStyleEvent value)
        startEditingBorderStyle,
    required TResult Function(TurnBackEditingEvent value) turnBackEditing,
    required TResult Function(StartColumnDeletingEvent value)
        startColumnDeleting,
    required TResult Function(StartColorThemeEditingEvent value)
        startColorThemeEditing,
    required TResult Function(DeleteColumnsEvent value) deleteColumns,
    required TResult Function(LoadThemesEvent value) loadThemes,
    required TResult Function(LoadFromThemeEvent value) loadFromTheme,
    required TResult Function(TakeThemeEvent value) takeTheme,
  }) {
    return startEditingList(this);
  }

  @override
  @optionalTypeArgs
  TResult? mapOrNull<TResult extends Object?>({
    TResult? Function(CreateSampleEvent value)? createSample,
    TResult? Function(InitialLoadEvent value)? initialLoad,
    TResult? Function(GetDiaryListEvent value)? getDiaryList,
    TResult? Function(GetDiaryColumnsEvent value)? getDiaryColumns,
    TResult? Function(GetDiaryCellsEvent value)? getDiaryCells,
    TResult? Function(SelectDiaryCellEvent value)? selectDiaryCell,
    TResult? Function(SelectDiaryCellsEvent value)? selectDiaryCells,
    TResult? Function(SelectCapitalCellEvent value)? selectCapitalCell,
    TResult? Function(OnPanUpdateEvent value)? onPanUpdate,
    TResult? Function(StartEditingListEvent value)? startEditingList,
    TResult? Function(ReturnToLoadedEvent value)? returnToLoaded,
    TResult? Function(ReturnToCellsSelectedEvent value)? returnToCellsSelected,
    TResult? Function(UpdateDiaryListNameEvent value)? updateDiaryListName,
    TResult? Function(ChangeDiaryCellEvent value)? changeDiaryCell,
    TResult? Function(ChangeCapitalCellEvent value)? changeCapitalCell,
    TResult? Function(UpdateDiaryCellInFirebaseEvent value)?
        updateDiaryCellInFirebase,
    TResult? Function(ChangeDiaryCellsSettingsEvent value)?
        changeDiaryCellsSettings,
    TResult? Function(ChangeDiaryCellsBordersSettingsEvent value)?
        changeDiaryCellsBordersSettings,
    TResult? Function(ChangeCapitalCellSettingsEvent value)?
        changeCapitalCellSettings,
    TResult? Function(UpdateDiaryCellSettingsInFirebaseEvent value)?
        updateDiaryCellSettingsInFirebase,
    TResult? Function(UpdateCapitalCellSettingsInFirebaseEvent value)?
        updateCapitalCellSettingsInFirebase,
    TResult? Function(UpdateCapitalCellWidthEvent value)?
        updateCapitalCellWidth,
    TResult? Function(UpdateCapitalCellWidthInFirebaseEvent value)?
        updateCapitalCellWidthInFirebase,
    TResult? Function(StartEditingCellsEvent value)? startEditingCells,
    TResult? Function(CreateDiaryColumnEvent value)? createDiaryColumn,
    TResult? Function(DeleteDiaryColumnEvent value)? deleteDiaryColumn,
    TResult? Function(UpdateDiaryListSettingsEvent value)?
        updateDiaryListSettings,
    TResult? Function(ShareThemeEvent value)? shareTheme,
    TResult? Function(StartEditingColorEvent value)? startEditingColor,
    TResult? Function(StartEditingBordersEvent value)? startEditingBorders,
    TResult? Function(StartEditingBordersStyleEvent value)?
        startEditingBorderStyle,
    TResult? Function(TurnBackEditingEvent value)? turnBackEditing,
    TResult? Function(StartColumnDeletingEvent value)? startColumnDeleting,
    TResult? Function(StartColorThemeEditingEvent value)?
        startColorThemeEditing,
    TResult? Function(DeleteColumnsEvent value)? deleteColumns,
    TResult? Function(LoadThemesEvent value)? loadThemes,
    TResult? Function(LoadFromThemeEvent value)? loadFromTheme,
    TResult? Function(TakeThemeEvent value)? takeTheme,
  }) {
    return startEditingList?.call(this);
  }

  @override
  @optionalTypeArgs
  TResult maybeMap<TResult extends Object?>({
    TResult Function(CreateSampleEvent value)? createSample,
    TResult Function(InitialLoadEvent value)? initialLoad,
    TResult Function(GetDiaryListEvent value)? getDiaryList,
    TResult Function(GetDiaryColumnsEvent value)? getDiaryColumns,
    TResult Function(GetDiaryCellsEvent value)? getDiaryCells,
    TResult Function(SelectDiaryCellEvent value)? selectDiaryCell,
    TResult Function(SelectDiaryCellsEvent value)? selectDiaryCells,
    TResult Function(SelectCapitalCellEvent value)? selectCapitalCell,
    TResult Function(OnPanUpdateEvent value)? onPanUpdate,
    TResult Function(StartEditingListEvent value)? startEditingList,
    TResult Function(ReturnToLoadedEvent value)? returnToLoaded,
    TResult Function(ReturnToCellsSelectedEvent value)? returnToCellsSelected,
    TResult Function(UpdateDiaryListNameEvent value)? updateDiaryListName,
    TResult Function(ChangeDiaryCellEvent value)? changeDiaryCell,
    TResult Function(ChangeCapitalCellEvent value)? changeCapitalCell,
    TResult Function(UpdateDiaryCellInFirebaseEvent value)?
        updateDiaryCellInFirebase,
    TResult Function(ChangeDiaryCellsSettingsEvent value)?
        changeDiaryCellsSettings,
    TResult Function(ChangeDiaryCellsBordersSettingsEvent value)?
        changeDiaryCellsBordersSettings,
    TResult Function(ChangeCapitalCellSettingsEvent value)?
        changeCapitalCellSettings,
    TResult Function(UpdateDiaryCellSettingsInFirebaseEvent value)?
        updateDiaryCellSettingsInFirebase,
    TResult Function(UpdateCapitalCellSettingsInFirebaseEvent value)?
        updateCapitalCellSettingsInFirebase,
    TResult Function(UpdateCapitalCellWidthEvent value)? updateCapitalCellWidth,
    TResult Function(UpdateCapitalCellWidthInFirebaseEvent value)?
        updateCapitalCellWidthInFirebase,
    TResult Function(StartEditingCellsEvent value)? startEditingCells,
    TResult Function(CreateDiaryColumnEvent value)? createDiaryColumn,
    TResult Function(DeleteDiaryColumnEvent value)? deleteDiaryColumn,
    TResult Function(UpdateDiaryListSettingsEvent value)?
        updateDiaryListSettings,
    TResult Function(ShareThemeEvent value)? shareTheme,
    TResult Function(StartEditingColorEvent value)? startEditingColor,
    TResult Function(StartEditingBordersEvent value)? startEditingBorders,
    TResult Function(StartEditingBordersStyleEvent value)?
        startEditingBorderStyle,
    TResult Function(TurnBackEditingEvent value)? turnBackEditing,
    TResult Function(StartColumnDeletingEvent value)? startColumnDeleting,
    TResult Function(StartColorThemeEditingEvent value)? startColorThemeEditing,
    TResult Function(DeleteColumnsEvent value)? deleteColumns,
    TResult Function(LoadThemesEvent value)? loadThemes,
    TResult Function(LoadFromThemeEvent value)? loadFromTheme,
    TResult Function(TakeThemeEvent value)? takeTheme,
    required TResult orElse(),
  }) {
    if (startEditingList != null) {
      return startEditingList(this);
    }
    return orElse();
  }
}

abstract class StartEditingListEvent implements DiaryListEvent {
  const factory StartEditingListEvent({final DiaryList? selectedList}) =
      _$StartEditingListEvent;

  DiaryList? get selectedList;
  @JsonKey(ignore: true)
  _$$StartEditingListEventCopyWith<_$StartEditingListEvent> get copyWith =>
      throw _privateConstructorUsedError;
}

/// @nodoc
abstract class _$$ReturnToLoadedEventCopyWith<$Res> {
  factory _$$ReturnToLoadedEventCopyWith(_$ReturnToLoadedEvent value,
          $Res Function(_$ReturnToLoadedEvent) then) =
      __$$ReturnToLoadedEventCopyWithImpl<$Res>;
  @useResult
  $Res call({String? newName, String? addedColumnName, int? addedColumnCount});
}

/// @nodoc
class __$$ReturnToLoadedEventCopyWithImpl<$Res>
    extends _$DiaryListEventCopyWithImpl<$Res, _$ReturnToLoadedEvent>
    implements _$$ReturnToLoadedEventCopyWith<$Res> {
  __$$ReturnToLoadedEventCopyWithImpl(
      _$ReturnToLoadedEvent _value, $Res Function(_$ReturnToLoadedEvent) _then)
      : super(_value, _then);

  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? newName = freezed,
    Object? addedColumnName = freezed,
    Object? addedColumnCount = freezed,
  }) {
    return _then(_$ReturnToLoadedEvent(
      newName: freezed == newName
          ? _value.newName
          : newName // ignore: cast_nullable_to_non_nullable
              as String?,
      addedColumnName: freezed == addedColumnName
          ? _value.addedColumnName
          : addedColumnName // ignore: cast_nullable_to_non_nullable
              as String?,
      addedColumnCount: freezed == addedColumnCount
          ? _value.addedColumnCount
          : addedColumnCount // ignore: cast_nullable_to_non_nullable
              as int?,
    ));
  }
}

/// @nodoc

class _$ReturnToLoadedEvent implements ReturnToLoadedEvent {
  const _$ReturnToLoadedEvent(
      {this.newName, this.addedColumnName, this.addedColumnCount});

  @override
  final String? newName;
  @override
  final String? addedColumnName;
  @override
  final int? addedColumnCount;

  @override
  String toString() {
    return 'DiaryListEvent.returnToLoaded(newName: $newName, addedColumnName: $addedColumnName, addedColumnCount: $addedColumnCount)';
  }

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$ReturnToLoadedEvent &&
            (identical(other.newName, newName) || other.newName == newName) &&
            (identical(other.addedColumnName, addedColumnName) ||
                other.addedColumnName == addedColumnName) &&
            (identical(other.addedColumnCount, addedColumnCount) ||
                other.addedColumnCount == addedColumnCount));
  }

  @override
  int get hashCode =>
      Object.hash(runtimeType, newName, addedColumnName, addedColumnCount);

  @JsonKey(ignore: true)
  @override
  @pragma('vm:prefer-inline')
  _$$ReturnToLoadedEventCopyWith<_$ReturnToLoadedEvent> get copyWith =>
      __$$ReturnToLoadedEventCopyWithImpl<_$ReturnToLoadedEvent>(
          this, _$identity);

  @override
  @optionalTypeArgs
  TResult when<TResult extends Object?>({
    required TResult Function() createSample,
    required TResult Function() initialLoad,
    required TResult Function(DateTime date, int delay) getDiaryList,
    required TResult Function(DiaryList diaryList, List<DiaryList> lists)
        getDiaryColumns,
    required TResult Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells,
            List<DiaryList> lists)
        getDiaryCells,
    required TResult Function(DiaryCell diaryCell) selectDiaryCell,
    required TResult Function(List<DiaryCell> diaryCells) selectDiaryCells,
    required TResult Function(CapitalCell capitalCell) selectCapitalCell,
    required TResult Function(
            DiaryCell diaryCell,
            GlobalObjectKey<State<StatefulWidget>> cellKey,
            DragUpdateDetails details,
            double scaleFactor)
        onPanUpdate,
    required TResult Function(DiaryList? selectedList) startEditingList,
    required TResult Function(
            String? newName, String? addedColumnName, int? addedColumnCount)
        returnToLoaded,
    required TResult Function() returnToCellsSelected,
    required TResult Function(DiaryList diaryList, String newName)
        updateDiaryListName,
    required TResult Function(DiaryCell diaryCell, String? textFieldText)
        changeDiaryCell,
    required TResult Function(CapitalCell capitalCell, String? textFieldText)
        changeCapitalCell,
    required TResult Function(DiaryCell diaryCell, String? textFieldText)
        updateDiaryCellInFirebase,
    required TResult Function(
            FontWeightEnum? fontWeight,
            TextDecorationEnum? textDecoration,
            FontStyleEnum? fontStyle,
            double? fontSize,
            String? color,
            HorizontalAlignmentsEnum? horizontalAlignment,
            VerticalAlignmentsEnum? verticalAlignment,
            String? backgroundColor)
        changeDiaryCellsSettings,
    required TResult Function(BordersEditingEnum bordersEditingEnum,
            BordersStyleEnum bordersStyleEnum, Color bordersColor)
        changeDiaryCellsBordersSettings,
    required TResult Function(
            FontWeightEnum? fontWeight,
            TextDecorationEnum? textDecoration,
            FontStyleEnum? fontStyle,
            double? fontSize,
            String? color,
            HorizontalAlignmentsEnum? horizontalAlignment,
            VerticalAlignmentsEnum? verticalAlignment,
            String? backgroundColor,
            BordersStyleEnum? bordersStyleEnum,
            Color? bordersColor)
        changeCapitalCellSettings,
    required TResult Function(
            DiaryCell diaryCell,
            int index,
            DiaryCellTextSettings? newTextSettings,
            DiaryCellSettings? newSettings)
        updateDiaryCellSettingsInFirebase,
    required TResult Function(DiaryColumnSettings newSettings)
        updateCapitalCellSettingsInFirebase,
    required TResult Function(PointerMoveEvent details) updateCapitalCellWidth,
    required TResult Function(PointerUpEvent details)
        updateCapitalCellWidthInFirebase,
    required TResult Function(bool isTextEditing) startEditingCells,
    required TResult Function(DiaryList diaryList, String name,
            int columnsCount, List<DiaryColumn> diaryColumns)
        createDiaryColumn,
    required TResult Function(DiaryList diaryList, String columnId)
        deleteDiaryColumn,
    required TResult Function(DiaryList diaryList, String? themeColor,
            String? themeBorderColor, String? themePanelBackgroundColor)
        updateDiaryListSettings,
    required TResult Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<DiaryCell> diaryCells,
            List<CapitalCell> capitalCells,
            String themeName,
            String description)
        shareTheme,
    required TResult Function() startEditingColor,
    required TResult Function() startEditingBorders,
    required TResult Function() startEditingBorderStyle,
    required TResult Function() turnBackEditing,
    required TResult Function() startColumnDeleting,
    required TResult Function() startColorThemeEditing,
    required TResult Function() deleteColumns,
    required TResult Function() loadThemes,
    required TResult Function(ListTheme listTheme) loadFromTheme,
    required TResult Function(ListTheme listTheme) takeTheme,
  }) {
    return returnToLoaded(newName, addedColumnName, addedColumnCount);
  }

  @override
  @optionalTypeArgs
  TResult? whenOrNull<TResult extends Object?>({
    TResult? Function()? createSample,
    TResult? Function()? initialLoad,
    TResult? Function(DateTime date, int delay)? getDiaryList,
    TResult? Function(DiaryList diaryList, List<DiaryList> lists)?
        getDiaryColumns,
    TResult? Function(DiaryList diaryList, List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells, List<DiaryList> lists)?
        getDiaryCells,
    TResult? Function(DiaryCell diaryCell)? selectDiaryCell,
    TResult? Function(List<DiaryCell> diaryCells)? selectDiaryCells,
    TResult? Function(CapitalCell capitalCell)? selectCapitalCell,
    TResult? Function(
            DiaryCell diaryCell,
            GlobalObjectKey<State<StatefulWidget>> cellKey,
            DragUpdateDetails details,
            double scaleFactor)?
        onPanUpdate,
    TResult? Function(DiaryList? selectedList)? startEditingList,
    TResult? Function(
            String? newName, String? addedColumnName, int? addedColumnCount)?
        returnToLoaded,
    TResult? Function()? returnToCellsSelected,
    TResult? Function(DiaryList diaryList, String newName)? updateDiaryListName,
    TResult? Function(DiaryCell diaryCell, String? textFieldText)?
        changeDiaryCell,
    TResult? Function(CapitalCell capitalCell, String? textFieldText)?
        changeCapitalCell,
    TResult? Function(DiaryCell diaryCell, String? textFieldText)?
        updateDiaryCellInFirebase,
    TResult? Function(
            FontWeightEnum? fontWeight,
            TextDecorationEnum? textDecoration,
            FontStyleEnum? fontStyle,
            double? fontSize,
            String? color,
            HorizontalAlignmentsEnum? horizontalAlignment,
            VerticalAlignmentsEnum? verticalAlignment,
            String? backgroundColor)?
        changeDiaryCellsSettings,
    TResult? Function(BordersEditingEnum bordersEditingEnum,
            BordersStyleEnum bordersStyleEnum, Color bordersColor)?
        changeDiaryCellsBordersSettings,
    TResult? Function(
            FontWeightEnum? fontWeight,
            TextDecorationEnum? textDecoration,
            FontStyleEnum? fontStyle,
            double? fontSize,
            String? color,
            HorizontalAlignmentsEnum? horizontalAlignment,
            VerticalAlignmentsEnum? verticalAlignment,
            String? backgroundColor,
            BordersStyleEnum? bordersStyleEnum,
            Color? bordersColor)?
        changeCapitalCellSettings,
    TResult? Function(
            DiaryCell diaryCell,
            int index,
            DiaryCellTextSettings? newTextSettings,
            DiaryCellSettings? newSettings)?
        updateDiaryCellSettingsInFirebase,
    TResult? Function(DiaryColumnSettings newSettings)?
        updateCapitalCellSettingsInFirebase,
    TResult? Function(PointerMoveEvent details)? updateCapitalCellWidth,
    TResult? Function(PointerUpEvent details)? updateCapitalCellWidthInFirebase,
    TResult? Function(bool isTextEditing)? startEditingCells,
    TResult? Function(DiaryList diaryList, String name, int columnsCount,
            List<DiaryColumn> diaryColumns)?
        createDiaryColumn,
    TResult? Function(DiaryList diaryList, String columnId)? deleteDiaryColumn,
    TResult? Function(DiaryList diaryList, String? themeColor,
            String? themeBorderColor, String? themePanelBackgroundColor)?
        updateDiaryListSettings,
    TResult? Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<DiaryCell> diaryCells,
            List<CapitalCell> capitalCells,
            String themeName,
            String description)?
        shareTheme,
    TResult? Function()? startEditingColor,
    TResult? Function()? startEditingBorders,
    TResult? Function()? startEditingBorderStyle,
    TResult? Function()? turnBackEditing,
    TResult? Function()? startColumnDeleting,
    TResult? Function()? startColorThemeEditing,
    TResult? Function()? deleteColumns,
    TResult? Function()? loadThemes,
    TResult? Function(ListTheme listTheme)? loadFromTheme,
    TResult? Function(ListTheme listTheme)? takeTheme,
  }) {
    return returnToLoaded?.call(newName, addedColumnName, addedColumnCount);
  }

  @override
  @optionalTypeArgs
  TResult maybeWhen<TResult extends Object?>({
    TResult Function()? createSample,
    TResult Function()? initialLoad,
    TResult Function(DateTime date, int delay)? getDiaryList,
    TResult Function(DiaryList diaryList, List<DiaryList> lists)?
        getDiaryColumns,
    TResult Function(DiaryList diaryList, List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells, List<DiaryList> lists)?
        getDiaryCells,
    TResult Function(DiaryCell diaryCell)? selectDiaryCell,
    TResult Function(List<DiaryCell> diaryCells)? selectDiaryCells,
    TResult Function(CapitalCell capitalCell)? selectCapitalCell,
    TResult Function(
            DiaryCell diaryCell,
            GlobalObjectKey<State<StatefulWidget>> cellKey,
            DragUpdateDetails details,
            double scaleFactor)?
        onPanUpdate,
    TResult Function(DiaryList? selectedList)? startEditingList,
    TResult Function(
            String? newName, String? addedColumnName, int? addedColumnCount)?
        returnToLoaded,
    TResult Function()? returnToCellsSelected,
    TResult Function(DiaryList diaryList, String newName)? updateDiaryListName,
    TResult Function(DiaryCell diaryCell, String? textFieldText)?
        changeDiaryCell,
    TResult Function(CapitalCell capitalCell, String? textFieldText)?
        changeCapitalCell,
    TResult Function(DiaryCell diaryCell, String? textFieldText)?
        updateDiaryCellInFirebase,
    TResult Function(
            FontWeightEnum? fontWeight,
            TextDecorationEnum? textDecoration,
            FontStyleEnum? fontStyle,
            double? fontSize,
            String? color,
            HorizontalAlignmentsEnum? horizontalAlignment,
            VerticalAlignmentsEnum? verticalAlignment,
            String? backgroundColor)?
        changeDiaryCellsSettings,
    TResult Function(BordersEditingEnum bordersEditingEnum,
            BordersStyleEnum bordersStyleEnum, Color bordersColor)?
        changeDiaryCellsBordersSettings,
    TResult Function(
            FontWeightEnum? fontWeight,
            TextDecorationEnum? textDecoration,
            FontStyleEnum? fontStyle,
            double? fontSize,
            String? color,
            HorizontalAlignmentsEnum? horizontalAlignment,
            VerticalAlignmentsEnum? verticalAlignment,
            String? backgroundColor,
            BordersStyleEnum? bordersStyleEnum,
            Color? bordersColor)?
        changeCapitalCellSettings,
    TResult Function(
            DiaryCell diaryCell,
            int index,
            DiaryCellTextSettings? newTextSettings,
            DiaryCellSettings? newSettings)?
        updateDiaryCellSettingsInFirebase,
    TResult Function(DiaryColumnSettings newSettings)?
        updateCapitalCellSettingsInFirebase,
    TResult Function(PointerMoveEvent details)? updateCapitalCellWidth,
    TResult Function(PointerUpEvent details)? updateCapitalCellWidthInFirebase,
    TResult Function(bool isTextEditing)? startEditingCells,
    TResult Function(DiaryList diaryList, String name, int columnsCount,
            List<DiaryColumn> diaryColumns)?
        createDiaryColumn,
    TResult Function(DiaryList diaryList, String columnId)? deleteDiaryColumn,
    TResult Function(DiaryList diaryList, String? themeColor,
            String? themeBorderColor, String? themePanelBackgroundColor)?
        updateDiaryListSettings,
    TResult Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<DiaryCell> diaryCells,
            List<CapitalCell> capitalCells,
            String themeName,
            String description)?
        shareTheme,
    TResult Function()? startEditingColor,
    TResult Function()? startEditingBorders,
    TResult Function()? startEditingBorderStyle,
    TResult Function()? turnBackEditing,
    TResult Function()? startColumnDeleting,
    TResult Function()? startColorThemeEditing,
    TResult Function()? deleteColumns,
    TResult Function()? loadThemes,
    TResult Function(ListTheme listTheme)? loadFromTheme,
    TResult Function(ListTheme listTheme)? takeTheme,
    required TResult orElse(),
  }) {
    if (returnToLoaded != null) {
      return returnToLoaded(newName, addedColumnName, addedColumnCount);
    }
    return orElse();
  }

  @override
  @optionalTypeArgs
  TResult map<TResult extends Object?>({
    required TResult Function(CreateSampleEvent value) createSample,
    required TResult Function(InitialLoadEvent value) initialLoad,
    required TResult Function(GetDiaryListEvent value) getDiaryList,
    required TResult Function(GetDiaryColumnsEvent value) getDiaryColumns,
    required TResult Function(GetDiaryCellsEvent value) getDiaryCells,
    required TResult Function(SelectDiaryCellEvent value) selectDiaryCell,
    required TResult Function(SelectDiaryCellsEvent value) selectDiaryCells,
    required TResult Function(SelectCapitalCellEvent value) selectCapitalCell,
    required TResult Function(OnPanUpdateEvent value) onPanUpdate,
    required TResult Function(StartEditingListEvent value) startEditingList,
    required TResult Function(ReturnToLoadedEvent value) returnToLoaded,
    required TResult Function(ReturnToCellsSelectedEvent value)
        returnToCellsSelected,
    required TResult Function(UpdateDiaryListNameEvent value)
        updateDiaryListName,
    required TResult Function(ChangeDiaryCellEvent value) changeDiaryCell,
    required TResult Function(ChangeCapitalCellEvent value) changeCapitalCell,
    required TResult Function(UpdateDiaryCellInFirebaseEvent value)
        updateDiaryCellInFirebase,
    required TResult Function(ChangeDiaryCellsSettingsEvent value)
        changeDiaryCellsSettings,
    required TResult Function(ChangeDiaryCellsBordersSettingsEvent value)
        changeDiaryCellsBordersSettings,
    required TResult Function(ChangeCapitalCellSettingsEvent value)
        changeCapitalCellSettings,
    required TResult Function(UpdateDiaryCellSettingsInFirebaseEvent value)
        updateDiaryCellSettingsInFirebase,
    required TResult Function(UpdateCapitalCellSettingsInFirebaseEvent value)
        updateCapitalCellSettingsInFirebase,
    required TResult Function(UpdateCapitalCellWidthEvent value)
        updateCapitalCellWidth,
    required TResult Function(UpdateCapitalCellWidthInFirebaseEvent value)
        updateCapitalCellWidthInFirebase,
    required TResult Function(StartEditingCellsEvent value) startEditingCells,
    required TResult Function(CreateDiaryColumnEvent value) createDiaryColumn,
    required TResult Function(DeleteDiaryColumnEvent value) deleteDiaryColumn,
    required TResult Function(UpdateDiaryListSettingsEvent value)
        updateDiaryListSettings,
    required TResult Function(ShareThemeEvent value) shareTheme,
    required TResult Function(StartEditingColorEvent value) startEditingColor,
    required TResult Function(StartEditingBordersEvent value)
        startEditingBorders,
    required TResult Function(StartEditingBordersStyleEvent value)
        startEditingBorderStyle,
    required TResult Function(TurnBackEditingEvent value) turnBackEditing,
    required TResult Function(StartColumnDeletingEvent value)
        startColumnDeleting,
    required TResult Function(StartColorThemeEditingEvent value)
        startColorThemeEditing,
    required TResult Function(DeleteColumnsEvent value) deleteColumns,
    required TResult Function(LoadThemesEvent value) loadThemes,
    required TResult Function(LoadFromThemeEvent value) loadFromTheme,
    required TResult Function(TakeThemeEvent value) takeTheme,
  }) {
    return returnToLoaded(this);
  }

  @override
  @optionalTypeArgs
  TResult? mapOrNull<TResult extends Object?>({
    TResult? Function(CreateSampleEvent value)? createSample,
    TResult? Function(InitialLoadEvent value)? initialLoad,
    TResult? Function(GetDiaryListEvent value)? getDiaryList,
    TResult? Function(GetDiaryColumnsEvent value)? getDiaryColumns,
    TResult? Function(GetDiaryCellsEvent value)? getDiaryCells,
    TResult? Function(SelectDiaryCellEvent value)? selectDiaryCell,
    TResult? Function(SelectDiaryCellsEvent value)? selectDiaryCells,
    TResult? Function(SelectCapitalCellEvent value)? selectCapitalCell,
    TResult? Function(OnPanUpdateEvent value)? onPanUpdate,
    TResult? Function(StartEditingListEvent value)? startEditingList,
    TResult? Function(ReturnToLoadedEvent value)? returnToLoaded,
    TResult? Function(ReturnToCellsSelectedEvent value)? returnToCellsSelected,
    TResult? Function(UpdateDiaryListNameEvent value)? updateDiaryListName,
    TResult? Function(ChangeDiaryCellEvent value)? changeDiaryCell,
    TResult? Function(ChangeCapitalCellEvent value)? changeCapitalCell,
    TResult? Function(UpdateDiaryCellInFirebaseEvent value)?
        updateDiaryCellInFirebase,
    TResult? Function(ChangeDiaryCellsSettingsEvent value)?
        changeDiaryCellsSettings,
    TResult? Function(ChangeDiaryCellsBordersSettingsEvent value)?
        changeDiaryCellsBordersSettings,
    TResult? Function(ChangeCapitalCellSettingsEvent value)?
        changeCapitalCellSettings,
    TResult? Function(UpdateDiaryCellSettingsInFirebaseEvent value)?
        updateDiaryCellSettingsInFirebase,
    TResult? Function(UpdateCapitalCellSettingsInFirebaseEvent value)?
        updateCapitalCellSettingsInFirebase,
    TResult? Function(UpdateCapitalCellWidthEvent value)?
        updateCapitalCellWidth,
    TResult? Function(UpdateCapitalCellWidthInFirebaseEvent value)?
        updateCapitalCellWidthInFirebase,
    TResult? Function(StartEditingCellsEvent value)? startEditingCells,
    TResult? Function(CreateDiaryColumnEvent value)? createDiaryColumn,
    TResult? Function(DeleteDiaryColumnEvent value)? deleteDiaryColumn,
    TResult? Function(UpdateDiaryListSettingsEvent value)?
        updateDiaryListSettings,
    TResult? Function(ShareThemeEvent value)? shareTheme,
    TResult? Function(StartEditingColorEvent value)? startEditingColor,
    TResult? Function(StartEditingBordersEvent value)? startEditingBorders,
    TResult? Function(StartEditingBordersStyleEvent value)?
        startEditingBorderStyle,
    TResult? Function(TurnBackEditingEvent value)? turnBackEditing,
    TResult? Function(StartColumnDeletingEvent value)? startColumnDeleting,
    TResult? Function(StartColorThemeEditingEvent value)?
        startColorThemeEditing,
    TResult? Function(DeleteColumnsEvent value)? deleteColumns,
    TResult? Function(LoadThemesEvent value)? loadThemes,
    TResult? Function(LoadFromThemeEvent value)? loadFromTheme,
    TResult? Function(TakeThemeEvent value)? takeTheme,
  }) {
    return returnToLoaded?.call(this);
  }

  @override
  @optionalTypeArgs
  TResult maybeMap<TResult extends Object?>({
    TResult Function(CreateSampleEvent value)? createSample,
    TResult Function(InitialLoadEvent value)? initialLoad,
    TResult Function(GetDiaryListEvent value)? getDiaryList,
    TResult Function(GetDiaryColumnsEvent value)? getDiaryColumns,
    TResult Function(GetDiaryCellsEvent value)? getDiaryCells,
    TResult Function(SelectDiaryCellEvent value)? selectDiaryCell,
    TResult Function(SelectDiaryCellsEvent value)? selectDiaryCells,
    TResult Function(SelectCapitalCellEvent value)? selectCapitalCell,
    TResult Function(OnPanUpdateEvent value)? onPanUpdate,
    TResult Function(StartEditingListEvent value)? startEditingList,
    TResult Function(ReturnToLoadedEvent value)? returnToLoaded,
    TResult Function(ReturnToCellsSelectedEvent value)? returnToCellsSelected,
    TResult Function(UpdateDiaryListNameEvent value)? updateDiaryListName,
    TResult Function(ChangeDiaryCellEvent value)? changeDiaryCell,
    TResult Function(ChangeCapitalCellEvent value)? changeCapitalCell,
    TResult Function(UpdateDiaryCellInFirebaseEvent value)?
        updateDiaryCellInFirebase,
    TResult Function(ChangeDiaryCellsSettingsEvent value)?
        changeDiaryCellsSettings,
    TResult Function(ChangeDiaryCellsBordersSettingsEvent value)?
        changeDiaryCellsBordersSettings,
    TResult Function(ChangeCapitalCellSettingsEvent value)?
        changeCapitalCellSettings,
    TResult Function(UpdateDiaryCellSettingsInFirebaseEvent value)?
        updateDiaryCellSettingsInFirebase,
    TResult Function(UpdateCapitalCellSettingsInFirebaseEvent value)?
        updateCapitalCellSettingsInFirebase,
    TResult Function(UpdateCapitalCellWidthEvent value)? updateCapitalCellWidth,
    TResult Function(UpdateCapitalCellWidthInFirebaseEvent value)?
        updateCapitalCellWidthInFirebase,
    TResult Function(StartEditingCellsEvent value)? startEditingCells,
    TResult Function(CreateDiaryColumnEvent value)? createDiaryColumn,
    TResult Function(DeleteDiaryColumnEvent value)? deleteDiaryColumn,
    TResult Function(UpdateDiaryListSettingsEvent value)?
        updateDiaryListSettings,
    TResult Function(ShareThemeEvent value)? shareTheme,
    TResult Function(StartEditingColorEvent value)? startEditingColor,
    TResult Function(StartEditingBordersEvent value)? startEditingBorders,
    TResult Function(StartEditingBordersStyleEvent value)?
        startEditingBorderStyle,
    TResult Function(TurnBackEditingEvent value)? turnBackEditing,
    TResult Function(StartColumnDeletingEvent value)? startColumnDeleting,
    TResult Function(StartColorThemeEditingEvent value)? startColorThemeEditing,
    TResult Function(DeleteColumnsEvent value)? deleteColumns,
    TResult Function(LoadThemesEvent value)? loadThemes,
    TResult Function(LoadFromThemeEvent value)? loadFromTheme,
    TResult Function(TakeThemeEvent value)? takeTheme,
    required TResult orElse(),
  }) {
    if (returnToLoaded != null) {
      return returnToLoaded(this);
    }
    return orElse();
  }
}

abstract class ReturnToLoadedEvent implements DiaryListEvent {
  const factory ReturnToLoadedEvent(
      {final String? newName,
      final String? addedColumnName,
      final int? addedColumnCount}) = _$ReturnToLoadedEvent;

  String? get newName;
  String? get addedColumnName;
  int? get addedColumnCount;
  @JsonKey(ignore: true)
  _$$ReturnToLoadedEventCopyWith<_$ReturnToLoadedEvent> get copyWith =>
      throw _privateConstructorUsedError;
}

/// @nodoc
abstract class _$$ReturnToCellsSelectedEventCopyWith<$Res> {
  factory _$$ReturnToCellsSelectedEventCopyWith(
          _$ReturnToCellsSelectedEvent value,
          $Res Function(_$ReturnToCellsSelectedEvent) then) =
      __$$ReturnToCellsSelectedEventCopyWithImpl<$Res>;
}

/// @nodoc
class __$$ReturnToCellsSelectedEventCopyWithImpl<$Res>
    extends _$DiaryListEventCopyWithImpl<$Res, _$ReturnToCellsSelectedEvent>
    implements _$$ReturnToCellsSelectedEventCopyWith<$Res> {
  __$$ReturnToCellsSelectedEventCopyWithImpl(
      _$ReturnToCellsSelectedEvent _value,
      $Res Function(_$ReturnToCellsSelectedEvent) _then)
      : super(_value, _then);
}

/// @nodoc

class _$ReturnToCellsSelectedEvent implements ReturnToCellsSelectedEvent {
  const _$ReturnToCellsSelectedEvent();

  @override
  String toString() {
    return 'DiaryListEvent.returnToCellsSelected()';
  }

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$ReturnToCellsSelectedEvent);
  }

  @override
  int get hashCode => runtimeType.hashCode;

  @override
  @optionalTypeArgs
  TResult when<TResult extends Object?>({
    required TResult Function() createSample,
    required TResult Function() initialLoad,
    required TResult Function(DateTime date, int delay) getDiaryList,
    required TResult Function(DiaryList diaryList, List<DiaryList> lists)
        getDiaryColumns,
    required TResult Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells,
            List<DiaryList> lists)
        getDiaryCells,
    required TResult Function(DiaryCell diaryCell) selectDiaryCell,
    required TResult Function(List<DiaryCell> diaryCells) selectDiaryCells,
    required TResult Function(CapitalCell capitalCell) selectCapitalCell,
    required TResult Function(
            DiaryCell diaryCell,
            GlobalObjectKey<State<StatefulWidget>> cellKey,
            DragUpdateDetails details,
            double scaleFactor)
        onPanUpdate,
    required TResult Function(DiaryList? selectedList) startEditingList,
    required TResult Function(
            String? newName, String? addedColumnName, int? addedColumnCount)
        returnToLoaded,
    required TResult Function() returnToCellsSelected,
    required TResult Function(DiaryList diaryList, String newName)
        updateDiaryListName,
    required TResult Function(DiaryCell diaryCell, String? textFieldText)
        changeDiaryCell,
    required TResult Function(CapitalCell capitalCell, String? textFieldText)
        changeCapitalCell,
    required TResult Function(DiaryCell diaryCell, String? textFieldText)
        updateDiaryCellInFirebase,
    required TResult Function(
            FontWeightEnum? fontWeight,
            TextDecorationEnum? textDecoration,
            FontStyleEnum? fontStyle,
            double? fontSize,
            String? color,
            HorizontalAlignmentsEnum? horizontalAlignment,
            VerticalAlignmentsEnum? verticalAlignment,
            String? backgroundColor)
        changeDiaryCellsSettings,
    required TResult Function(BordersEditingEnum bordersEditingEnum,
            BordersStyleEnum bordersStyleEnum, Color bordersColor)
        changeDiaryCellsBordersSettings,
    required TResult Function(
            FontWeightEnum? fontWeight,
            TextDecorationEnum? textDecoration,
            FontStyleEnum? fontStyle,
            double? fontSize,
            String? color,
            HorizontalAlignmentsEnum? horizontalAlignment,
            VerticalAlignmentsEnum? verticalAlignment,
            String? backgroundColor,
            BordersStyleEnum? bordersStyleEnum,
            Color? bordersColor)
        changeCapitalCellSettings,
    required TResult Function(
            DiaryCell diaryCell,
            int index,
            DiaryCellTextSettings? newTextSettings,
            DiaryCellSettings? newSettings)
        updateDiaryCellSettingsInFirebase,
    required TResult Function(DiaryColumnSettings newSettings)
        updateCapitalCellSettingsInFirebase,
    required TResult Function(PointerMoveEvent details) updateCapitalCellWidth,
    required TResult Function(PointerUpEvent details)
        updateCapitalCellWidthInFirebase,
    required TResult Function(bool isTextEditing) startEditingCells,
    required TResult Function(DiaryList diaryList, String name,
            int columnsCount, List<DiaryColumn> diaryColumns)
        createDiaryColumn,
    required TResult Function(DiaryList diaryList, String columnId)
        deleteDiaryColumn,
    required TResult Function(DiaryList diaryList, String? themeColor,
            String? themeBorderColor, String? themePanelBackgroundColor)
        updateDiaryListSettings,
    required TResult Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<DiaryCell> diaryCells,
            List<CapitalCell> capitalCells,
            String themeName,
            String description)
        shareTheme,
    required TResult Function() startEditingColor,
    required TResult Function() startEditingBorders,
    required TResult Function() startEditingBorderStyle,
    required TResult Function() turnBackEditing,
    required TResult Function() startColumnDeleting,
    required TResult Function() startColorThemeEditing,
    required TResult Function() deleteColumns,
    required TResult Function() loadThemes,
    required TResult Function(ListTheme listTheme) loadFromTheme,
    required TResult Function(ListTheme listTheme) takeTheme,
  }) {
    return returnToCellsSelected();
  }

  @override
  @optionalTypeArgs
  TResult? whenOrNull<TResult extends Object?>({
    TResult? Function()? createSample,
    TResult? Function()? initialLoad,
    TResult? Function(DateTime date, int delay)? getDiaryList,
    TResult? Function(DiaryList diaryList, List<DiaryList> lists)?
        getDiaryColumns,
    TResult? Function(DiaryList diaryList, List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells, List<DiaryList> lists)?
        getDiaryCells,
    TResult? Function(DiaryCell diaryCell)? selectDiaryCell,
    TResult? Function(List<DiaryCell> diaryCells)? selectDiaryCells,
    TResult? Function(CapitalCell capitalCell)? selectCapitalCell,
    TResult? Function(
            DiaryCell diaryCell,
            GlobalObjectKey<State<StatefulWidget>> cellKey,
            DragUpdateDetails details,
            double scaleFactor)?
        onPanUpdate,
    TResult? Function(DiaryList? selectedList)? startEditingList,
    TResult? Function(
            String? newName, String? addedColumnName, int? addedColumnCount)?
        returnToLoaded,
    TResult? Function()? returnToCellsSelected,
    TResult? Function(DiaryList diaryList, String newName)? updateDiaryListName,
    TResult? Function(DiaryCell diaryCell, String? textFieldText)?
        changeDiaryCell,
    TResult? Function(CapitalCell capitalCell, String? textFieldText)?
        changeCapitalCell,
    TResult? Function(DiaryCell diaryCell, String? textFieldText)?
        updateDiaryCellInFirebase,
    TResult? Function(
            FontWeightEnum? fontWeight,
            TextDecorationEnum? textDecoration,
            FontStyleEnum? fontStyle,
            double? fontSize,
            String? color,
            HorizontalAlignmentsEnum? horizontalAlignment,
            VerticalAlignmentsEnum? verticalAlignment,
            String? backgroundColor)?
        changeDiaryCellsSettings,
    TResult? Function(BordersEditingEnum bordersEditingEnum,
            BordersStyleEnum bordersStyleEnum, Color bordersColor)?
        changeDiaryCellsBordersSettings,
    TResult? Function(
            FontWeightEnum? fontWeight,
            TextDecorationEnum? textDecoration,
            FontStyleEnum? fontStyle,
            double? fontSize,
            String? color,
            HorizontalAlignmentsEnum? horizontalAlignment,
            VerticalAlignmentsEnum? verticalAlignment,
            String? backgroundColor,
            BordersStyleEnum? bordersStyleEnum,
            Color? bordersColor)?
        changeCapitalCellSettings,
    TResult? Function(
            DiaryCell diaryCell,
            int index,
            DiaryCellTextSettings? newTextSettings,
            DiaryCellSettings? newSettings)?
        updateDiaryCellSettingsInFirebase,
    TResult? Function(DiaryColumnSettings newSettings)?
        updateCapitalCellSettingsInFirebase,
    TResult? Function(PointerMoveEvent details)? updateCapitalCellWidth,
    TResult? Function(PointerUpEvent details)? updateCapitalCellWidthInFirebase,
    TResult? Function(bool isTextEditing)? startEditingCells,
    TResult? Function(DiaryList diaryList, String name, int columnsCount,
            List<DiaryColumn> diaryColumns)?
        createDiaryColumn,
    TResult? Function(DiaryList diaryList, String columnId)? deleteDiaryColumn,
    TResult? Function(DiaryList diaryList, String? themeColor,
            String? themeBorderColor, String? themePanelBackgroundColor)?
        updateDiaryListSettings,
    TResult? Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<DiaryCell> diaryCells,
            List<CapitalCell> capitalCells,
            String themeName,
            String description)?
        shareTheme,
    TResult? Function()? startEditingColor,
    TResult? Function()? startEditingBorders,
    TResult? Function()? startEditingBorderStyle,
    TResult? Function()? turnBackEditing,
    TResult? Function()? startColumnDeleting,
    TResult? Function()? startColorThemeEditing,
    TResult? Function()? deleteColumns,
    TResult? Function()? loadThemes,
    TResult? Function(ListTheme listTheme)? loadFromTheme,
    TResult? Function(ListTheme listTheme)? takeTheme,
  }) {
    return returnToCellsSelected?.call();
  }

  @override
  @optionalTypeArgs
  TResult maybeWhen<TResult extends Object?>({
    TResult Function()? createSample,
    TResult Function()? initialLoad,
    TResult Function(DateTime date, int delay)? getDiaryList,
    TResult Function(DiaryList diaryList, List<DiaryList> lists)?
        getDiaryColumns,
    TResult Function(DiaryList diaryList, List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells, List<DiaryList> lists)?
        getDiaryCells,
    TResult Function(DiaryCell diaryCell)? selectDiaryCell,
    TResult Function(List<DiaryCell> diaryCells)? selectDiaryCells,
    TResult Function(CapitalCell capitalCell)? selectCapitalCell,
    TResult Function(
            DiaryCell diaryCell,
            GlobalObjectKey<State<StatefulWidget>> cellKey,
            DragUpdateDetails details,
            double scaleFactor)?
        onPanUpdate,
    TResult Function(DiaryList? selectedList)? startEditingList,
    TResult Function(
            String? newName, String? addedColumnName, int? addedColumnCount)?
        returnToLoaded,
    TResult Function()? returnToCellsSelected,
    TResult Function(DiaryList diaryList, String newName)? updateDiaryListName,
    TResult Function(DiaryCell diaryCell, String? textFieldText)?
        changeDiaryCell,
    TResult Function(CapitalCell capitalCell, String? textFieldText)?
        changeCapitalCell,
    TResult Function(DiaryCell diaryCell, String? textFieldText)?
        updateDiaryCellInFirebase,
    TResult Function(
            FontWeightEnum? fontWeight,
            TextDecorationEnum? textDecoration,
            FontStyleEnum? fontStyle,
            double? fontSize,
            String? color,
            HorizontalAlignmentsEnum? horizontalAlignment,
            VerticalAlignmentsEnum? verticalAlignment,
            String? backgroundColor)?
        changeDiaryCellsSettings,
    TResult Function(BordersEditingEnum bordersEditingEnum,
            BordersStyleEnum bordersStyleEnum, Color bordersColor)?
        changeDiaryCellsBordersSettings,
    TResult Function(
            FontWeightEnum? fontWeight,
            TextDecorationEnum? textDecoration,
            FontStyleEnum? fontStyle,
            double? fontSize,
            String? color,
            HorizontalAlignmentsEnum? horizontalAlignment,
            VerticalAlignmentsEnum? verticalAlignment,
            String? backgroundColor,
            BordersStyleEnum? bordersStyleEnum,
            Color? bordersColor)?
        changeCapitalCellSettings,
    TResult Function(
            DiaryCell diaryCell,
            int index,
            DiaryCellTextSettings? newTextSettings,
            DiaryCellSettings? newSettings)?
        updateDiaryCellSettingsInFirebase,
    TResult Function(DiaryColumnSettings newSettings)?
        updateCapitalCellSettingsInFirebase,
    TResult Function(PointerMoveEvent details)? updateCapitalCellWidth,
    TResult Function(PointerUpEvent details)? updateCapitalCellWidthInFirebase,
    TResult Function(bool isTextEditing)? startEditingCells,
    TResult Function(DiaryList diaryList, String name, int columnsCount,
            List<DiaryColumn> diaryColumns)?
        createDiaryColumn,
    TResult Function(DiaryList diaryList, String columnId)? deleteDiaryColumn,
    TResult Function(DiaryList diaryList, String? themeColor,
            String? themeBorderColor, String? themePanelBackgroundColor)?
        updateDiaryListSettings,
    TResult Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<DiaryCell> diaryCells,
            List<CapitalCell> capitalCells,
            String themeName,
            String description)?
        shareTheme,
    TResult Function()? startEditingColor,
    TResult Function()? startEditingBorders,
    TResult Function()? startEditingBorderStyle,
    TResult Function()? turnBackEditing,
    TResult Function()? startColumnDeleting,
    TResult Function()? startColorThemeEditing,
    TResult Function()? deleteColumns,
    TResult Function()? loadThemes,
    TResult Function(ListTheme listTheme)? loadFromTheme,
    TResult Function(ListTheme listTheme)? takeTheme,
    required TResult orElse(),
  }) {
    if (returnToCellsSelected != null) {
      return returnToCellsSelected();
    }
    return orElse();
  }

  @override
  @optionalTypeArgs
  TResult map<TResult extends Object?>({
    required TResult Function(CreateSampleEvent value) createSample,
    required TResult Function(InitialLoadEvent value) initialLoad,
    required TResult Function(GetDiaryListEvent value) getDiaryList,
    required TResult Function(GetDiaryColumnsEvent value) getDiaryColumns,
    required TResult Function(GetDiaryCellsEvent value) getDiaryCells,
    required TResult Function(SelectDiaryCellEvent value) selectDiaryCell,
    required TResult Function(SelectDiaryCellsEvent value) selectDiaryCells,
    required TResult Function(SelectCapitalCellEvent value) selectCapitalCell,
    required TResult Function(OnPanUpdateEvent value) onPanUpdate,
    required TResult Function(StartEditingListEvent value) startEditingList,
    required TResult Function(ReturnToLoadedEvent value) returnToLoaded,
    required TResult Function(ReturnToCellsSelectedEvent value)
        returnToCellsSelected,
    required TResult Function(UpdateDiaryListNameEvent value)
        updateDiaryListName,
    required TResult Function(ChangeDiaryCellEvent value) changeDiaryCell,
    required TResult Function(ChangeCapitalCellEvent value) changeCapitalCell,
    required TResult Function(UpdateDiaryCellInFirebaseEvent value)
        updateDiaryCellInFirebase,
    required TResult Function(ChangeDiaryCellsSettingsEvent value)
        changeDiaryCellsSettings,
    required TResult Function(ChangeDiaryCellsBordersSettingsEvent value)
        changeDiaryCellsBordersSettings,
    required TResult Function(ChangeCapitalCellSettingsEvent value)
        changeCapitalCellSettings,
    required TResult Function(UpdateDiaryCellSettingsInFirebaseEvent value)
        updateDiaryCellSettingsInFirebase,
    required TResult Function(UpdateCapitalCellSettingsInFirebaseEvent value)
        updateCapitalCellSettingsInFirebase,
    required TResult Function(UpdateCapitalCellWidthEvent value)
        updateCapitalCellWidth,
    required TResult Function(UpdateCapitalCellWidthInFirebaseEvent value)
        updateCapitalCellWidthInFirebase,
    required TResult Function(StartEditingCellsEvent value) startEditingCells,
    required TResult Function(CreateDiaryColumnEvent value) createDiaryColumn,
    required TResult Function(DeleteDiaryColumnEvent value) deleteDiaryColumn,
    required TResult Function(UpdateDiaryListSettingsEvent value)
        updateDiaryListSettings,
    required TResult Function(ShareThemeEvent value) shareTheme,
    required TResult Function(StartEditingColorEvent value) startEditingColor,
    required TResult Function(StartEditingBordersEvent value)
        startEditingBorders,
    required TResult Function(StartEditingBordersStyleEvent value)
        startEditingBorderStyle,
    required TResult Function(TurnBackEditingEvent value) turnBackEditing,
    required TResult Function(StartColumnDeletingEvent value)
        startColumnDeleting,
    required TResult Function(StartColorThemeEditingEvent value)
        startColorThemeEditing,
    required TResult Function(DeleteColumnsEvent value) deleteColumns,
    required TResult Function(LoadThemesEvent value) loadThemes,
    required TResult Function(LoadFromThemeEvent value) loadFromTheme,
    required TResult Function(TakeThemeEvent value) takeTheme,
  }) {
    return returnToCellsSelected(this);
  }

  @override
  @optionalTypeArgs
  TResult? mapOrNull<TResult extends Object?>({
    TResult? Function(CreateSampleEvent value)? createSample,
    TResult? Function(InitialLoadEvent value)? initialLoad,
    TResult? Function(GetDiaryListEvent value)? getDiaryList,
    TResult? Function(GetDiaryColumnsEvent value)? getDiaryColumns,
    TResult? Function(GetDiaryCellsEvent value)? getDiaryCells,
    TResult? Function(SelectDiaryCellEvent value)? selectDiaryCell,
    TResult? Function(SelectDiaryCellsEvent value)? selectDiaryCells,
    TResult? Function(SelectCapitalCellEvent value)? selectCapitalCell,
    TResult? Function(OnPanUpdateEvent value)? onPanUpdate,
    TResult? Function(StartEditingListEvent value)? startEditingList,
    TResult? Function(ReturnToLoadedEvent value)? returnToLoaded,
    TResult? Function(ReturnToCellsSelectedEvent value)? returnToCellsSelected,
    TResult? Function(UpdateDiaryListNameEvent value)? updateDiaryListName,
    TResult? Function(ChangeDiaryCellEvent value)? changeDiaryCell,
    TResult? Function(ChangeCapitalCellEvent value)? changeCapitalCell,
    TResult? Function(UpdateDiaryCellInFirebaseEvent value)?
        updateDiaryCellInFirebase,
    TResult? Function(ChangeDiaryCellsSettingsEvent value)?
        changeDiaryCellsSettings,
    TResult? Function(ChangeDiaryCellsBordersSettingsEvent value)?
        changeDiaryCellsBordersSettings,
    TResult? Function(ChangeCapitalCellSettingsEvent value)?
        changeCapitalCellSettings,
    TResult? Function(UpdateDiaryCellSettingsInFirebaseEvent value)?
        updateDiaryCellSettingsInFirebase,
    TResult? Function(UpdateCapitalCellSettingsInFirebaseEvent value)?
        updateCapitalCellSettingsInFirebase,
    TResult? Function(UpdateCapitalCellWidthEvent value)?
        updateCapitalCellWidth,
    TResult? Function(UpdateCapitalCellWidthInFirebaseEvent value)?
        updateCapitalCellWidthInFirebase,
    TResult? Function(StartEditingCellsEvent value)? startEditingCells,
    TResult? Function(CreateDiaryColumnEvent value)? createDiaryColumn,
    TResult? Function(DeleteDiaryColumnEvent value)? deleteDiaryColumn,
    TResult? Function(UpdateDiaryListSettingsEvent value)?
        updateDiaryListSettings,
    TResult? Function(ShareThemeEvent value)? shareTheme,
    TResult? Function(StartEditingColorEvent value)? startEditingColor,
    TResult? Function(StartEditingBordersEvent value)? startEditingBorders,
    TResult? Function(StartEditingBordersStyleEvent value)?
        startEditingBorderStyle,
    TResult? Function(TurnBackEditingEvent value)? turnBackEditing,
    TResult? Function(StartColumnDeletingEvent value)? startColumnDeleting,
    TResult? Function(StartColorThemeEditingEvent value)?
        startColorThemeEditing,
    TResult? Function(DeleteColumnsEvent value)? deleteColumns,
    TResult? Function(LoadThemesEvent value)? loadThemes,
    TResult? Function(LoadFromThemeEvent value)? loadFromTheme,
    TResult? Function(TakeThemeEvent value)? takeTheme,
  }) {
    return returnToCellsSelected?.call(this);
  }

  @override
  @optionalTypeArgs
  TResult maybeMap<TResult extends Object?>({
    TResult Function(CreateSampleEvent value)? createSample,
    TResult Function(InitialLoadEvent value)? initialLoad,
    TResult Function(GetDiaryListEvent value)? getDiaryList,
    TResult Function(GetDiaryColumnsEvent value)? getDiaryColumns,
    TResult Function(GetDiaryCellsEvent value)? getDiaryCells,
    TResult Function(SelectDiaryCellEvent value)? selectDiaryCell,
    TResult Function(SelectDiaryCellsEvent value)? selectDiaryCells,
    TResult Function(SelectCapitalCellEvent value)? selectCapitalCell,
    TResult Function(OnPanUpdateEvent value)? onPanUpdate,
    TResult Function(StartEditingListEvent value)? startEditingList,
    TResult Function(ReturnToLoadedEvent value)? returnToLoaded,
    TResult Function(ReturnToCellsSelectedEvent value)? returnToCellsSelected,
    TResult Function(UpdateDiaryListNameEvent value)? updateDiaryListName,
    TResult Function(ChangeDiaryCellEvent value)? changeDiaryCell,
    TResult Function(ChangeCapitalCellEvent value)? changeCapitalCell,
    TResult Function(UpdateDiaryCellInFirebaseEvent value)?
        updateDiaryCellInFirebase,
    TResult Function(ChangeDiaryCellsSettingsEvent value)?
        changeDiaryCellsSettings,
    TResult Function(ChangeDiaryCellsBordersSettingsEvent value)?
        changeDiaryCellsBordersSettings,
    TResult Function(ChangeCapitalCellSettingsEvent value)?
        changeCapitalCellSettings,
    TResult Function(UpdateDiaryCellSettingsInFirebaseEvent value)?
        updateDiaryCellSettingsInFirebase,
    TResult Function(UpdateCapitalCellSettingsInFirebaseEvent value)?
        updateCapitalCellSettingsInFirebase,
    TResult Function(UpdateCapitalCellWidthEvent value)? updateCapitalCellWidth,
    TResult Function(UpdateCapitalCellWidthInFirebaseEvent value)?
        updateCapitalCellWidthInFirebase,
    TResult Function(StartEditingCellsEvent value)? startEditingCells,
    TResult Function(CreateDiaryColumnEvent value)? createDiaryColumn,
    TResult Function(DeleteDiaryColumnEvent value)? deleteDiaryColumn,
    TResult Function(UpdateDiaryListSettingsEvent value)?
        updateDiaryListSettings,
    TResult Function(ShareThemeEvent value)? shareTheme,
    TResult Function(StartEditingColorEvent value)? startEditingColor,
    TResult Function(StartEditingBordersEvent value)? startEditingBorders,
    TResult Function(StartEditingBordersStyleEvent value)?
        startEditingBorderStyle,
    TResult Function(TurnBackEditingEvent value)? turnBackEditing,
    TResult Function(StartColumnDeletingEvent value)? startColumnDeleting,
    TResult Function(StartColorThemeEditingEvent value)? startColorThemeEditing,
    TResult Function(DeleteColumnsEvent value)? deleteColumns,
    TResult Function(LoadThemesEvent value)? loadThemes,
    TResult Function(LoadFromThemeEvent value)? loadFromTheme,
    TResult Function(TakeThemeEvent value)? takeTheme,
    required TResult orElse(),
  }) {
    if (returnToCellsSelected != null) {
      return returnToCellsSelected(this);
    }
    return orElse();
  }
}

abstract class ReturnToCellsSelectedEvent implements DiaryListEvent {
  const factory ReturnToCellsSelectedEvent() = _$ReturnToCellsSelectedEvent;
}

/// @nodoc
abstract class _$$UpdateDiaryListNameEventCopyWith<$Res> {
  factory _$$UpdateDiaryListNameEventCopyWith(_$UpdateDiaryListNameEvent value,
          $Res Function(_$UpdateDiaryListNameEvent) then) =
      __$$UpdateDiaryListNameEventCopyWithImpl<$Res>;
  @useResult
  $Res call({DiaryList diaryList, String newName});
}

/// @nodoc
class __$$UpdateDiaryListNameEventCopyWithImpl<$Res>
    extends _$DiaryListEventCopyWithImpl<$Res, _$UpdateDiaryListNameEvent>
    implements _$$UpdateDiaryListNameEventCopyWith<$Res> {
  __$$UpdateDiaryListNameEventCopyWithImpl(_$UpdateDiaryListNameEvent _value,
      $Res Function(_$UpdateDiaryListNameEvent) _then)
      : super(_value, _then);

  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? diaryList = null,
    Object? newName = null,
  }) {
    return _then(_$UpdateDiaryListNameEvent(
      diaryList: null == diaryList
          ? _value.diaryList
          : diaryList // ignore: cast_nullable_to_non_nullable
              as DiaryList,
      newName: null == newName
          ? _value.newName
          : newName // ignore: cast_nullable_to_non_nullable
              as String,
    ));
  }
}

/// @nodoc

class _$UpdateDiaryListNameEvent implements UpdateDiaryListNameEvent {
  const _$UpdateDiaryListNameEvent(
      {required this.diaryList, required this.newName});

  @override
  final DiaryList diaryList;
  @override
  final String newName;

  @override
  String toString() {
    return 'DiaryListEvent.updateDiaryListName(diaryList: $diaryList, newName: $newName)';
  }

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$UpdateDiaryListNameEvent &&
            (identical(other.diaryList, diaryList) ||
                other.diaryList == diaryList) &&
            (identical(other.newName, newName) || other.newName == newName));
  }

  @override
  int get hashCode => Object.hash(runtimeType, diaryList, newName);

  @JsonKey(ignore: true)
  @override
  @pragma('vm:prefer-inline')
  _$$UpdateDiaryListNameEventCopyWith<_$UpdateDiaryListNameEvent>
      get copyWith =>
          __$$UpdateDiaryListNameEventCopyWithImpl<_$UpdateDiaryListNameEvent>(
              this, _$identity);

  @override
  @optionalTypeArgs
  TResult when<TResult extends Object?>({
    required TResult Function() createSample,
    required TResult Function() initialLoad,
    required TResult Function(DateTime date, int delay) getDiaryList,
    required TResult Function(DiaryList diaryList, List<DiaryList> lists)
        getDiaryColumns,
    required TResult Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells,
            List<DiaryList> lists)
        getDiaryCells,
    required TResult Function(DiaryCell diaryCell) selectDiaryCell,
    required TResult Function(List<DiaryCell> diaryCells) selectDiaryCells,
    required TResult Function(CapitalCell capitalCell) selectCapitalCell,
    required TResult Function(
            DiaryCell diaryCell,
            GlobalObjectKey<State<StatefulWidget>> cellKey,
            DragUpdateDetails details,
            double scaleFactor)
        onPanUpdate,
    required TResult Function(DiaryList? selectedList) startEditingList,
    required TResult Function(
            String? newName, String? addedColumnName, int? addedColumnCount)
        returnToLoaded,
    required TResult Function() returnToCellsSelected,
    required TResult Function(DiaryList diaryList, String newName)
        updateDiaryListName,
    required TResult Function(DiaryCell diaryCell, String? textFieldText)
        changeDiaryCell,
    required TResult Function(CapitalCell capitalCell, String? textFieldText)
        changeCapitalCell,
    required TResult Function(DiaryCell diaryCell, String? textFieldText)
        updateDiaryCellInFirebase,
    required TResult Function(
            FontWeightEnum? fontWeight,
            TextDecorationEnum? textDecoration,
            FontStyleEnum? fontStyle,
            double? fontSize,
            String? color,
            HorizontalAlignmentsEnum? horizontalAlignment,
            VerticalAlignmentsEnum? verticalAlignment,
            String? backgroundColor)
        changeDiaryCellsSettings,
    required TResult Function(BordersEditingEnum bordersEditingEnum,
            BordersStyleEnum bordersStyleEnum, Color bordersColor)
        changeDiaryCellsBordersSettings,
    required TResult Function(
            FontWeightEnum? fontWeight,
            TextDecorationEnum? textDecoration,
            FontStyleEnum? fontStyle,
            double? fontSize,
            String? color,
            HorizontalAlignmentsEnum? horizontalAlignment,
            VerticalAlignmentsEnum? verticalAlignment,
            String? backgroundColor,
            BordersStyleEnum? bordersStyleEnum,
            Color? bordersColor)
        changeCapitalCellSettings,
    required TResult Function(
            DiaryCell diaryCell,
            int index,
            DiaryCellTextSettings? newTextSettings,
            DiaryCellSettings? newSettings)
        updateDiaryCellSettingsInFirebase,
    required TResult Function(DiaryColumnSettings newSettings)
        updateCapitalCellSettingsInFirebase,
    required TResult Function(PointerMoveEvent details) updateCapitalCellWidth,
    required TResult Function(PointerUpEvent details)
        updateCapitalCellWidthInFirebase,
    required TResult Function(bool isTextEditing) startEditingCells,
    required TResult Function(DiaryList diaryList, String name,
            int columnsCount, List<DiaryColumn> diaryColumns)
        createDiaryColumn,
    required TResult Function(DiaryList diaryList, String columnId)
        deleteDiaryColumn,
    required TResult Function(DiaryList diaryList, String? themeColor,
            String? themeBorderColor, String? themePanelBackgroundColor)
        updateDiaryListSettings,
    required TResult Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<DiaryCell> diaryCells,
            List<CapitalCell> capitalCells,
            String themeName,
            String description)
        shareTheme,
    required TResult Function() startEditingColor,
    required TResult Function() startEditingBorders,
    required TResult Function() startEditingBorderStyle,
    required TResult Function() turnBackEditing,
    required TResult Function() startColumnDeleting,
    required TResult Function() startColorThemeEditing,
    required TResult Function() deleteColumns,
    required TResult Function() loadThemes,
    required TResult Function(ListTheme listTheme) loadFromTheme,
    required TResult Function(ListTheme listTheme) takeTheme,
  }) {
    return updateDiaryListName(diaryList, newName);
  }

  @override
  @optionalTypeArgs
  TResult? whenOrNull<TResult extends Object?>({
    TResult? Function()? createSample,
    TResult? Function()? initialLoad,
    TResult? Function(DateTime date, int delay)? getDiaryList,
    TResult? Function(DiaryList diaryList, List<DiaryList> lists)?
        getDiaryColumns,
    TResult? Function(DiaryList diaryList, List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells, List<DiaryList> lists)?
        getDiaryCells,
    TResult? Function(DiaryCell diaryCell)? selectDiaryCell,
    TResult? Function(List<DiaryCell> diaryCells)? selectDiaryCells,
    TResult? Function(CapitalCell capitalCell)? selectCapitalCell,
    TResult? Function(
            DiaryCell diaryCell,
            GlobalObjectKey<State<StatefulWidget>> cellKey,
            DragUpdateDetails details,
            double scaleFactor)?
        onPanUpdate,
    TResult? Function(DiaryList? selectedList)? startEditingList,
    TResult? Function(
            String? newName, String? addedColumnName, int? addedColumnCount)?
        returnToLoaded,
    TResult? Function()? returnToCellsSelected,
    TResult? Function(DiaryList diaryList, String newName)? updateDiaryListName,
    TResult? Function(DiaryCell diaryCell, String? textFieldText)?
        changeDiaryCell,
    TResult? Function(CapitalCell capitalCell, String? textFieldText)?
        changeCapitalCell,
    TResult? Function(DiaryCell diaryCell, String? textFieldText)?
        updateDiaryCellInFirebase,
    TResult? Function(
            FontWeightEnum? fontWeight,
            TextDecorationEnum? textDecoration,
            FontStyleEnum? fontStyle,
            double? fontSize,
            String? color,
            HorizontalAlignmentsEnum? horizontalAlignment,
            VerticalAlignmentsEnum? verticalAlignment,
            String? backgroundColor)?
        changeDiaryCellsSettings,
    TResult? Function(BordersEditingEnum bordersEditingEnum,
            BordersStyleEnum bordersStyleEnum, Color bordersColor)?
        changeDiaryCellsBordersSettings,
    TResult? Function(
            FontWeightEnum? fontWeight,
            TextDecorationEnum? textDecoration,
            FontStyleEnum? fontStyle,
            double? fontSize,
            String? color,
            HorizontalAlignmentsEnum? horizontalAlignment,
            VerticalAlignmentsEnum? verticalAlignment,
            String? backgroundColor,
            BordersStyleEnum? bordersStyleEnum,
            Color? bordersColor)?
        changeCapitalCellSettings,
    TResult? Function(
            DiaryCell diaryCell,
            int index,
            DiaryCellTextSettings? newTextSettings,
            DiaryCellSettings? newSettings)?
        updateDiaryCellSettingsInFirebase,
    TResult? Function(DiaryColumnSettings newSettings)?
        updateCapitalCellSettingsInFirebase,
    TResult? Function(PointerMoveEvent details)? updateCapitalCellWidth,
    TResult? Function(PointerUpEvent details)? updateCapitalCellWidthInFirebase,
    TResult? Function(bool isTextEditing)? startEditingCells,
    TResult? Function(DiaryList diaryList, String name, int columnsCount,
            List<DiaryColumn> diaryColumns)?
        createDiaryColumn,
    TResult? Function(DiaryList diaryList, String columnId)? deleteDiaryColumn,
    TResult? Function(DiaryList diaryList, String? themeColor,
            String? themeBorderColor, String? themePanelBackgroundColor)?
        updateDiaryListSettings,
    TResult? Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<DiaryCell> diaryCells,
            List<CapitalCell> capitalCells,
            String themeName,
            String description)?
        shareTheme,
    TResult? Function()? startEditingColor,
    TResult? Function()? startEditingBorders,
    TResult? Function()? startEditingBorderStyle,
    TResult? Function()? turnBackEditing,
    TResult? Function()? startColumnDeleting,
    TResult? Function()? startColorThemeEditing,
    TResult? Function()? deleteColumns,
    TResult? Function()? loadThemes,
    TResult? Function(ListTheme listTheme)? loadFromTheme,
    TResult? Function(ListTheme listTheme)? takeTheme,
  }) {
    return updateDiaryListName?.call(diaryList, newName);
  }

  @override
  @optionalTypeArgs
  TResult maybeWhen<TResult extends Object?>({
    TResult Function()? createSample,
    TResult Function()? initialLoad,
    TResult Function(DateTime date, int delay)? getDiaryList,
    TResult Function(DiaryList diaryList, List<DiaryList> lists)?
        getDiaryColumns,
    TResult Function(DiaryList diaryList, List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells, List<DiaryList> lists)?
        getDiaryCells,
    TResult Function(DiaryCell diaryCell)? selectDiaryCell,
    TResult Function(List<DiaryCell> diaryCells)? selectDiaryCells,
    TResult Function(CapitalCell capitalCell)? selectCapitalCell,
    TResult Function(
            DiaryCell diaryCell,
            GlobalObjectKey<State<StatefulWidget>> cellKey,
            DragUpdateDetails details,
            double scaleFactor)?
        onPanUpdate,
    TResult Function(DiaryList? selectedList)? startEditingList,
    TResult Function(
            String? newName, String? addedColumnName, int? addedColumnCount)?
        returnToLoaded,
    TResult Function()? returnToCellsSelected,
    TResult Function(DiaryList diaryList, String newName)? updateDiaryListName,
    TResult Function(DiaryCell diaryCell, String? textFieldText)?
        changeDiaryCell,
    TResult Function(CapitalCell capitalCell, String? textFieldText)?
        changeCapitalCell,
    TResult Function(DiaryCell diaryCell, String? textFieldText)?
        updateDiaryCellInFirebase,
    TResult Function(
            FontWeightEnum? fontWeight,
            TextDecorationEnum? textDecoration,
            FontStyleEnum? fontStyle,
            double? fontSize,
            String? color,
            HorizontalAlignmentsEnum? horizontalAlignment,
            VerticalAlignmentsEnum? verticalAlignment,
            String? backgroundColor)?
        changeDiaryCellsSettings,
    TResult Function(BordersEditingEnum bordersEditingEnum,
            BordersStyleEnum bordersStyleEnum, Color bordersColor)?
        changeDiaryCellsBordersSettings,
    TResult Function(
            FontWeightEnum? fontWeight,
            TextDecorationEnum? textDecoration,
            FontStyleEnum? fontStyle,
            double? fontSize,
            String? color,
            HorizontalAlignmentsEnum? horizontalAlignment,
            VerticalAlignmentsEnum? verticalAlignment,
            String? backgroundColor,
            BordersStyleEnum? bordersStyleEnum,
            Color? bordersColor)?
        changeCapitalCellSettings,
    TResult Function(
            DiaryCell diaryCell,
            int index,
            DiaryCellTextSettings? newTextSettings,
            DiaryCellSettings? newSettings)?
        updateDiaryCellSettingsInFirebase,
    TResult Function(DiaryColumnSettings newSettings)?
        updateCapitalCellSettingsInFirebase,
    TResult Function(PointerMoveEvent details)? updateCapitalCellWidth,
    TResult Function(PointerUpEvent details)? updateCapitalCellWidthInFirebase,
    TResult Function(bool isTextEditing)? startEditingCells,
    TResult Function(DiaryList diaryList, String name, int columnsCount,
            List<DiaryColumn> diaryColumns)?
        createDiaryColumn,
    TResult Function(DiaryList diaryList, String columnId)? deleteDiaryColumn,
    TResult Function(DiaryList diaryList, String? themeColor,
            String? themeBorderColor, String? themePanelBackgroundColor)?
        updateDiaryListSettings,
    TResult Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<DiaryCell> diaryCells,
            List<CapitalCell> capitalCells,
            String themeName,
            String description)?
        shareTheme,
    TResult Function()? startEditingColor,
    TResult Function()? startEditingBorders,
    TResult Function()? startEditingBorderStyle,
    TResult Function()? turnBackEditing,
    TResult Function()? startColumnDeleting,
    TResult Function()? startColorThemeEditing,
    TResult Function()? deleteColumns,
    TResult Function()? loadThemes,
    TResult Function(ListTheme listTheme)? loadFromTheme,
    TResult Function(ListTheme listTheme)? takeTheme,
    required TResult orElse(),
  }) {
    if (updateDiaryListName != null) {
      return updateDiaryListName(diaryList, newName);
    }
    return orElse();
  }

  @override
  @optionalTypeArgs
  TResult map<TResult extends Object?>({
    required TResult Function(CreateSampleEvent value) createSample,
    required TResult Function(InitialLoadEvent value) initialLoad,
    required TResult Function(GetDiaryListEvent value) getDiaryList,
    required TResult Function(GetDiaryColumnsEvent value) getDiaryColumns,
    required TResult Function(GetDiaryCellsEvent value) getDiaryCells,
    required TResult Function(SelectDiaryCellEvent value) selectDiaryCell,
    required TResult Function(SelectDiaryCellsEvent value) selectDiaryCells,
    required TResult Function(SelectCapitalCellEvent value) selectCapitalCell,
    required TResult Function(OnPanUpdateEvent value) onPanUpdate,
    required TResult Function(StartEditingListEvent value) startEditingList,
    required TResult Function(ReturnToLoadedEvent value) returnToLoaded,
    required TResult Function(ReturnToCellsSelectedEvent value)
        returnToCellsSelected,
    required TResult Function(UpdateDiaryListNameEvent value)
        updateDiaryListName,
    required TResult Function(ChangeDiaryCellEvent value) changeDiaryCell,
    required TResult Function(ChangeCapitalCellEvent value) changeCapitalCell,
    required TResult Function(UpdateDiaryCellInFirebaseEvent value)
        updateDiaryCellInFirebase,
    required TResult Function(ChangeDiaryCellsSettingsEvent value)
        changeDiaryCellsSettings,
    required TResult Function(ChangeDiaryCellsBordersSettingsEvent value)
        changeDiaryCellsBordersSettings,
    required TResult Function(ChangeCapitalCellSettingsEvent value)
        changeCapitalCellSettings,
    required TResult Function(UpdateDiaryCellSettingsInFirebaseEvent value)
        updateDiaryCellSettingsInFirebase,
    required TResult Function(UpdateCapitalCellSettingsInFirebaseEvent value)
        updateCapitalCellSettingsInFirebase,
    required TResult Function(UpdateCapitalCellWidthEvent value)
        updateCapitalCellWidth,
    required TResult Function(UpdateCapitalCellWidthInFirebaseEvent value)
        updateCapitalCellWidthInFirebase,
    required TResult Function(StartEditingCellsEvent value) startEditingCells,
    required TResult Function(CreateDiaryColumnEvent value) createDiaryColumn,
    required TResult Function(DeleteDiaryColumnEvent value) deleteDiaryColumn,
    required TResult Function(UpdateDiaryListSettingsEvent value)
        updateDiaryListSettings,
    required TResult Function(ShareThemeEvent value) shareTheme,
    required TResult Function(StartEditingColorEvent value) startEditingColor,
    required TResult Function(StartEditingBordersEvent value)
        startEditingBorders,
    required TResult Function(StartEditingBordersStyleEvent value)
        startEditingBorderStyle,
    required TResult Function(TurnBackEditingEvent value) turnBackEditing,
    required TResult Function(StartColumnDeletingEvent value)
        startColumnDeleting,
    required TResult Function(StartColorThemeEditingEvent value)
        startColorThemeEditing,
    required TResult Function(DeleteColumnsEvent value) deleteColumns,
    required TResult Function(LoadThemesEvent value) loadThemes,
    required TResult Function(LoadFromThemeEvent value) loadFromTheme,
    required TResult Function(TakeThemeEvent value) takeTheme,
  }) {
    return updateDiaryListName(this);
  }

  @override
  @optionalTypeArgs
  TResult? mapOrNull<TResult extends Object?>({
    TResult? Function(CreateSampleEvent value)? createSample,
    TResult? Function(InitialLoadEvent value)? initialLoad,
    TResult? Function(GetDiaryListEvent value)? getDiaryList,
    TResult? Function(GetDiaryColumnsEvent value)? getDiaryColumns,
    TResult? Function(GetDiaryCellsEvent value)? getDiaryCells,
    TResult? Function(SelectDiaryCellEvent value)? selectDiaryCell,
    TResult? Function(SelectDiaryCellsEvent value)? selectDiaryCells,
    TResult? Function(SelectCapitalCellEvent value)? selectCapitalCell,
    TResult? Function(OnPanUpdateEvent value)? onPanUpdate,
    TResult? Function(StartEditingListEvent value)? startEditingList,
    TResult? Function(ReturnToLoadedEvent value)? returnToLoaded,
    TResult? Function(ReturnToCellsSelectedEvent value)? returnToCellsSelected,
    TResult? Function(UpdateDiaryListNameEvent value)? updateDiaryListName,
    TResult? Function(ChangeDiaryCellEvent value)? changeDiaryCell,
    TResult? Function(ChangeCapitalCellEvent value)? changeCapitalCell,
    TResult? Function(UpdateDiaryCellInFirebaseEvent value)?
        updateDiaryCellInFirebase,
    TResult? Function(ChangeDiaryCellsSettingsEvent value)?
        changeDiaryCellsSettings,
    TResult? Function(ChangeDiaryCellsBordersSettingsEvent value)?
        changeDiaryCellsBordersSettings,
    TResult? Function(ChangeCapitalCellSettingsEvent value)?
        changeCapitalCellSettings,
    TResult? Function(UpdateDiaryCellSettingsInFirebaseEvent value)?
        updateDiaryCellSettingsInFirebase,
    TResult? Function(UpdateCapitalCellSettingsInFirebaseEvent value)?
        updateCapitalCellSettingsInFirebase,
    TResult? Function(UpdateCapitalCellWidthEvent value)?
        updateCapitalCellWidth,
    TResult? Function(UpdateCapitalCellWidthInFirebaseEvent value)?
        updateCapitalCellWidthInFirebase,
    TResult? Function(StartEditingCellsEvent value)? startEditingCells,
    TResult? Function(CreateDiaryColumnEvent value)? createDiaryColumn,
    TResult? Function(DeleteDiaryColumnEvent value)? deleteDiaryColumn,
    TResult? Function(UpdateDiaryListSettingsEvent value)?
        updateDiaryListSettings,
    TResult? Function(ShareThemeEvent value)? shareTheme,
    TResult? Function(StartEditingColorEvent value)? startEditingColor,
    TResult? Function(StartEditingBordersEvent value)? startEditingBorders,
    TResult? Function(StartEditingBordersStyleEvent value)?
        startEditingBorderStyle,
    TResult? Function(TurnBackEditingEvent value)? turnBackEditing,
    TResult? Function(StartColumnDeletingEvent value)? startColumnDeleting,
    TResult? Function(StartColorThemeEditingEvent value)?
        startColorThemeEditing,
    TResult? Function(DeleteColumnsEvent value)? deleteColumns,
    TResult? Function(LoadThemesEvent value)? loadThemes,
    TResult? Function(LoadFromThemeEvent value)? loadFromTheme,
    TResult? Function(TakeThemeEvent value)? takeTheme,
  }) {
    return updateDiaryListName?.call(this);
  }

  @override
  @optionalTypeArgs
  TResult maybeMap<TResult extends Object?>({
    TResult Function(CreateSampleEvent value)? createSample,
    TResult Function(InitialLoadEvent value)? initialLoad,
    TResult Function(GetDiaryListEvent value)? getDiaryList,
    TResult Function(GetDiaryColumnsEvent value)? getDiaryColumns,
    TResult Function(GetDiaryCellsEvent value)? getDiaryCells,
    TResult Function(SelectDiaryCellEvent value)? selectDiaryCell,
    TResult Function(SelectDiaryCellsEvent value)? selectDiaryCells,
    TResult Function(SelectCapitalCellEvent value)? selectCapitalCell,
    TResult Function(OnPanUpdateEvent value)? onPanUpdate,
    TResult Function(StartEditingListEvent value)? startEditingList,
    TResult Function(ReturnToLoadedEvent value)? returnToLoaded,
    TResult Function(ReturnToCellsSelectedEvent value)? returnToCellsSelected,
    TResult Function(UpdateDiaryListNameEvent value)? updateDiaryListName,
    TResult Function(ChangeDiaryCellEvent value)? changeDiaryCell,
    TResult Function(ChangeCapitalCellEvent value)? changeCapitalCell,
    TResult Function(UpdateDiaryCellInFirebaseEvent value)?
        updateDiaryCellInFirebase,
    TResult Function(ChangeDiaryCellsSettingsEvent value)?
        changeDiaryCellsSettings,
    TResult Function(ChangeDiaryCellsBordersSettingsEvent value)?
        changeDiaryCellsBordersSettings,
    TResult Function(ChangeCapitalCellSettingsEvent value)?
        changeCapitalCellSettings,
    TResult Function(UpdateDiaryCellSettingsInFirebaseEvent value)?
        updateDiaryCellSettingsInFirebase,
    TResult Function(UpdateCapitalCellSettingsInFirebaseEvent value)?
        updateCapitalCellSettingsInFirebase,
    TResult Function(UpdateCapitalCellWidthEvent value)? updateCapitalCellWidth,
    TResult Function(UpdateCapitalCellWidthInFirebaseEvent value)?
        updateCapitalCellWidthInFirebase,
    TResult Function(StartEditingCellsEvent value)? startEditingCells,
    TResult Function(CreateDiaryColumnEvent value)? createDiaryColumn,
    TResult Function(DeleteDiaryColumnEvent value)? deleteDiaryColumn,
    TResult Function(UpdateDiaryListSettingsEvent value)?
        updateDiaryListSettings,
    TResult Function(ShareThemeEvent value)? shareTheme,
    TResult Function(StartEditingColorEvent value)? startEditingColor,
    TResult Function(StartEditingBordersEvent value)? startEditingBorders,
    TResult Function(StartEditingBordersStyleEvent value)?
        startEditingBorderStyle,
    TResult Function(TurnBackEditingEvent value)? turnBackEditing,
    TResult Function(StartColumnDeletingEvent value)? startColumnDeleting,
    TResult Function(StartColorThemeEditingEvent value)? startColorThemeEditing,
    TResult Function(DeleteColumnsEvent value)? deleteColumns,
    TResult Function(LoadThemesEvent value)? loadThemes,
    TResult Function(LoadFromThemeEvent value)? loadFromTheme,
    TResult Function(TakeThemeEvent value)? takeTheme,
    required TResult orElse(),
  }) {
    if (updateDiaryListName != null) {
      return updateDiaryListName(this);
    }
    return orElse();
  }
}

abstract class UpdateDiaryListNameEvent implements DiaryListEvent {
  const factory UpdateDiaryListNameEvent(
      {required final DiaryList diaryList,
      required final String newName}) = _$UpdateDiaryListNameEvent;

  DiaryList get diaryList;
  String get newName;
  @JsonKey(ignore: true)
  _$$UpdateDiaryListNameEventCopyWith<_$UpdateDiaryListNameEvent>
      get copyWith => throw _privateConstructorUsedError;
}

/// @nodoc
abstract class _$$ChangeDiaryCellEventCopyWith<$Res> {
  factory _$$ChangeDiaryCellEventCopyWith(_$ChangeDiaryCellEvent value,
          $Res Function(_$ChangeDiaryCellEvent) then) =
      __$$ChangeDiaryCellEventCopyWithImpl<$Res>;
  @useResult
  $Res call({DiaryCell diaryCell, String? textFieldText});
}

/// @nodoc
class __$$ChangeDiaryCellEventCopyWithImpl<$Res>
    extends _$DiaryListEventCopyWithImpl<$Res, _$ChangeDiaryCellEvent>
    implements _$$ChangeDiaryCellEventCopyWith<$Res> {
  __$$ChangeDiaryCellEventCopyWithImpl(_$ChangeDiaryCellEvent _value,
      $Res Function(_$ChangeDiaryCellEvent) _then)
      : super(_value, _then);

  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? diaryCell = null,
    Object? textFieldText = freezed,
  }) {
    return _then(_$ChangeDiaryCellEvent(
      diaryCell: null == diaryCell
          ? _value.diaryCell
          : diaryCell // ignore: cast_nullable_to_non_nullable
              as DiaryCell,
      textFieldText: freezed == textFieldText
          ? _value.textFieldText
          : textFieldText // ignore: cast_nullable_to_non_nullable
              as String?,
    ));
  }
}

/// @nodoc

class _$ChangeDiaryCellEvent implements ChangeDiaryCellEvent {
  const _$ChangeDiaryCellEvent({required this.diaryCell, this.textFieldText});

  @override
  final DiaryCell diaryCell;
  @override
  final String? textFieldText;

  @override
  String toString() {
    return 'DiaryListEvent.changeDiaryCell(diaryCell: $diaryCell, textFieldText: $textFieldText)';
  }

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$ChangeDiaryCellEvent &&
            (identical(other.diaryCell, diaryCell) ||
                other.diaryCell == diaryCell) &&
            (identical(other.textFieldText, textFieldText) ||
                other.textFieldText == textFieldText));
  }

  @override
  int get hashCode => Object.hash(runtimeType, diaryCell, textFieldText);

  @JsonKey(ignore: true)
  @override
  @pragma('vm:prefer-inline')
  _$$ChangeDiaryCellEventCopyWith<_$ChangeDiaryCellEvent> get copyWith =>
      __$$ChangeDiaryCellEventCopyWithImpl<_$ChangeDiaryCellEvent>(
          this, _$identity);

  @override
  @optionalTypeArgs
  TResult when<TResult extends Object?>({
    required TResult Function() createSample,
    required TResult Function() initialLoad,
    required TResult Function(DateTime date, int delay) getDiaryList,
    required TResult Function(DiaryList diaryList, List<DiaryList> lists)
        getDiaryColumns,
    required TResult Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells,
            List<DiaryList> lists)
        getDiaryCells,
    required TResult Function(DiaryCell diaryCell) selectDiaryCell,
    required TResult Function(List<DiaryCell> diaryCells) selectDiaryCells,
    required TResult Function(CapitalCell capitalCell) selectCapitalCell,
    required TResult Function(
            DiaryCell diaryCell,
            GlobalObjectKey<State<StatefulWidget>> cellKey,
            DragUpdateDetails details,
            double scaleFactor)
        onPanUpdate,
    required TResult Function(DiaryList? selectedList) startEditingList,
    required TResult Function(
            String? newName, String? addedColumnName, int? addedColumnCount)
        returnToLoaded,
    required TResult Function() returnToCellsSelected,
    required TResult Function(DiaryList diaryList, String newName)
        updateDiaryListName,
    required TResult Function(DiaryCell diaryCell, String? textFieldText)
        changeDiaryCell,
    required TResult Function(CapitalCell capitalCell, String? textFieldText)
        changeCapitalCell,
    required TResult Function(DiaryCell diaryCell, String? textFieldText)
        updateDiaryCellInFirebase,
    required TResult Function(
            FontWeightEnum? fontWeight,
            TextDecorationEnum? textDecoration,
            FontStyleEnum? fontStyle,
            double? fontSize,
            String? color,
            HorizontalAlignmentsEnum? horizontalAlignment,
            VerticalAlignmentsEnum? verticalAlignment,
            String? backgroundColor)
        changeDiaryCellsSettings,
    required TResult Function(BordersEditingEnum bordersEditingEnum,
            BordersStyleEnum bordersStyleEnum, Color bordersColor)
        changeDiaryCellsBordersSettings,
    required TResult Function(
            FontWeightEnum? fontWeight,
            TextDecorationEnum? textDecoration,
            FontStyleEnum? fontStyle,
            double? fontSize,
            String? color,
            HorizontalAlignmentsEnum? horizontalAlignment,
            VerticalAlignmentsEnum? verticalAlignment,
            String? backgroundColor,
            BordersStyleEnum? bordersStyleEnum,
            Color? bordersColor)
        changeCapitalCellSettings,
    required TResult Function(
            DiaryCell diaryCell,
            int index,
            DiaryCellTextSettings? newTextSettings,
            DiaryCellSettings? newSettings)
        updateDiaryCellSettingsInFirebase,
    required TResult Function(DiaryColumnSettings newSettings)
        updateCapitalCellSettingsInFirebase,
    required TResult Function(PointerMoveEvent details) updateCapitalCellWidth,
    required TResult Function(PointerUpEvent details)
        updateCapitalCellWidthInFirebase,
    required TResult Function(bool isTextEditing) startEditingCells,
    required TResult Function(DiaryList diaryList, String name,
            int columnsCount, List<DiaryColumn> diaryColumns)
        createDiaryColumn,
    required TResult Function(DiaryList diaryList, String columnId)
        deleteDiaryColumn,
    required TResult Function(DiaryList diaryList, String? themeColor,
            String? themeBorderColor, String? themePanelBackgroundColor)
        updateDiaryListSettings,
    required TResult Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<DiaryCell> diaryCells,
            List<CapitalCell> capitalCells,
            String themeName,
            String description)
        shareTheme,
    required TResult Function() startEditingColor,
    required TResult Function() startEditingBorders,
    required TResult Function() startEditingBorderStyle,
    required TResult Function() turnBackEditing,
    required TResult Function() startColumnDeleting,
    required TResult Function() startColorThemeEditing,
    required TResult Function() deleteColumns,
    required TResult Function() loadThemes,
    required TResult Function(ListTheme listTheme) loadFromTheme,
    required TResult Function(ListTheme listTheme) takeTheme,
  }) {
    return changeDiaryCell(diaryCell, textFieldText);
  }

  @override
  @optionalTypeArgs
  TResult? whenOrNull<TResult extends Object?>({
    TResult? Function()? createSample,
    TResult? Function()? initialLoad,
    TResult? Function(DateTime date, int delay)? getDiaryList,
    TResult? Function(DiaryList diaryList, List<DiaryList> lists)?
        getDiaryColumns,
    TResult? Function(DiaryList diaryList, List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells, List<DiaryList> lists)?
        getDiaryCells,
    TResult? Function(DiaryCell diaryCell)? selectDiaryCell,
    TResult? Function(List<DiaryCell> diaryCells)? selectDiaryCells,
    TResult? Function(CapitalCell capitalCell)? selectCapitalCell,
    TResult? Function(
            DiaryCell diaryCell,
            GlobalObjectKey<State<StatefulWidget>> cellKey,
            DragUpdateDetails details,
            double scaleFactor)?
        onPanUpdate,
    TResult? Function(DiaryList? selectedList)? startEditingList,
    TResult? Function(
            String? newName, String? addedColumnName, int? addedColumnCount)?
        returnToLoaded,
    TResult? Function()? returnToCellsSelected,
    TResult? Function(DiaryList diaryList, String newName)? updateDiaryListName,
    TResult? Function(DiaryCell diaryCell, String? textFieldText)?
        changeDiaryCell,
    TResult? Function(CapitalCell capitalCell, String? textFieldText)?
        changeCapitalCell,
    TResult? Function(DiaryCell diaryCell, String? textFieldText)?
        updateDiaryCellInFirebase,
    TResult? Function(
            FontWeightEnum? fontWeight,
            TextDecorationEnum? textDecoration,
            FontStyleEnum? fontStyle,
            double? fontSize,
            String? color,
            HorizontalAlignmentsEnum? horizontalAlignment,
            VerticalAlignmentsEnum? verticalAlignment,
            String? backgroundColor)?
        changeDiaryCellsSettings,
    TResult? Function(BordersEditingEnum bordersEditingEnum,
            BordersStyleEnum bordersStyleEnum, Color bordersColor)?
        changeDiaryCellsBordersSettings,
    TResult? Function(
            FontWeightEnum? fontWeight,
            TextDecorationEnum? textDecoration,
            FontStyleEnum? fontStyle,
            double? fontSize,
            String? color,
            HorizontalAlignmentsEnum? horizontalAlignment,
            VerticalAlignmentsEnum? verticalAlignment,
            String? backgroundColor,
            BordersStyleEnum? bordersStyleEnum,
            Color? bordersColor)?
        changeCapitalCellSettings,
    TResult? Function(
            DiaryCell diaryCell,
            int index,
            DiaryCellTextSettings? newTextSettings,
            DiaryCellSettings? newSettings)?
        updateDiaryCellSettingsInFirebase,
    TResult? Function(DiaryColumnSettings newSettings)?
        updateCapitalCellSettingsInFirebase,
    TResult? Function(PointerMoveEvent details)? updateCapitalCellWidth,
    TResult? Function(PointerUpEvent details)? updateCapitalCellWidthInFirebase,
    TResult? Function(bool isTextEditing)? startEditingCells,
    TResult? Function(DiaryList diaryList, String name, int columnsCount,
            List<DiaryColumn> diaryColumns)?
        createDiaryColumn,
    TResult? Function(DiaryList diaryList, String columnId)? deleteDiaryColumn,
    TResult? Function(DiaryList diaryList, String? themeColor,
            String? themeBorderColor, String? themePanelBackgroundColor)?
        updateDiaryListSettings,
    TResult? Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<DiaryCell> diaryCells,
            List<CapitalCell> capitalCells,
            String themeName,
            String description)?
        shareTheme,
    TResult? Function()? startEditingColor,
    TResult? Function()? startEditingBorders,
    TResult? Function()? startEditingBorderStyle,
    TResult? Function()? turnBackEditing,
    TResult? Function()? startColumnDeleting,
    TResult? Function()? startColorThemeEditing,
    TResult? Function()? deleteColumns,
    TResult? Function()? loadThemes,
    TResult? Function(ListTheme listTheme)? loadFromTheme,
    TResult? Function(ListTheme listTheme)? takeTheme,
  }) {
    return changeDiaryCell?.call(diaryCell, textFieldText);
  }

  @override
  @optionalTypeArgs
  TResult maybeWhen<TResult extends Object?>({
    TResult Function()? createSample,
    TResult Function()? initialLoad,
    TResult Function(DateTime date, int delay)? getDiaryList,
    TResult Function(DiaryList diaryList, List<DiaryList> lists)?
        getDiaryColumns,
    TResult Function(DiaryList diaryList, List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells, List<DiaryList> lists)?
        getDiaryCells,
    TResult Function(DiaryCell diaryCell)? selectDiaryCell,
    TResult Function(List<DiaryCell> diaryCells)? selectDiaryCells,
    TResult Function(CapitalCell capitalCell)? selectCapitalCell,
    TResult Function(
            DiaryCell diaryCell,
            GlobalObjectKey<State<StatefulWidget>> cellKey,
            DragUpdateDetails details,
            double scaleFactor)?
        onPanUpdate,
    TResult Function(DiaryList? selectedList)? startEditingList,
    TResult Function(
            String? newName, String? addedColumnName, int? addedColumnCount)?
        returnToLoaded,
    TResult Function()? returnToCellsSelected,
    TResult Function(DiaryList diaryList, String newName)? updateDiaryListName,
    TResult Function(DiaryCell diaryCell, String? textFieldText)?
        changeDiaryCell,
    TResult Function(CapitalCell capitalCell, String? textFieldText)?
        changeCapitalCell,
    TResult Function(DiaryCell diaryCell, String? textFieldText)?
        updateDiaryCellInFirebase,
    TResult Function(
            FontWeightEnum? fontWeight,
            TextDecorationEnum? textDecoration,
            FontStyleEnum? fontStyle,
            double? fontSize,
            String? color,
            HorizontalAlignmentsEnum? horizontalAlignment,
            VerticalAlignmentsEnum? verticalAlignment,
            String? backgroundColor)?
        changeDiaryCellsSettings,
    TResult Function(BordersEditingEnum bordersEditingEnum,
            BordersStyleEnum bordersStyleEnum, Color bordersColor)?
        changeDiaryCellsBordersSettings,
    TResult Function(
            FontWeightEnum? fontWeight,
            TextDecorationEnum? textDecoration,
            FontStyleEnum? fontStyle,
            double? fontSize,
            String? color,
            HorizontalAlignmentsEnum? horizontalAlignment,
            VerticalAlignmentsEnum? verticalAlignment,
            String? backgroundColor,
            BordersStyleEnum? bordersStyleEnum,
            Color? bordersColor)?
        changeCapitalCellSettings,
    TResult Function(
            DiaryCell diaryCell,
            int index,
            DiaryCellTextSettings? newTextSettings,
            DiaryCellSettings? newSettings)?
        updateDiaryCellSettingsInFirebase,
    TResult Function(DiaryColumnSettings newSettings)?
        updateCapitalCellSettingsInFirebase,
    TResult Function(PointerMoveEvent details)? updateCapitalCellWidth,
    TResult Function(PointerUpEvent details)? updateCapitalCellWidthInFirebase,
    TResult Function(bool isTextEditing)? startEditingCells,
    TResult Function(DiaryList diaryList, String name, int columnsCount,
            List<DiaryColumn> diaryColumns)?
        createDiaryColumn,
    TResult Function(DiaryList diaryList, String columnId)? deleteDiaryColumn,
    TResult Function(DiaryList diaryList, String? themeColor,
            String? themeBorderColor, String? themePanelBackgroundColor)?
        updateDiaryListSettings,
    TResult Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<DiaryCell> diaryCells,
            List<CapitalCell> capitalCells,
            String themeName,
            String description)?
        shareTheme,
    TResult Function()? startEditingColor,
    TResult Function()? startEditingBorders,
    TResult Function()? startEditingBorderStyle,
    TResult Function()? turnBackEditing,
    TResult Function()? startColumnDeleting,
    TResult Function()? startColorThemeEditing,
    TResult Function()? deleteColumns,
    TResult Function()? loadThemes,
    TResult Function(ListTheme listTheme)? loadFromTheme,
    TResult Function(ListTheme listTheme)? takeTheme,
    required TResult orElse(),
  }) {
    if (changeDiaryCell != null) {
      return changeDiaryCell(diaryCell, textFieldText);
    }
    return orElse();
  }

  @override
  @optionalTypeArgs
  TResult map<TResult extends Object?>({
    required TResult Function(CreateSampleEvent value) createSample,
    required TResult Function(InitialLoadEvent value) initialLoad,
    required TResult Function(GetDiaryListEvent value) getDiaryList,
    required TResult Function(GetDiaryColumnsEvent value) getDiaryColumns,
    required TResult Function(GetDiaryCellsEvent value) getDiaryCells,
    required TResult Function(SelectDiaryCellEvent value) selectDiaryCell,
    required TResult Function(SelectDiaryCellsEvent value) selectDiaryCells,
    required TResult Function(SelectCapitalCellEvent value) selectCapitalCell,
    required TResult Function(OnPanUpdateEvent value) onPanUpdate,
    required TResult Function(StartEditingListEvent value) startEditingList,
    required TResult Function(ReturnToLoadedEvent value) returnToLoaded,
    required TResult Function(ReturnToCellsSelectedEvent value)
        returnToCellsSelected,
    required TResult Function(UpdateDiaryListNameEvent value)
        updateDiaryListName,
    required TResult Function(ChangeDiaryCellEvent value) changeDiaryCell,
    required TResult Function(ChangeCapitalCellEvent value) changeCapitalCell,
    required TResult Function(UpdateDiaryCellInFirebaseEvent value)
        updateDiaryCellInFirebase,
    required TResult Function(ChangeDiaryCellsSettingsEvent value)
        changeDiaryCellsSettings,
    required TResult Function(ChangeDiaryCellsBordersSettingsEvent value)
        changeDiaryCellsBordersSettings,
    required TResult Function(ChangeCapitalCellSettingsEvent value)
        changeCapitalCellSettings,
    required TResult Function(UpdateDiaryCellSettingsInFirebaseEvent value)
        updateDiaryCellSettingsInFirebase,
    required TResult Function(UpdateCapitalCellSettingsInFirebaseEvent value)
        updateCapitalCellSettingsInFirebase,
    required TResult Function(UpdateCapitalCellWidthEvent value)
        updateCapitalCellWidth,
    required TResult Function(UpdateCapitalCellWidthInFirebaseEvent value)
        updateCapitalCellWidthInFirebase,
    required TResult Function(StartEditingCellsEvent value) startEditingCells,
    required TResult Function(CreateDiaryColumnEvent value) createDiaryColumn,
    required TResult Function(DeleteDiaryColumnEvent value) deleteDiaryColumn,
    required TResult Function(UpdateDiaryListSettingsEvent value)
        updateDiaryListSettings,
    required TResult Function(ShareThemeEvent value) shareTheme,
    required TResult Function(StartEditingColorEvent value) startEditingColor,
    required TResult Function(StartEditingBordersEvent value)
        startEditingBorders,
    required TResult Function(StartEditingBordersStyleEvent value)
        startEditingBorderStyle,
    required TResult Function(TurnBackEditingEvent value) turnBackEditing,
    required TResult Function(StartColumnDeletingEvent value)
        startColumnDeleting,
    required TResult Function(StartColorThemeEditingEvent value)
        startColorThemeEditing,
    required TResult Function(DeleteColumnsEvent value) deleteColumns,
    required TResult Function(LoadThemesEvent value) loadThemes,
    required TResult Function(LoadFromThemeEvent value) loadFromTheme,
    required TResult Function(TakeThemeEvent value) takeTheme,
  }) {
    return changeDiaryCell(this);
  }

  @override
  @optionalTypeArgs
  TResult? mapOrNull<TResult extends Object?>({
    TResult? Function(CreateSampleEvent value)? createSample,
    TResult? Function(InitialLoadEvent value)? initialLoad,
    TResult? Function(GetDiaryListEvent value)? getDiaryList,
    TResult? Function(GetDiaryColumnsEvent value)? getDiaryColumns,
    TResult? Function(GetDiaryCellsEvent value)? getDiaryCells,
    TResult? Function(SelectDiaryCellEvent value)? selectDiaryCell,
    TResult? Function(SelectDiaryCellsEvent value)? selectDiaryCells,
    TResult? Function(SelectCapitalCellEvent value)? selectCapitalCell,
    TResult? Function(OnPanUpdateEvent value)? onPanUpdate,
    TResult? Function(StartEditingListEvent value)? startEditingList,
    TResult? Function(ReturnToLoadedEvent value)? returnToLoaded,
    TResult? Function(ReturnToCellsSelectedEvent value)? returnToCellsSelected,
    TResult? Function(UpdateDiaryListNameEvent value)? updateDiaryListName,
    TResult? Function(ChangeDiaryCellEvent value)? changeDiaryCell,
    TResult? Function(ChangeCapitalCellEvent value)? changeCapitalCell,
    TResult? Function(UpdateDiaryCellInFirebaseEvent value)?
        updateDiaryCellInFirebase,
    TResult? Function(ChangeDiaryCellsSettingsEvent value)?
        changeDiaryCellsSettings,
    TResult? Function(ChangeDiaryCellsBordersSettingsEvent value)?
        changeDiaryCellsBordersSettings,
    TResult? Function(ChangeCapitalCellSettingsEvent value)?
        changeCapitalCellSettings,
    TResult? Function(UpdateDiaryCellSettingsInFirebaseEvent value)?
        updateDiaryCellSettingsInFirebase,
    TResult? Function(UpdateCapitalCellSettingsInFirebaseEvent value)?
        updateCapitalCellSettingsInFirebase,
    TResult? Function(UpdateCapitalCellWidthEvent value)?
        updateCapitalCellWidth,
    TResult? Function(UpdateCapitalCellWidthInFirebaseEvent value)?
        updateCapitalCellWidthInFirebase,
    TResult? Function(StartEditingCellsEvent value)? startEditingCells,
    TResult? Function(CreateDiaryColumnEvent value)? createDiaryColumn,
    TResult? Function(DeleteDiaryColumnEvent value)? deleteDiaryColumn,
    TResult? Function(UpdateDiaryListSettingsEvent value)?
        updateDiaryListSettings,
    TResult? Function(ShareThemeEvent value)? shareTheme,
    TResult? Function(StartEditingColorEvent value)? startEditingColor,
    TResult? Function(StartEditingBordersEvent value)? startEditingBorders,
    TResult? Function(StartEditingBordersStyleEvent value)?
        startEditingBorderStyle,
    TResult? Function(TurnBackEditingEvent value)? turnBackEditing,
    TResult? Function(StartColumnDeletingEvent value)? startColumnDeleting,
    TResult? Function(StartColorThemeEditingEvent value)?
        startColorThemeEditing,
    TResult? Function(DeleteColumnsEvent value)? deleteColumns,
    TResult? Function(LoadThemesEvent value)? loadThemes,
    TResult? Function(LoadFromThemeEvent value)? loadFromTheme,
    TResult? Function(TakeThemeEvent value)? takeTheme,
  }) {
    return changeDiaryCell?.call(this);
  }

  @override
  @optionalTypeArgs
  TResult maybeMap<TResult extends Object?>({
    TResult Function(CreateSampleEvent value)? createSample,
    TResult Function(InitialLoadEvent value)? initialLoad,
    TResult Function(GetDiaryListEvent value)? getDiaryList,
    TResult Function(GetDiaryColumnsEvent value)? getDiaryColumns,
    TResult Function(GetDiaryCellsEvent value)? getDiaryCells,
    TResult Function(SelectDiaryCellEvent value)? selectDiaryCell,
    TResult Function(SelectDiaryCellsEvent value)? selectDiaryCells,
    TResult Function(SelectCapitalCellEvent value)? selectCapitalCell,
    TResult Function(OnPanUpdateEvent value)? onPanUpdate,
    TResult Function(StartEditingListEvent value)? startEditingList,
    TResult Function(ReturnToLoadedEvent value)? returnToLoaded,
    TResult Function(ReturnToCellsSelectedEvent value)? returnToCellsSelected,
    TResult Function(UpdateDiaryListNameEvent value)? updateDiaryListName,
    TResult Function(ChangeDiaryCellEvent value)? changeDiaryCell,
    TResult Function(ChangeCapitalCellEvent value)? changeCapitalCell,
    TResult Function(UpdateDiaryCellInFirebaseEvent value)?
        updateDiaryCellInFirebase,
    TResult Function(ChangeDiaryCellsSettingsEvent value)?
        changeDiaryCellsSettings,
    TResult Function(ChangeDiaryCellsBordersSettingsEvent value)?
        changeDiaryCellsBordersSettings,
    TResult Function(ChangeCapitalCellSettingsEvent value)?
        changeCapitalCellSettings,
    TResult Function(UpdateDiaryCellSettingsInFirebaseEvent value)?
        updateDiaryCellSettingsInFirebase,
    TResult Function(UpdateCapitalCellSettingsInFirebaseEvent value)?
        updateCapitalCellSettingsInFirebase,
    TResult Function(UpdateCapitalCellWidthEvent value)? updateCapitalCellWidth,
    TResult Function(UpdateCapitalCellWidthInFirebaseEvent value)?
        updateCapitalCellWidthInFirebase,
    TResult Function(StartEditingCellsEvent value)? startEditingCells,
    TResult Function(CreateDiaryColumnEvent value)? createDiaryColumn,
    TResult Function(DeleteDiaryColumnEvent value)? deleteDiaryColumn,
    TResult Function(UpdateDiaryListSettingsEvent value)?
        updateDiaryListSettings,
    TResult Function(ShareThemeEvent value)? shareTheme,
    TResult Function(StartEditingColorEvent value)? startEditingColor,
    TResult Function(StartEditingBordersEvent value)? startEditingBorders,
    TResult Function(StartEditingBordersStyleEvent value)?
        startEditingBorderStyle,
    TResult Function(TurnBackEditingEvent value)? turnBackEditing,
    TResult Function(StartColumnDeletingEvent value)? startColumnDeleting,
    TResult Function(StartColorThemeEditingEvent value)? startColorThemeEditing,
    TResult Function(DeleteColumnsEvent value)? deleteColumns,
    TResult Function(LoadThemesEvent value)? loadThemes,
    TResult Function(LoadFromThemeEvent value)? loadFromTheme,
    TResult Function(TakeThemeEvent value)? takeTheme,
    required TResult orElse(),
  }) {
    if (changeDiaryCell != null) {
      return changeDiaryCell(this);
    }
    return orElse();
  }
}

abstract class ChangeDiaryCellEvent implements DiaryListEvent {
  const factory ChangeDiaryCellEvent(
      {required final DiaryCell diaryCell,
      final String? textFieldText}) = _$ChangeDiaryCellEvent;

  DiaryCell get diaryCell;
  String? get textFieldText;
  @JsonKey(ignore: true)
  _$$ChangeDiaryCellEventCopyWith<_$ChangeDiaryCellEvent> get copyWith =>
      throw _privateConstructorUsedError;
}

/// @nodoc
abstract class _$$ChangeCapitalCellEventCopyWith<$Res> {
  factory _$$ChangeCapitalCellEventCopyWith(_$ChangeCapitalCellEvent value,
          $Res Function(_$ChangeCapitalCellEvent) then) =
      __$$ChangeCapitalCellEventCopyWithImpl<$Res>;
  @useResult
  $Res call({CapitalCell capitalCell, String? textFieldText});
}

/// @nodoc
class __$$ChangeCapitalCellEventCopyWithImpl<$Res>
    extends _$DiaryListEventCopyWithImpl<$Res, _$ChangeCapitalCellEvent>
    implements _$$ChangeCapitalCellEventCopyWith<$Res> {
  __$$ChangeCapitalCellEventCopyWithImpl(_$ChangeCapitalCellEvent _value,
      $Res Function(_$ChangeCapitalCellEvent) _then)
      : super(_value, _then);

  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? capitalCell = null,
    Object? textFieldText = freezed,
  }) {
    return _then(_$ChangeCapitalCellEvent(
      capitalCell: null == capitalCell
          ? _value.capitalCell
          : capitalCell // ignore: cast_nullable_to_non_nullable
              as CapitalCell,
      textFieldText: freezed == textFieldText
          ? _value.textFieldText
          : textFieldText // ignore: cast_nullable_to_non_nullable
              as String?,
    ));
  }
}

/// @nodoc

class _$ChangeCapitalCellEvent implements ChangeCapitalCellEvent {
  const _$ChangeCapitalCellEvent(
      {required this.capitalCell, this.textFieldText});

  @override
  final CapitalCell capitalCell;
  @override
  final String? textFieldText;

  @override
  String toString() {
    return 'DiaryListEvent.changeCapitalCell(capitalCell: $capitalCell, textFieldText: $textFieldText)';
  }

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$ChangeCapitalCellEvent &&
            (identical(other.capitalCell, capitalCell) ||
                other.capitalCell == capitalCell) &&
            (identical(other.textFieldText, textFieldText) ||
                other.textFieldText == textFieldText));
  }

  @override
  int get hashCode => Object.hash(runtimeType, capitalCell, textFieldText);

  @JsonKey(ignore: true)
  @override
  @pragma('vm:prefer-inline')
  _$$ChangeCapitalCellEventCopyWith<_$ChangeCapitalCellEvent> get copyWith =>
      __$$ChangeCapitalCellEventCopyWithImpl<_$ChangeCapitalCellEvent>(
          this, _$identity);

  @override
  @optionalTypeArgs
  TResult when<TResult extends Object?>({
    required TResult Function() createSample,
    required TResult Function() initialLoad,
    required TResult Function(DateTime date, int delay) getDiaryList,
    required TResult Function(DiaryList diaryList, List<DiaryList> lists)
        getDiaryColumns,
    required TResult Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells,
            List<DiaryList> lists)
        getDiaryCells,
    required TResult Function(DiaryCell diaryCell) selectDiaryCell,
    required TResult Function(List<DiaryCell> diaryCells) selectDiaryCells,
    required TResult Function(CapitalCell capitalCell) selectCapitalCell,
    required TResult Function(
            DiaryCell diaryCell,
            GlobalObjectKey<State<StatefulWidget>> cellKey,
            DragUpdateDetails details,
            double scaleFactor)
        onPanUpdate,
    required TResult Function(DiaryList? selectedList) startEditingList,
    required TResult Function(
            String? newName, String? addedColumnName, int? addedColumnCount)
        returnToLoaded,
    required TResult Function() returnToCellsSelected,
    required TResult Function(DiaryList diaryList, String newName)
        updateDiaryListName,
    required TResult Function(DiaryCell diaryCell, String? textFieldText)
        changeDiaryCell,
    required TResult Function(CapitalCell capitalCell, String? textFieldText)
        changeCapitalCell,
    required TResult Function(DiaryCell diaryCell, String? textFieldText)
        updateDiaryCellInFirebase,
    required TResult Function(
            FontWeightEnum? fontWeight,
            TextDecorationEnum? textDecoration,
            FontStyleEnum? fontStyle,
            double? fontSize,
            String? color,
            HorizontalAlignmentsEnum? horizontalAlignment,
            VerticalAlignmentsEnum? verticalAlignment,
            String? backgroundColor)
        changeDiaryCellsSettings,
    required TResult Function(BordersEditingEnum bordersEditingEnum,
            BordersStyleEnum bordersStyleEnum, Color bordersColor)
        changeDiaryCellsBordersSettings,
    required TResult Function(
            FontWeightEnum? fontWeight,
            TextDecorationEnum? textDecoration,
            FontStyleEnum? fontStyle,
            double? fontSize,
            String? color,
            HorizontalAlignmentsEnum? horizontalAlignment,
            VerticalAlignmentsEnum? verticalAlignment,
            String? backgroundColor,
            BordersStyleEnum? bordersStyleEnum,
            Color? bordersColor)
        changeCapitalCellSettings,
    required TResult Function(
            DiaryCell diaryCell,
            int index,
            DiaryCellTextSettings? newTextSettings,
            DiaryCellSettings? newSettings)
        updateDiaryCellSettingsInFirebase,
    required TResult Function(DiaryColumnSettings newSettings)
        updateCapitalCellSettingsInFirebase,
    required TResult Function(PointerMoveEvent details) updateCapitalCellWidth,
    required TResult Function(PointerUpEvent details)
        updateCapitalCellWidthInFirebase,
    required TResult Function(bool isTextEditing) startEditingCells,
    required TResult Function(DiaryList diaryList, String name,
            int columnsCount, List<DiaryColumn> diaryColumns)
        createDiaryColumn,
    required TResult Function(DiaryList diaryList, String columnId)
        deleteDiaryColumn,
    required TResult Function(DiaryList diaryList, String? themeColor,
            String? themeBorderColor, String? themePanelBackgroundColor)
        updateDiaryListSettings,
    required TResult Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<DiaryCell> diaryCells,
            List<CapitalCell> capitalCells,
            String themeName,
            String description)
        shareTheme,
    required TResult Function() startEditingColor,
    required TResult Function() startEditingBorders,
    required TResult Function() startEditingBorderStyle,
    required TResult Function() turnBackEditing,
    required TResult Function() startColumnDeleting,
    required TResult Function() startColorThemeEditing,
    required TResult Function() deleteColumns,
    required TResult Function() loadThemes,
    required TResult Function(ListTheme listTheme) loadFromTheme,
    required TResult Function(ListTheme listTheme) takeTheme,
  }) {
    return changeCapitalCell(capitalCell, textFieldText);
  }

  @override
  @optionalTypeArgs
  TResult? whenOrNull<TResult extends Object?>({
    TResult? Function()? createSample,
    TResult? Function()? initialLoad,
    TResult? Function(DateTime date, int delay)? getDiaryList,
    TResult? Function(DiaryList diaryList, List<DiaryList> lists)?
        getDiaryColumns,
    TResult? Function(DiaryList diaryList, List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells, List<DiaryList> lists)?
        getDiaryCells,
    TResult? Function(DiaryCell diaryCell)? selectDiaryCell,
    TResult? Function(List<DiaryCell> diaryCells)? selectDiaryCells,
    TResult? Function(CapitalCell capitalCell)? selectCapitalCell,
    TResult? Function(
            DiaryCell diaryCell,
            GlobalObjectKey<State<StatefulWidget>> cellKey,
            DragUpdateDetails details,
            double scaleFactor)?
        onPanUpdate,
    TResult? Function(DiaryList? selectedList)? startEditingList,
    TResult? Function(
            String? newName, String? addedColumnName, int? addedColumnCount)?
        returnToLoaded,
    TResult? Function()? returnToCellsSelected,
    TResult? Function(DiaryList diaryList, String newName)? updateDiaryListName,
    TResult? Function(DiaryCell diaryCell, String? textFieldText)?
        changeDiaryCell,
    TResult? Function(CapitalCell capitalCell, String? textFieldText)?
        changeCapitalCell,
    TResult? Function(DiaryCell diaryCell, String? textFieldText)?
        updateDiaryCellInFirebase,
    TResult? Function(
            FontWeightEnum? fontWeight,
            TextDecorationEnum? textDecoration,
            FontStyleEnum? fontStyle,
            double? fontSize,
            String? color,
            HorizontalAlignmentsEnum? horizontalAlignment,
            VerticalAlignmentsEnum? verticalAlignment,
            String? backgroundColor)?
        changeDiaryCellsSettings,
    TResult? Function(BordersEditingEnum bordersEditingEnum,
            BordersStyleEnum bordersStyleEnum, Color bordersColor)?
        changeDiaryCellsBordersSettings,
    TResult? Function(
            FontWeightEnum? fontWeight,
            TextDecorationEnum? textDecoration,
            FontStyleEnum? fontStyle,
            double? fontSize,
            String? color,
            HorizontalAlignmentsEnum? horizontalAlignment,
            VerticalAlignmentsEnum? verticalAlignment,
            String? backgroundColor,
            BordersStyleEnum? bordersStyleEnum,
            Color? bordersColor)?
        changeCapitalCellSettings,
    TResult? Function(
            DiaryCell diaryCell,
            int index,
            DiaryCellTextSettings? newTextSettings,
            DiaryCellSettings? newSettings)?
        updateDiaryCellSettingsInFirebase,
    TResult? Function(DiaryColumnSettings newSettings)?
        updateCapitalCellSettingsInFirebase,
    TResult? Function(PointerMoveEvent details)? updateCapitalCellWidth,
    TResult? Function(PointerUpEvent details)? updateCapitalCellWidthInFirebase,
    TResult? Function(bool isTextEditing)? startEditingCells,
    TResult? Function(DiaryList diaryList, String name, int columnsCount,
            List<DiaryColumn> diaryColumns)?
        createDiaryColumn,
    TResult? Function(DiaryList diaryList, String columnId)? deleteDiaryColumn,
    TResult? Function(DiaryList diaryList, String? themeColor,
            String? themeBorderColor, String? themePanelBackgroundColor)?
        updateDiaryListSettings,
    TResult? Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<DiaryCell> diaryCells,
            List<CapitalCell> capitalCells,
            String themeName,
            String description)?
        shareTheme,
    TResult? Function()? startEditingColor,
    TResult? Function()? startEditingBorders,
    TResult? Function()? startEditingBorderStyle,
    TResult? Function()? turnBackEditing,
    TResult? Function()? startColumnDeleting,
    TResult? Function()? startColorThemeEditing,
    TResult? Function()? deleteColumns,
    TResult? Function()? loadThemes,
    TResult? Function(ListTheme listTheme)? loadFromTheme,
    TResult? Function(ListTheme listTheme)? takeTheme,
  }) {
    return changeCapitalCell?.call(capitalCell, textFieldText);
  }

  @override
  @optionalTypeArgs
  TResult maybeWhen<TResult extends Object?>({
    TResult Function()? createSample,
    TResult Function()? initialLoad,
    TResult Function(DateTime date, int delay)? getDiaryList,
    TResult Function(DiaryList diaryList, List<DiaryList> lists)?
        getDiaryColumns,
    TResult Function(DiaryList diaryList, List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells, List<DiaryList> lists)?
        getDiaryCells,
    TResult Function(DiaryCell diaryCell)? selectDiaryCell,
    TResult Function(List<DiaryCell> diaryCells)? selectDiaryCells,
    TResult Function(CapitalCell capitalCell)? selectCapitalCell,
    TResult Function(
            DiaryCell diaryCell,
            GlobalObjectKey<State<StatefulWidget>> cellKey,
            DragUpdateDetails details,
            double scaleFactor)?
        onPanUpdate,
    TResult Function(DiaryList? selectedList)? startEditingList,
    TResult Function(
            String? newName, String? addedColumnName, int? addedColumnCount)?
        returnToLoaded,
    TResult Function()? returnToCellsSelected,
    TResult Function(DiaryList diaryList, String newName)? updateDiaryListName,
    TResult Function(DiaryCell diaryCell, String? textFieldText)?
        changeDiaryCell,
    TResult Function(CapitalCell capitalCell, String? textFieldText)?
        changeCapitalCell,
    TResult Function(DiaryCell diaryCell, String? textFieldText)?
        updateDiaryCellInFirebase,
    TResult Function(
            FontWeightEnum? fontWeight,
            TextDecorationEnum? textDecoration,
            FontStyleEnum? fontStyle,
            double? fontSize,
            String? color,
            HorizontalAlignmentsEnum? horizontalAlignment,
            VerticalAlignmentsEnum? verticalAlignment,
            String? backgroundColor)?
        changeDiaryCellsSettings,
    TResult Function(BordersEditingEnum bordersEditingEnum,
            BordersStyleEnum bordersStyleEnum, Color bordersColor)?
        changeDiaryCellsBordersSettings,
    TResult Function(
            FontWeightEnum? fontWeight,
            TextDecorationEnum? textDecoration,
            FontStyleEnum? fontStyle,
            double? fontSize,
            String? color,
            HorizontalAlignmentsEnum? horizontalAlignment,
            VerticalAlignmentsEnum? verticalAlignment,
            String? backgroundColor,
            BordersStyleEnum? bordersStyleEnum,
            Color? bordersColor)?
        changeCapitalCellSettings,
    TResult Function(
            DiaryCell diaryCell,
            int index,
            DiaryCellTextSettings? newTextSettings,
            DiaryCellSettings? newSettings)?
        updateDiaryCellSettingsInFirebase,
    TResult Function(DiaryColumnSettings newSettings)?
        updateCapitalCellSettingsInFirebase,
    TResult Function(PointerMoveEvent details)? updateCapitalCellWidth,
    TResult Function(PointerUpEvent details)? updateCapitalCellWidthInFirebase,
    TResult Function(bool isTextEditing)? startEditingCells,
    TResult Function(DiaryList diaryList, String name, int columnsCount,
            List<DiaryColumn> diaryColumns)?
        createDiaryColumn,
    TResult Function(DiaryList diaryList, String columnId)? deleteDiaryColumn,
    TResult Function(DiaryList diaryList, String? themeColor,
            String? themeBorderColor, String? themePanelBackgroundColor)?
        updateDiaryListSettings,
    TResult Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<DiaryCell> diaryCells,
            List<CapitalCell> capitalCells,
            String themeName,
            String description)?
        shareTheme,
    TResult Function()? startEditingColor,
    TResult Function()? startEditingBorders,
    TResult Function()? startEditingBorderStyle,
    TResult Function()? turnBackEditing,
    TResult Function()? startColumnDeleting,
    TResult Function()? startColorThemeEditing,
    TResult Function()? deleteColumns,
    TResult Function()? loadThemes,
    TResult Function(ListTheme listTheme)? loadFromTheme,
    TResult Function(ListTheme listTheme)? takeTheme,
    required TResult orElse(),
  }) {
    if (changeCapitalCell != null) {
      return changeCapitalCell(capitalCell, textFieldText);
    }
    return orElse();
  }

  @override
  @optionalTypeArgs
  TResult map<TResult extends Object?>({
    required TResult Function(CreateSampleEvent value) createSample,
    required TResult Function(InitialLoadEvent value) initialLoad,
    required TResult Function(GetDiaryListEvent value) getDiaryList,
    required TResult Function(GetDiaryColumnsEvent value) getDiaryColumns,
    required TResult Function(GetDiaryCellsEvent value) getDiaryCells,
    required TResult Function(SelectDiaryCellEvent value) selectDiaryCell,
    required TResult Function(SelectDiaryCellsEvent value) selectDiaryCells,
    required TResult Function(SelectCapitalCellEvent value) selectCapitalCell,
    required TResult Function(OnPanUpdateEvent value) onPanUpdate,
    required TResult Function(StartEditingListEvent value) startEditingList,
    required TResult Function(ReturnToLoadedEvent value) returnToLoaded,
    required TResult Function(ReturnToCellsSelectedEvent value)
        returnToCellsSelected,
    required TResult Function(UpdateDiaryListNameEvent value)
        updateDiaryListName,
    required TResult Function(ChangeDiaryCellEvent value) changeDiaryCell,
    required TResult Function(ChangeCapitalCellEvent value) changeCapitalCell,
    required TResult Function(UpdateDiaryCellInFirebaseEvent value)
        updateDiaryCellInFirebase,
    required TResult Function(ChangeDiaryCellsSettingsEvent value)
        changeDiaryCellsSettings,
    required TResult Function(ChangeDiaryCellsBordersSettingsEvent value)
        changeDiaryCellsBordersSettings,
    required TResult Function(ChangeCapitalCellSettingsEvent value)
        changeCapitalCellSettings,
    required TResult Function(UpdateDiaryCellSettingsInFirebaseEvent value)
        updateDiaryCellSettingsInFirebase,
    required TResult Function(UpdateCapitalCellSettingsInFirebaseEvent value)
        updateCapitalCellSettingsInFirebase,
    required TResult Function(UpdateCapitalCellWidthEvent value)
        updateCapitalCellWidth,
    required TResult Function(UpdateCapitalCellWidthInFirebaseEvent value)
        updateCapitalCellWidthInFirebase,
    required TResult Function(StartEditingCellsEvent value) startEditingCells,
    required TResult Function(CreateDiaryColumnEvent value) createDiaryColumn,
    required TResult Function(DeleteDiaryColumnEvent value) deleteDiaryColumn,
    required TResult Function(UpdateDiaryListSettingsEvent value)
        updateDiaryListSettings,
    required TResult Function(ShareThemeEvent value) shareTheme,
    required TResult Function(StartEditingColorEvent value) startEditingColor,
    required TResult Function(StartEditingBordersEvent value)
        startEditingBorders,
    required TResult Function(StartEditingBordersStyleEvent value)
        startEditingBorderStyle,
    required TResult Function(TurnBackEditingEvent value) turnBackEditing,
    required TResult Function(StartColumnDeletingEvent value)
        startColumnDeleting,
    required TResult Function(StartColorThemeEditingEvent value)
        startColorThemeEditing,
    required TResult Function(DeleteColumnsEvent value) deleteColumns,
    required TResult Function(LoadThemesEvent value) loadThemes,
    required TResult Function(LoadFromThemeEvent value) loadFromTheme,
    required TResult Function(TakeThemeEvent value) takeTheme,
  }) {
    return changeCapitalCell(this);
  }

  @override
  @optionalTypeArgs
  TResult? mapOrNull<TResult extends Object?>({
    TResult? Function(CreateSampleEvent value)? createSample,
    TResult? Function(InitialLoadEvent value)? initialLoad,
    TResult? Function(GetDiaryListEvent value)? getDiaryList,
    TResult? Function(GetDiaryColumnsEvent value)? getDiaryColumns,
    TResult? Function(GetDiaryCellsEvent value)? getDiaryCells,
    TResult? Function(SelectDiaryCellEvent value)? selectDiaryCell,
    TResult? Function(SelectDiaryCellsEvent value)? selectDiaryCells,
    TResult? Function(SelectCapitalCellEvent value)? selectCapitalCell,
    TResult? Function(OnPanUpdateEvent value)? onPanUpdate,
    TResult? Function(StartEditingListEvent value)? startEditingList,
    TResult? Function(ReturnToLoadedEvent value)? returnToLoaded,
    TResult? Function(ReturnToCellsSelectedEvent value)? returnToCellsSelected,
    TResult? Function(UpdateDiaryListNameEvent value)? updateDiaryListName,
    TResult? Function(ChangeDiaryCellEvent value)? changeDiaryCell,
    TResult? Function(ChangeCapitalCellEvent value)? changeCapitalCell,
    TResult? Function(UpdateDiaryCellInFirebaseEvent value)?
        updateDiaryCellInFirebase,
    TResult? Function(ChangeDiaryCellsSettingsEvent value)?
        changeDiaryCellsSettings,
    TResult? Function(ChangeDiaryCellsBordersSettingsEvent value)?
        changeDiaryCellsBordersSettings,
    TResult? Function(ChangeCapitalCellSettingsEvent value)?
        changeCapitalCellSettings,
    TResult? Function(UpdateDiaryCellSettingsInFirebaseEvent value)?
        updateDiaryCellSettingsInFirebase,
    TResult? Function(UpdateCapitalCellSettingsInFirebaseEvent value)?
        updateCapitalCellSettingsInFirebase,
    TResult? Function(UpdateCapitalCellWidthEvent value)?
        updateCapitalCellWidth,
    TResult? Function(UpdateCapitalCellWidthInFirebaseEvent value)?
        updateCapitalCellWidthInFirebase,
    TResult? Function(StartEditingCellsEvent value)? startEditingCells,
    TResult? Function(CreateDiaryColumnEvent value)? createDiaryColumn,
    TResult? Function(DeleteDiaryColumnEvent value)? deleteDiaryColumn,
    TResult? Function(UpdateDiaryListSettingsEvent value)?
        updateDiaryListSettings,
    TResult? Function(ShareThemeEvent value)? shareTheme,
    TResult? Function(StartEditingColorEvent value)? startEditingColor,
    TResult? Function(StartEditingBordersEvent value)? startEditingBorders,
    TResult? Function(StartEditingBordersStyleEvent value)?
        startEditingBorderStyle,
    TResult? Function(TurnBackEditingEvent value)? turnBackEditing,
    TResult? Function(StartColumnDeletingEvent value)? startColumnDeleting,
    TResult? Function(StartColorThemeEditingEvent value)?
        startColorThemeEditing,
    TResult? Function(DeleteColumnsEvent value)? deleteColumns,
    TResult? Function(LoadThemesEvent value)? loadThemes,
    TResult? Function(LoadFromThemeEvent value)? loadFromTheme,
    TResult? Function(TakeThemeEvent value)? takeTheme,
  }) {
    return changeCapitalCell?.call(this);
  }

  @override
  @optionalTypeArgs
  TResult maybeMap<TResult extends Object?>({
    TResult Function(CreateSampleEvent value)? createSample,
    TResult Function(InitialLoadEvent value)? initialLoad,
    TResult Function(GetDiaryListEvent value)? getDiaryList,
    TResult Function(GetDiaryColumnsEvent value)? getDiaryColumns,
    TResult Function(GetDiaryCellsEvent value)? getDiaryCells,
    TResult Function(SelectDiaryCellEvent value)? selectDiaryCell,
    TResult Function(SelectDiaryCellsEvent value)? selectDiaryCells,
    TResult Function(SelectCapitalCellEvent value)? selectCapitalCell,
    TResult Function(OnPanUpdateEvent value)? onPanUpdate,
    TResult Function(StartEditingListEvent value)? startEditingList,
    TResult Function(ReturnToLoadedEvent value)? returnToLoaded,
    TResult Function(ReturnToCellsSelectedEvent value)? returnToCellsSelected,
    TResult Function(UpdateDiaryListNameEvent value)? updateDiaryListName,
    TResult Function(ChangeDiaryCellEvent value)? changeDiaryCell,
    TResult Function(ChangeCapitalCellEvent value)? changeCapitalCell,
    TResult Function(UpdateDiaryCellInFirebaseEvent value)?
        updateDiaryCellInFirebase,
    TResult Function(ChangeDiaryCellsSettingsEvent value)?
        changeDiaryCellsSettings,
    TResult Function(ChangeDiaryCellsBordersSettingsEvent value)?
        changeDiaryCellsBordersSettings,
    TResult Function(ChangeCapitalCellSettingsEvent value)?
        changeCapitalCellSettings,
    TResult Function(UpdateDiaryCellSettingsInFirebaseEvent value)?
        updateDiaryCellSettingsInFirebase,
    TResult Function(UpdateCapitalCellSettingsInFirebaseEvent value)?
        updateCapitalCellSettingsInFirebase,
    TResult Function(UpdateCapitalCellWidthEvent value)? updateCapitalCellWidth,
    TResult Function(UpdateCapitalCellWidthInFirebaseEvent value)?
        updateCapitalCellWidthInFirebase,
    TResult Function(StartEditingCellsEvent value)? startEditingCells,
    TResult Function(CreateDiaryColumnEvent value)? createDiaryColumn,
    TResult Function(DeleteDiaryColumnEvent value)? deleteDiaryColumn,
    TResult Function(UpdateDiaryListSettingsEvent value)?
        updateDiaryListSettings,
    TResult Function(ShareThemeEvent value)? shareTheme,
    TResult Function(StartEditingColorEvent value)? startEditingColor,
    TResult Function(StartEditingBordersEvent value)? startEditingBorders,
    TResult Function(StartEditingBordersStyleEvent value)?
        startEditingBorderStyle,
    TResult Function(TurnBackEditingEvent value)? turnBackEditing,
    TResult Function(StartColumnDeletingEvent value)? startColumnDeleting,
    TResult Function(StartColorThemeEditingEvent value)? startColorThemeEditing,
    TResult Function(DeleteColumnsEvent value)? deleteColumns,
    TResult Function(LoadThemesEvent value)? loadThemes,
    TResult Function(LoadFromThemeEvent value)? loadFromTheme,
    TResult Function(TakeThemeEvent value)? takeTheme,
    required TResult orElse(),
  }) {
    if (changeCapitalCell != null) {
      return changeCapitalCell(this);
    }
    return orElse();
  }
}

abstract class ChangeCapitalCellEvent implements DiaryListEvent {
  const factory ChangeCapitalCellEvent(
      {required final CapitalCell capitalCell,
      final String? textFieldText}) = _$ChangeCapitalCellEvent;

  CapitalCell get capitalCell;
  String? get textFieldText;
  @JsonKey(ignore: true)
  _$$ChangeCapitalCellEventCopyWith<_$ChangeCapitalCellEvent> get copyWith =>
      throw _privateConstructorUsedError;
}

/// @nodoc
abstract class _$$UpdateDiaryCellInFirebaseEventCopyWith<$Res> {
  factory _$$UpdateDiaryCellInFirebaseEventCopyWith(
          _$UpdateDiaryCellInFirebaseEvent value,
          $Res Function(_$UpdateDiaryCellInFirebaseEvent) then) =
      __$$UpdateDiaryCellInFirebaseEventCopyWithImpl<$Res>;
  @useResult
  $Res call({DiaryCell diaryCell, String? textFieldText});
}

/// @nodoc
class __$$UpdateDiaryCellInFirebaseEventCopyWithImpl<$Res>
    extends _$DiaryListEventCopyWithImpl<$Res, _$UpdateDiaryCellInFirebaseEvent>
    implements _$$UpdateDiaryCellInFirebaseEventCopyWith<$Res> {
  __$$UpdateDiaryCellInFirebaseEventCopyWithImpl(
      _$UpdateDiaryCellInFirebaseEvent _value,
      $Res Function(_$UpdateDiaryCellInFirebaseEvent) _then)
      : super(_value, _then);

  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? diaryCell = null,
    Object? textFieldText = freezed,
  }) {
    return _then(_$UpdateDiaryCellInFirebaseEvent(
      diaryCell: null == diaryCell
          ? _value.diaryCell
          : diaryCell // ignore: cast_nullable_to_non_nullable
              as DiaryCell,
      textFieldText: freezed == textFieldText
          ? _value.textFieldText
          : textFieldText // ignore: cast_nullable_to_non_nullable
              as String?,
    ));
  }
}

/// @nodoc

class _$UpdateDiaryCellInFirebaseEvent
    implements UpdateDiaryCellInFirebaseEvent {
  const _$UpdateDiaryCellInFirebaseEvent(
      {required this.diaryCell, this.textFieldText});

  @override
  final DiaryCell diaryCell;
  @override
  final String? textFieldText;

  @override
  String toString() {
    return 'DiaryListEvent.updateDiaryCellInFirebase(diaryCell: $diaryCell, textFieldText: $textFieldText)';
  }

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$UpdateDiaryCellInFirebaseEvent &&
            (identical(other.diaryCell, diaryCell) ||
                other.diaryCell == diaryCell) &&
            (identical(other.textFieldText, textFieldText) ||
                other.textFieldText == textFieldText));
  }

  @override
  int get hashCode => Object.hash(runtimeType, diaryCell, textFieldText);

  @JsonKey(ignore: true)
  @override
  @pragma('vm:prefer-inline')
  _$$UpdateDiaryCellInFirebaseEventCopyWith<_$UpdateDiaryCellInFirebaseEvent>
      get copyWith => __$$UpdateDiaryCellInFirebaseEventCopyWithImpl<
          _$UpdateDiaryCellInFirebaseEvent>(this, _$identity);

  @override
  @optionalTypeArgs
  TResult when<TResult extends Object?>({
    required TResult Function() createSample,
    required TResult Function() initialLoad,
    required TResult Function(DateTime date, int delay) getDiaryList,
    required TResult Function(DiaryList diaryList, List<DiaryList> lists)
        getDiaryColumns,
    required TResult Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells,
            List<DiaryList> lists)
        getDiaryCells,
    required TResult Function(DiaryCell diaryCell) selectDiaryCell,
    required TResult Function(List<DiaryCell> diaryCells) selectDiaryCells,
    required TResult Function(CapitalCell capitalCell) selectCapitalCell,
    required TResult Function(
            DiaryCell diaryCell,
            GlobalObjectKey<State<StatefulWidget>> cellKey,
            DragUpdateDetails details,
            double scaleFactor)
        onPanUpdate,
    required TResult Function(DiaryList? selectedList) startEditingList,
    required TResult Function(
            String? newName, String? addedColumnName, int? addedColumnCount)
        returnToLoaded,
    required TResult Function() returnToCellsSelected,
    required TResult Function(DiaryList diaryList, String newName)
        updateDiaryListName,
    required TResult Function(DiaryCell diaryCell, String? textFieldText)
        changeDiaryCell,
    required TResult Function(CapitalCell capitalCell, String? textFieldText)
        changeCapitalCell,
    required TResult Function(DiaryCell diaryCell, String? textFieldText)
        updateDiaryCellInFirebase,
    required TResult Function(
            FontWeightEnum? fontWeight,
            TextDecorationEnum? textDecoration,
            FontStyleEnum? fontStyle,
            double? fontSize,
            String? color,
            HorizontalAlignmentsEnum? horizontalAlignment,
            VerticalAlignmentsEnum? verticalAlignment,
            String? backgroundColor)
        changeDiaryCellsSettings,
    required TResult Function(BordersEditingEnum bordersEditingEnum,
            BordersStyleEnum bordersStyleEnum, Color bordersColor)
        changeDiaryCellsBordersSettings,
    required TResult Function(
            FontWeightEnum? fontWeight,
            TextDecorationEnum? textDecoration,
            FontStyleEnum? fontStyle,
            double? fontSize,
            String? color,
            HorizontalAlignmentsEnum? horizontalAlignment,
            VerticalAlignmentsEnum? verticalAlignment,
            String? backgroundColor,
            BordersStyleEnum? bordersStyleEnum,
            Color? bordersColor)
        changeCapitalCellSettings,
    required TResult Function(
            DiaryCell diaryCell,
            int index,
            DiaryCellTextSettings? newTextSettings,
            DiaryCellSettings? newSettings)
        updateDiaryCellSettingsInFirebase,
    required TResult Function(DiaryColumnSettings newSettings)
        updateCapitalCellSettingsInFirebase,
    required TResult Function(PointerMoveEvent details) updateCapitalCellWidth,
    required TResult Function(PointerUpEvent details)
        updateCapitalCellWidthInFirebase,
    required TResult Function(bool isTextEditing) startEditingCells,
    required TResult Function(DiaryList diaryList, String name,
            int columnsCount, List<DiaryColumn> diaryColumns)
        createDiaryColumn,
    required TResult Function(DiaryList diaryList, String columnId)
        deleteDiaryColumn,
    required TResult Function(DiaryList diaryList, String? themeColor,
            String? themeBorderColor, String? themePanelBackgroundColor)
        updateDiaryListSettings,
    required TResult Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<DiaryCell> diaryCells,
            List<CapitalCell> capitalCells,
            String themeName,
            String description)
        shareTheme,
    required TResult Function() startEditingColor,
    required TResult Function() startEditingBorders,
    required TResult Function() startEditingBorderStyle,
    required TResult Function() turnBackEditing,
    required TResult Function() startColumnDeleting,
    required TResult Function() startColorThemeEditing,
    required TResult Function() deleteColumns,
    required TResult Function() loadThemes,
    required TResult Function(ListTheme listTheme) loadFromTheme,
    required TResult Function(ListTheme listTheme) takeTheme,
  }) {
    return updateDiaryCellInFirebase(diaryCell, textFieldText);
  }

  @override
  @optionalTypeArgs
  TResult? whenOrNull<TResult extends Object?>({
    TResult? Function()? createSample,
    TResult? Function()? initialLoad,
    TResult? Function(DateTime date, int delay)? getDiaryList,
    TResult? Function(DiaryList diaryList, List<DiaryList> lists)?
        getDiaryColumns,
    TResult? Function(DiaryList diaryList, List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells, List<DiaryList> lists)?
        getDiaryCells,
    TResult? Function(DiaryCell diaryCell)? selectDiaryCell,
    TResult? Function(List<DiaryCell> diaryCells)? selectDiaryCells,
    TResult? Function(CapitalCell capitalCell)? selectCapitalCell,
    TResult? Function(
            DiaryCell diaryCell,
            GlobalObjectKey<State<StatefulWidget>> cellKey,
            DragUpdateDetails details,
            double scaleFactor)?
        onPanUpdate,
    TResult? Function(DiaryList? selectedList)? startEditingList,
    TResult? Function(
            String? newName, String? addedColumnName, int? addedColumnCount)?
        returnToLoaded,
    TResult? Function()? returnToCellsSelected,
    TResult? Function(DiaryList diaryList, String newName)? updateDiaryListName,
    TResult? Function(DiaryCell diaryCell, String? textFieldText)?
        changeDiaryCell,
    TResult? Function(CapitalCell capitalCell, String? textFieldText)?
        changeCapitalCell,
    TResult? Function(DiaryCell diaryCell, String? textFieldText)?
        updateDiaryCellInFirebase,
    TResult? Function(
            FontWeightEnum? fontWeight,
            TextDecorationEnum? textDecoration,
            FontStyleEnum? fontStyle,
            double? fontSize,
            String? color,
            HorizontalAlignmentsEnum? horizontalAlignment,
            VerticalAlignmentsEnum? verticalAlignment,
            String? backgroundColor)?
        changeDiaryCellsSettings,
    TResult? Function(BordersEditingEnum bordersEditingEnum,
            BordersStyleEnum bordersStyleEnum, Color bordersColor)?
        changeDiaryCellsBordersSettings,
    TResult? Function(
            FontWeightEnum? fontWeight,
            TextDecorationEnum? textDecoration,
            FontStyleEnum? fontStyle,
            double? fontSize,
            String? color,
            HorizontalAlignmentsEnum? horizontalAlignment,
            VerticalAlignmentsEnum? verticalAlignment,
            String? backgroundColor,
            BordersStyleEnum? bordersStyleEnum,
            Color? bordersColor)?
        changeCapitalCellSettings,
    TResult? Function(
            DiaryCell diaryCell,
            int index,
            DiaryCellTextSettings? newTextSettings,
            DiaryCellSettings? newSettings)?
        updateDiaryCellSettingsInFirebase,
    TResult? Function(DiaryColumnSettings newSettings)?
        updateCapitalCellSettingsInFirebase,
    TResult? Function(PointerMoveEvent details)? updateCapitalCellWidth,
    TResult? Function(PointerUpEvent details)? updateCapitalCellWidthInFirebase,
    TResult? Function(bool isTextEditing)? startEditingCells,
    TResult? Function(DiaryList diaryList, String name, int columnsCount,
            List<DiaryColumn> diaryColumns)?
        createDiaryColumn,
    TResult? Function(DiaryList diaryList, String columnId)? deleteDiaryColumn,
    TResult? Function(DiaryList diaryList, String? themeColor,
            String? themeBorderColor, String? themePanelBackgroundColor)?
        updateDiaryListSettings,
    TResult? Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<DiaryCell> diaryCells,
            List<CapitalCell> capitalCells,
            String themeName,
            String description)?
        shareTheme,
    TResult? Function()? startEditingColor,
    TResult? Function()? startEditingBorders,
    TResult? Function()? startEditingBorderStyle,
    TResult? Function()? turnBackEditing,
    TResult? Function()? startColumnDeleting,
    TResult? Function()? startColorThemeEditing,
    TResult? Function()? deleteColumns,
    TResult? Function()? loadThemes,
    TResult? Function(ListTheme listTheme)? loadFromTheme,
    TResult? Function(ListTheme listTheme)? takeTheme,
  }) {
    return updateDiaryCellInFirebase?.call(diaryCell, textFieldText);
  }

  @override
  @optionalTypeArgs
  TResult maybeWhen<TResult extends Object?>({
    TResult Function()? createSample,
    TResult Function()? initialLoad,
    TResult Function(DateTime date, int delay)? getDiaryList,
    TResult Function(DiaryList diaryList, List<DiaryList> lists)?
        getDiaryColumns,
    TResult Function(DiaryList diaryList, List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells, List<DiaryList> lists)?
        getDiaryCells,
    TResult Function(DiaryCell diaryCell)? selectDiaryCell,
    TResult Function(List<DiaryCell> diaryCells)? selectDiaryCells,
    TResult Function(CapitalCell capitalCell)? selectCapitalCell,
    TResult Function(
            DiaryCell diaryCell,
            GlobalObjectKey<State<StatefulWidget>> cellKey,
            DragUpdateDetails details,
            double scaleFactor)?
        onPanUpdate,
    TResult Function(DiaryList? selectedList)? startEditingList,
    TResult Function(
            String? newName, String? addedColumnName, int? addedColumnCount)?
        returnToLoaded,
    TResult Function()? returnToCellsSelected,
    TResult Function(DiaryList diaryList, String newName)? updateDiaryListName,
    TResult Function(DiaryCell diaryCell, String? textFieldText)?
        changeDiaryCell,
    TResult Function(CapitalCell capitalCell, String? textFieldText)?
        changeCapitalCell,
    TResult Function(DiaryCell diaryCell, String? textFieldText)?
        updateDiaryCellInFirebase,
    TResult Function(
            FontWeightEnum? fontWeight,
            TextDecorationEnum? textDecoration,
            FontStyleEnum? fontStyle,
            double? fontSize,
            String? color,
            HorizontalAlignmentsEnum? horizontalAlignment,
            VerticalAlignmentsEnum? verticalAlignment,
            String? backgroundColor)?
        changeDiaryCellsSettings,
    TResult Function(BordersEditingEnum bordersEditingEnum,
            BordersStyleEnum bordersStyleEnum, Color bordersColor)?
        changeDiaryCellsBordersSettings,
    TResult Function(
            FontWeightEnum? fontWeight,
            TextDecorationEnum? textDecoration,
            FontStyleEnum? fontStyle,
            double? fontSize,
            String? color,
            HorizontalAlignmentsEnum? horizontalAlignment,
            VerticalAlignmentsEnum? verticalAlignment,
            String? backgroundColor,
            BordersStyleEnum? bordersStyleEnum,
            Color? bordersColor)?
        changeCapitalCellSettings,
    TResult Function(
            DiaryCell diaryCell,
            int index,
            DiaryCellTextSettings? newTextSettings,
            DiaryCellSettings? newSettings)?
        updateDiaryCellSettingsInFirebase,
    TResult Function(DiaryColumnSettings newSettings)?
        updateCapitalCellSettingsInFirebase,
    TResult Function(PointerMoveEvent details)? updateCapitalCellWidth,
    TResult Function(PointerUpEvent details)? updateCapitalCellWidthInFirebase,
    TResult Function(bool isTextEditing)? startEditingCells,
    TResult Function(DiaryList diaryList, String name, int columnsCount,
            List<DiaryColumn> diaryColumns)?
        createDiaryColumn,
    TResult Function(DiaryList diaryList, String columnId)? deleteDiaryColumn,
    TResult Function(DiaryList diaryList, String? themeColor,
            String? themeBorderColor, String? themePanelBackgroundColor)?
        updateDiaryListSettings,
    TResult Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<DiaryCell> diaryCells,
            List<CapitalCell> capitalCells,
            String themeName,
            String description)?
        shareTheme,
    TResult Function()? startEditingColor,
    TResult Function()? startEditingBorders,
    TResult Function()? startEditingBorderStyle,
    TResult Function()? turnBackEditing,
    TResult Function()? startColumnDeleting,
    TResult Function()? startColorThemeEditing,
    TResult Function()? deleteColumns,
    TResult Function()? loadThemes,
    TResult Function(ListTheme listTheme)? loadFromTheme,
    TResult Function(ListTheme listTheme)? takeTheme,
    required TResult orElse(),
  }) {
    if (updateDiaryCellInFirebase != null) {
      return updateDiaryCellInFirebase(diaryCell, textFieldText);
    }
    return orElse();
  }

  @override
  @optionalTypeArgs
  TResult map<TResult extends Object?>({
    required TResult Function(CreateSampleEvent value) createSample,
    required TResult Function(InitialLoadEvent value) initialLoad,
    required TResult Function(GetDiaryListEvent value) getDiaryList,
    required TResult Function(GetDiaryColumnsEvent value) getDiaryColumns,
    required TResult Function(GetDiaryCellsEvent value) getDiaryCells,
    required TResult Function(SelectDiaryCellEvent value) selectDiaryCell,
    required TResult Function(SelectDiaryCellsEvent value) selectDiaryCells,
    required TResult Function(SelectCapitalCellEvent value) selectCapitalCell,
    required TResult Function(OnPanUpdateEvent value) onPanUpdate,
    required TResult Function(StartEditingListEvent value) startEditingList,
    required TResult Function(ReturnToLoadedEvent value) returnToLoaded,
    required TResult Function(ReturnToCellsSelectedEvent value)
        returnToCellsSelected,
    required TResult Function(UpdateDiaryListNameEvent value)
        updateDiaryListName,
    required TResult Function(ChangeDiaryCellEvent value) changeDiaryCell,
    required TResult Function(ChangeCapitalCellEvent value) changeCapitalCell,
    required TResult Function(UpdateDiaryCellInFirebaseEvent value)
        updateDiaryCellInFirebase,
    required TResult Function(ChangeDiaryCellsSettingsEvent value)
        changeDiaryCellsSettings,
    required TResult Function(ChangeDiaryCellsBordersSettingsEvent value)
        changeDiaryCellsBordersSettings,
    required TResult Function(ChangeCapitalCellSettingsEvent value)
        changeCapitalCellSettings,
    required TResult Function(UpdateDiaryCellSettingsInFirebaseEvent value)
        updateDiaryCellSettingsInFirebase,
    required TResult Function(UpdateCapitalCellSettingsInFirebaseEvent value)
        updateCapitalCellSettingsInFirebase,
    required TResult Function(UpdateCapitalCellWidthEvent value)
        updateCapitalCellWidth,
    required TResult Function(UpdateCapitalCellWidthInFirebaseEvent value)
        updateCapitalCellWidthInFirebase,
    required TResult Function(StartEditingCellsEvent value) startEditingCells,
    required TResult Function(CreateDiaryColumnEvent value) createDiaryColumn,
    required TResult Function(DeleteDiaryColumnEvent value) deleteDiaryColumn,
    required TResult Function(UpdateDiaryListSettingsEvent value)
        updateDiaryListSettings,
    required TResult Function(ShareThemeEvent value) shareTheme,
    required TResult Function(StartEditingColorEvent value) startEditingColor,
    required TResult Function(StartEditingBordersEvent value)
        startEditingBorders,
    required TResult Function(StartEditingBordersStyleEvent value)
        startEditingBorderStyle,
    required TResult Function(TurnBackEditingEvent value) turnBackEditing,
    required TResult Function(StartColumnDeletingEvent value)
        startColumnDeleting,
    required TResult Function(StartColorThemeEditingEvent value)
        startColorThemeEditing,
    required TResult Function(DeleteColumnsEvent value) deleteColumns,
    required TResult Function(LoadThemesEvent value) loadThemes,
    required TResult Function(LoadFromThemeEvent value) loadFromTheme,
    required TResult Function(TakeThemeEvent value) takeTheme,
  }) {
    return updateDiaryCellInFirebase(this);
  }

  @override
  @optionalTypeArgs
  TResult? mapOrNull<TResult extends Object?>({
    TResult? Function(CreateSampleEvent value)? createSample,
    TResult? Function(InitialLoadEvent value)? initialLoad,
    TResult? Function(GetDiaryListEvent value)? getDiaryList,
    TResult? Function(GetDiaryColumnsEvent value)? getDiaryColumns,
    TResult? Function(GetDiaryCellsEvent value)? getDiaryCells,
    TResult? Function(SelectDiaryCellEvent value)? selectDiaryCell,
    TResult? Function(SelectDiaryCellsEvent value)? selectDiaryCells,
    TResult? Function(SelectCapitalCellEvent value)? selectCapitalCell,
    TResult? Function(OnPanUpdateEvent value)? onPanUpdate,
    TResult? Function(StartEditingListEvent value)? startEditingList,
    TResult? Function(ReturnToLoadedEvent value)? returnToLoaded,
    TResult? Function(ReturnToCellsSelectedEvent value)? returnToCellsSelected,
    TResult? Function(UpdateDiaryListNameEvent value)? updateDiaryListName,
    TResult? Function(ChangeDiaryCellEvent value)? changeDiaryCell,
    TResult? Function(ChangeCapitalCellEvent value)? changeCapitalCell,
    TResult? Function(UpdateDiaryCellInFirebaseEvent value)?
        updateDiaryCellInFirebase,
    TResult? Function(ChangeDiaryCellsSettingsEvent value)?
        changeDiaryCellsSettings,
    TResult? Function(ChangeDiaryCellsBordersSettingsEvent value)?
        changeDiaryCellsBordersSettings,
    TResult? Function(ChangeCapitalCellSettingsEvent value)?
        changeCapitalCellSettings,
    TResult? Function(UpdateDiaryCellSettingsInFirebaseEvent value)?
        updateDiaryCellSettingsInFirebase,
    TResult? Function(UpdateCapitalCellSettingsInFirebaseEvent value)?
        updateCapitalCellSettingsInFirebase,
    TResult? Function(UpdateCapitalCellWidthEvent value)?
        updateCapitalCellWidth,
    TResult? Function(UpdateCapitalCellWidthInFirebaseEvent value)?
        updateCapitalCellWidthInFirebase,
    TResult? Function(StartEditingCellsEvent value)? startEditingCells,
    TResult? Function(CreateDiaryColumnEvent value)? createDiaryColumn,
    TResult? Function(DeleteDiaryColumnEvent value)? deleteDiaryColumn,
    TResult? Function(UpdateDiaryListSettingsEvent value)?
        updateDiaryListSettings,
    TResult? Function(ShareThemeEvent value)? shareTheme,
    TResult? Function(StartEditingColorEvent value)? startEditingColor,
    TResult? Function(StartEditingBordersEvent value)? startEditingBorders,
    TResult? Function(StartEditingBordersStyleEvent value)?
        startEditingBorderStyle,
    TResult? Function(TurnBackEditingEvent value)? turnBackEditing,
    TResult? Function(StartColumnDeletingEvent value)? startColumnDeleting,
    TResult? Function(StartColorThemeEditingEvent value)?
        startColorThemeEditing,
    TResult? Function(DeleteColumnsEvent value)? deleteColumns,
    TResult? Function(LoadThemesEvent value)? loadThemes,
    TResult? Function(LoadFromThemeEvent value)? loadFromTheme,
    TResult? Function(TakeThemeEvent value)? takeTheme,
  }) {
    return updateDiaryCellInFirebase?.call(this);
  }

  @override
  @optionalTypeArgs
  TResult maybeMap<TResult extends Object?>({
    TResult Function(CreateSampleEvent value)? createSample,
    TResult Function(InitialLoadEvent value)? initialLoad,
    TResult Function(GetDiaryListEvent value)? getDiaryList,
    TResult Function(GetDiaryColumnsEvent value)? getDiaryColumns,
    TResult Function(GetDiaryCellsEvent value)? getDiaryCells,
    TResult Function(SelectDiaryCellEvent value)? selectDiaryCell,
    TResult Function(SelectDiaryCellsEvent value)? selectDiaryCells,
    TResult Function(SelectCapitalCellEvent value)? selectCapitalCell,
    TResult Function(OnPanUpdateEvent value)? onPanUpdate,
    TResult Function(StartEditingListEvent value)? startEditingList,
    TResult Function(ReturnToLoadedEvent value)? returnToLoaded,
    TResult Function(ReturnToCellsSelectedEvent value)? returnToCellsSelected,
    TResult Function(UpdateDiaryListNameEvent value)? updateDiaryListName,
    TResult Function(ChangeDiaryCellEvent value)? changeDiaryCell,
    TResult Function(ChangeCapitalCellEvent value)? changeCapitalCell,
    TResult Function(UpdateDiaryCellInFirebaseEvent value)?
        updateDiaryCellInFirebase,
    TResult Function(ChangeDiaryCellsSettingsEvent value)?
        changeDiaryCellsSettings,
    TResult Function(ChangeDiaryCellsBordersSettingsEvent value)?
        changeDiaryCellsBordersSettings,
    TResult Function(ChangeCapitalCellSettingsEvent value)?
        changeCapitalCellSettings,
    TResult Function(UpdateDiaryCellSettingsInFirebaseEvent value)?
        updateDiaryCellSettingsInFirebase,
    TResult Function(UpdateCapitalCellSettingsInFirebaseEvent value)?
        updateCapitalCellSettingsInFirebase,
    TResult Function(UpdateCapitalCellWidthEvent value)? updateCapitalCellWidth,
    TResult Function(UpdateCapitalCellWidthInFirebaseEvent value)?
        updateCapitalCellWidthInFirebase,
    TResult Function(StartEditingCellsEvent value)? startEditingCells,
    TResult Function(CreateDiaryColumnEvent value)? createDiaryColumn,
    TResult Function(DeleteDiaryColumnEvent value)? deleteDiaryColumn,
    TResult Function(UpdateDiaryListSettingsEvent value)?
        updateDiaryListSettings,
    TResult Function(ShareThemeEvent value)? shareTheme,
    TResult Function(StartEditingColorEvent value)? startEditingColor,
    TResult Function(StartEditingBordersEvent value)? startEditingBorders,
    TResult Function(StartEditingBordersStyleEvent value)?
        startEditingBorderStyle,
    TResult Function(TurnBackEditingEvent value)? turnBackEditing,
    TResult Function(StartColumnDeletingEvent value)? startColumnDeleting,
    TResult Function(StartColorThemeEditingEvent value)? startColorThemeEditing,
    TResult Function(DeleteColumnsEvent value)? deleteColumns,
    TResult Function(LoadThemesEvent value)? loadThemes,
    TResult Function(LoadFromThemeEvent value)? loadFromTheme,
    TResult Function(TakeThemeEvent value)? takeTheme,
    required TResult orElse(),
  }) {
    if (updateDiaryCellInFirebase != null) {
      return updateDiaryCellInFirebase(this);
    }
    return orElse();
  }
}

abstract class UpdateDiaryCellInFirebaseEvent implements DiaryListEvent {
  const factory UpdateDiaryCellInFirebaseEvent(
      {required final DiaryCell diaryCell,
      final String? textFieldText}) = _$UpdateDiaryCellInFirebaseEvent;

  DiaryCell get diaryCell;
  String? get textFieldText;
  @JsonKey(ignore: true)
  _$$UpdateDiaryCellInFirebaseEventCopyWith<_$UpdateDiaryCellInFirebaseEvent>
      get copyWith => throw _privateConstructorUsedError;
}

/// @nodoc
abstract class _$$ChangeDiaryCellsSettingsEventCopyWith<$Res> {
  factory _$$ChangeDiaryCellsSettingsEventCopyWith(
          _$ChangeDiaryCellsSettingsEvent value,
          $Res Function(_$ChangeDiaryCellsSettingsEvent) then) =
      __$$ChangeDiaryCellsSettingsEventCopyWithImpl<$Res>;
  @useResult
  $Res call(
      {FontWeightEnum? fontWeight,
      TextDecorationEnum? textDecoration,
      FontStyleEnum? fontStyle,
      double? fontSize,
      String? color,
      HorizontalAlignmentsEnum? horizontalAlignment,
      VerticalAlignmentsEnum? verticalAlignment,
      String? backgroundColor});
}

/// @nodoc
class __$$ChangeDiaryCellsSettingsEventCopyWithImpl<$Res>
    extends _$DiaryListEventCopyWithImpl<$Res, _$ChangeDiaryCellsSettingsEvent>
    implements _$$ChangeDiaryCellsSettingsEventCopyWith<$Res> {
  __$$ChangeDiaryCellsSettingsEventCopyWithImpl(
      _$ChangeDiaryCellsSettingsEvent _value,
      $Res Function(_$ChangeDiaryCellsSettingsEvent) _then)
      : super(_value, _then);

  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? fontWeight = freezed,
    Object? textDecoration = freezed,
    Object? fontStyle = freezed,
    Object? fontSize = freezed,
    Object? color = freezed,
    Object? horizontalAlignment = freezed,
    Object? verticalAlignment = freezed,
    Object? backgroundColor = freezed,
  }) {
    return _then(_$ChangeDiaryCellsSettingsEvent(
      fontWeight: freezed == fontWeight
          ? _value.fontWeight
          : fontWeight // ignore: cast_nullable_to_non_nullable
              as FontWeightEnum?,
      textDecoration: freezed == textDecoration
          ? _value.textDecoration
          : textDecoration // ignore: cast_nullable_to_non_nullable
              as TextDecorationEnum?,
      fontStyle: freezed == fontStyle
          ? _value.fontStyle
          : fontStyle // ignore: cast_nullable_to_non_nullable
              as FontStyleEnum?,
      fontSize: freezed == fontSize
          ? _value.fontSize
          : fontSize // ignore: cast_nullable_to_non_nullable
              as double?,
      color: freezed == color
          ? _value.color
          : color // ignore: cast_nullable_to_non_nullable
              as String?,
      horizontalAlignment: freezed == horizontalAlignment
          ? _value.horizontalAlignment
          : horizontalAlignment // ignore: cast_nullable_to_non_nullable
              as HorizontalAlignmentsEnum?,
      verticalAlignment: freezed == verticalAlignment
          ? _value.verticalAlignment
          : verticalAlignment // ignore: cast_nullable_to_non_nullable
              as VerticalAlignmentsEnum?,
      backgroundColor: freezed == backgroundColor
          ? _value.backgroundColor
          : backgroundColor // ignore: cast_nullable_to_non_nullable
              as String?,
    ));
  }
}

/// @nodoc

class _$ChangeDiaryCellsSettingsEvent implements ChangeDiaryCellsSettingsEvent {
  const _$ChangeDiaryCellsSettingsEvent(
      {this.fontWeight,
      this.textDecoration,
      this.fontStyle,
      this.fontSize,
      this.color,
      this.horizontalAlignment,
      this.verticalAlignment,
      this.backgroundColor});

  @override
  final FontWeightEnum? fontWeight;
  @override
  final TextDecorationEnum? textDecoration;
  @override
  final FontStyleEnum? fontStyle;
  @override
  final double? fontSize;
  @override
  final String? color;
  @override
  final HorizontalAlignmentsEnum? horizontalAlignment;
  @override
  final VerticalAlignmentsEnum? verticalAlignment;
  @override
  final String? backgroundColor;

  @override
  String toString() {
    return 'DiaryListEvent.changeDiaryCellsSettings(fontWeight: $fontWeight, textDecoration: $textDecoration, fontStyle: $fontStyle, fontSize: $fontSize, color: $color, horizontalAlignment: $horizontalAlignment, verticalAlignment: $verticalAlignment, backgroundColor: $backgroundColor)';
  }

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$ChangeDiaryCellsSettingsEvent &&
            (identical(other.fontWeight, fontWeight) ||
                other.fontWeight == fontWeight) &&
            (identical(other.textDecoration, textDecoration) ||
                other.textDecoration == textDecoration) &&
            (identical(other.fontStyle, fontStyle) ||
                other.fontStyle == fontStyle) &&
            (identical(other.fontSize, fontSize) ||
                other.fontSize == fontSize) &&
            (identical(other.color, color) || other.color == color) &&
            (identical(other.horizontalAlignment, horizontalAlignment) ||
                other.horizontalAlignment == horizontalAlignment) &&
            (identical(other.verticalAlignment, verticalAlignment) ||
                other.verticalAlignment == verticalAlignment) &&
            (identical(other.backgroundColor, backgroundColor) ||
                other.backgroundColor == backgroundColor));
  }

  @override
  int get hashCode => Object.hash(
      runtimeType,
      fontWeight,
      textDecoration,
      fontStyle,
      fontSize,
      color,
      horizontalAlignment,
      verticalAlignment,
      backgroundColor);

  @JsonKey(ignore: true)
  @override
  @pragma('vm:prefer-inline')
  _$$ChangeDiaryCellsSettingsEventCopyWith<_$ChangeDiaryCellsSettingsEvent>
      get copyWith => __$$ChangeDiaryCellsSettingsEventCopyWithImpl<
          _$ChangeDiaryCellsSettingsEvent>(this, _$identity);

  @override
  @optionalTypeArgs
  TResult when<TResult extends Object?>({
    required TResult Function() createSample,
    required TResult Function() initialLoad,
    required TResult Function(DateTime date, int delay) getDiaryList,
    required TResult Function(DiaryList diaryList, List<DiaryList> lists)
        getDiaryColumns,
    required TResult Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells,
            List<DiaryList> lists)
        getDiaryCells,
    required TResult Function(DiaryCell diaryCell) selectDiaryCell,
    required TResult Function(List<DiaryCell> diaryCells) selectDiaryCells,
    required TResult Function(CapitalCell capitalCell) selectCapitalCell,
    required TResult Function(
            DiaryCell diaryCell,
            GlobalObjectKey<State<StatefulWidget>> cellKey,
            DragUpdateDetails details,
            double scaleFactor)
        onPanUpdate,
    required TResult Function(DiaryList? selectedList) startEditingList,
    required TResult Function(
            String? newName, String? addedColumnName, int? addedColumnCount)
        returnToLoaded,
    required TResult Function() returnToCellsSelected,
    required TResult Function(DiaryList diaryList, String newName)
        updateDiaryListName,
    required TResult Function(DiaryCell diaryCell, String? textFieldText)
        changeDiaryCell,
    required TResult Function(CapitalCell capitalCell, String? textFieldText)
        changeCapitalCell,
    required TResult Function(DiaryCell diaryCell, String? textFieldText)
        updateDiaryCellInFirebase,
    required TResult Function(
            FontWeightEnum? fontWeight,
            TextDecorationEnum? textDecoration,
            FontStyleEnum? fontStyle,
            double? fontSize,
            String? color,
            HorizontalAlignmentsEnum? horizontalAlignment,
            VerticalAlignmentsEnum? verticalAlignment,
            String? backgroundColor)
        changeDiaryCellsSettings,
    required TResult Function(BordersEditingEnum bordersEditingEnum,
            BordersStyleEnum bordersStyleEnum, Color bordersColor)
        changeDiaryCellsBordersSettings,
    required TResult Function(
            FontWeightEnum? fontWeight,
            TextDecorationEnum? textDecoration,
            FontStyleEnum? fontStyle,
            double? fontSize,
            String? color,
            HorizontalAlignmentsEnum? horizontalAlignment,
            VerticalAlignmentsEnum? verticalAlignment,
            String? backgroundColor,
            BordersStyleEnum? bordersStyleEnum,
            Color? bordersColor)
        changeCapitalCellSettings,
    required TResult Function(
            DiaryCell diaryCell,
            int index,
            DiaryCellTextSettings? newTextSettings,
            DiaryCellSettings? newSettings)
        updateDiaryCellSettingsInFirebase,
    required TResult Function(DiaryColumnSettings newSettings)
        updateCapitalCellSettingsInFirebase,
    required TResult Function(PointerMoveEvent details) updateCapitalCellWidth,
    required TResult Function(PointerUpEvent details)
        updateCapitalCellWidthInFirebase,
    required TResult Function(bool isTextEditing) startEditingCells,
    required TResult Function(DiaryList diaryList, String name,
            int columnsCount, List<DiaryColumn> diaryColumns)
        createDiaryColumn,
    required TResult Function(DiaryList diaryList, String columnId)
        deleteDiaryColumn,
    required TResult Function(DiaryList diaryList, String? themeColor,
            String? themeBorderColor, String? themePanelBackgroundColor)
        updateDiaryListSettings,
    required TResult Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<DiaryCell> diaryCells,
            List<CapitalCell> capitalCells,
            String themeName,
            String description)
        shareTheme,
    required TResult Function() startEditingColor,
    required TResult Function() startEditingBorders,
    required TResult Function() startEditingBorderStyle,
    required TResult Function() turnBackEditing,
    required TResult Function() startColumnDeleting,
    required TResult Function() startColorThemeEditing,
    required TResult Function() deleteColumns,
    required TResult Function() loadThemes,
    required TResult Function(ListTheme listTheme) loadFromTheme,
    required TResult Function(ListTheme listTheme) takeTheme,
  }) {
    return changeDiaryCellsSettings(
        fontWeight,
        textDecoration,
        fontStyle,
        fontSize,
        color,
        horizontalAlignment,
        verticalAlignment,
        backgroundColor);
  }

  @override
  @optionalTypeArgs
  TResult? whenOrNull<TResult extends Object?>({
    TResult? Function()? createSample,
    TResult? Function()? initialLoad,
    TResult? Function(DateTime date, int delay)? getDiaryList,
    TResult? Function(DiaryList diaryList, List<DiaryList> lists)?
        getDiaryColumns,
    TResult? Function(DiaryList diaryList, List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells, List<DiaryList> lists)?
        getDiaryCells,
    TResult? Function(DiaryCell diaryCell)? selectDiaryCell,
    TResult? Function(List<DiaryCell> diaryCells)? selectDiaryCells,
    TResult? Function(CapitalCell capitalCell)? selectCapitalCell,
    TResult? Function(
            DiaryCell diaryCell,
            GlobalObjectKey<State<StatefulWidget>> cellKey,
            DragUpdateDetails details,
            double scaleFactor)?
        onPanUpdate,
    TResult? Function(DiaryList? selectedList)? startEditingList,
    TResult? Function(
            String? newName, String? addedColumnName, int? addedColumnCount)?
        returnToLoaded,
    TResult? Function()? returnToCellsSelected,
    TResult? Function(DiaryList diaryList, String newName)? updateDiaryListName,
    TResult? Function(DiaryCell diaryCell, String? textFieldText)?
        changeDiaryCell,
    TResult? Function(CapitalCell capitalCell, String? textFieldText)?
        changeCapitalCell,
    TResult? Function(DiaryCell diaryCell, String? textFieldText)?
        updateDiaryCellInFirebase,
    TResult? Function(
            FontWeightEnum? fontWeight,
            TextDecorationEnum? textDecoration,
            FontStyleEnum? fontStyle,
            double? fontSize,
            String? color,
            HorizontalAlignmentsEnum? horizontalAlignment,
            VerticalAlignmentsEnum? verticalAlignment,
            String? backgroundColor)?
        changeDiaryCellsSettings,
    TResult? Function(BordersEditingEnum bordersEditingEnum,
            BordersStyleEnum bordersStyleEnum, Color bordersColor)?
        changeDiaryCellsBordersSettings,
    TResult? Function(
            FontWeightEnum? fontWeight,
            TextDecorationEnum? textDecoration,
            FontStyleEnum? fontStyle,
            double? fontSize,
            String? color,
            HorizontalAlignmentsEnum? horizontalAlignment,
            VerticalAlignmentsEnum? verticalAlignment,
            String? backgroundColor,
            BordersStyleEnum? bordersStyleEnum,
            Color? bordersColor)?
        changeCapitalCellSettings,
    TResult? Function(
            DiaryCell diaryCell,
            int index,
            DiaryCellTextSettings? newTextSettings,
            DiaryCellSettings? newSettings)?
        updateDiaryCellSettingsInFirebase,
    TResult? Function(DiaryColumnSettings newSettings)?
        updateCapitalCellSettingsInFirebase,
    TResult? Function(PointerMoveEvent details)? updateCapitalCellWidth,
    TResult? Function(PointerUpEvent details)? updateCapitalCellWidthInFirebase,
    TResult? Function(bool isTextEditing)? startEditingCells,
    TResult? Function(DiaryList diaryList, String name, int columnsCount,
            List<DiaryColumn> diaryColumns)?
        createDiaryColumn,
    TResult? Function(DiaryList diaryList, String columnId)? deleteDiaryColumn,
    TResult? Function(DiaryList diaryList, String? themeColor,
            String? themeBorderColor, String? themePanelBackgroundColor)?
        updateDiaryListSettings,
    TResult? Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<DiaryCell> diaryCells,
            List<CapitalCell> capitalCells,
            String themeName,
            String description)?
        shareTheme,
    TResult? Function()? startEditingColor,
    TResult? Function()? startEditingBorders,
    TResult? Function()? startEditingBorderStyle,
    TResult? Function()? turnBackEditing,
    TResult? Function()? startColumnDeleting,
    TResult? Function()? startColorThemeEditing,
    TResult? Function()? deleteColumns,
    TResult? Function()? loadThemes,
    TResult? Function(ListTheme listTheme)? loadFromTheme,
    TResult? Function(ListTheme listTheme)? takeTheme,
  }) {
    return changeDiaryCellsSettings?.call(
        fontWeight,
        textDecoration,
        fontStyle,
        fontSize,
        color,
        horizontalAlignment,
        verticalAlignment,
        backgroundColor);
  }

  @override
  @optionalTypeArgs
  TResult maybeWhen<TResult extends Object?>({
    TResult Function()? createSample,
    TResult Function()? initialLoad,
    TResult Function(DateTime date, int delay)? getDiaryList,
    TResult Function(DiaryList diaryList, List<DiaryList> lists)?
        getDiaryColumns,
    TResult Function(DiaryList diaryList, List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells, List<DiaryList> lists)?
        getDiaryCells,
    TResult Function(DiaryCell diaryCell)? selectDiaryCell,
    TResult Function(List<DiaryCell> diaryCells)? selectDiaryCells,
    TResult Function(CapitalCell capitalCell)? selectCapitalCell,
    TResult Function(
            DiaryCell diaryCell,
            GlobalObjectKey<State<StatefulWidget>> cellKey,
            DragUpdateDetails details,
            double scaleFactor)?
        onPanUpdate,
    TResult Function(DiaryList? selectedList)? startEditingList,
    TResult Function(
            String? newName, String? addedColumnName, int? addedColumnCount)?
        returnToLoaded,
    TResult Function()? returnToCellsSelected,
    TResult Function(DiaryList diaryList, String newName)? updateDiaryListName,
    TResult Function(DiaryCell diaryCell, String? textFieldText)?
        changeDiaryCell,
    TResult Function(CapitalCell capitalCell, String? textFieldText)?
        changeCapitalCell,
    TResult Function(DiaryCell diaryCell, String? textFieldText)?
        updateDiaryCellInFirebase,
    TResult Function(
            FontWeightEnum? fontWeight,
            TextDecorationEnum? textDecoration,
            FontStyleEnum? fontStyle,
            double? fontSize,
            String? color,
            HorizontalAlignmentsEnum? horizontalAlignment,
            VerticalAlignmentsEnum? verticalAlignment,
            String? backgroundColor)?
        changeDiaryCellsSettings,
    TResult Function(BordersEditingEnum bordersEditingEnum,
            BordersStyleEnum bordersStyleEnum, Color bordersColor)?
        changeDiaryCellsBordersSettings,
    TResult Function(
            FontWeightEnum? fontWeight,
            TextDecorationEnum? textDecoration,
            FontStyleEnum? fontStyle,
            double? fontSize,
            String? color,
            HorizontalAlignmentsEnum? horizontalAlignment,
            VerticalAlignmentsEnum? verticalAlignment,
            String? backgroundColor,
            BordersStyleEnum? bordersStyleEnum,
            Color? bordersColor)?
        changeCapitalCellSettings,
    TResult Function(
            DiaryCell diaryCell,
            int index,
            DiaryCellTextSettings? newTextSettings,
            DiaryCellSettings? newSettings)?
        updateDiaryCellSettingsInFirebase,
    TResult Function(DiaryColumnSettings newSettings)?
        updateCapitalCellSettingsInFirebase,
    TResult Function(PointerMoveEvent details)? updateCapitalCellWidth,
    TResult Function(PointerUpEvent details)? updateCapitalCellWidthInFirebase,
    TResult Function(bool isTextEditing)? startEditingCells,
    TResult Function(DiaryList diaryList, String name, int columnsCount,
            List<DiaryColumn> diaryColumns)?
        createDiaryColumn,
    TResult Function(DiaryList diaryList, String columnId)? deleteDiaryColumn,
    TResult Function(DiaryList diaryList, String? themeColor,
            String? themeBorderColor, String? themePanelBackgroundColor)?
        updateDiaryListSettings,
    TResult Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<DiaryCell> diaryCells,
            List<CapitalCell> capitalCells,
            String themeName,
            String description)?
        shareTheme,
    TResult Function()? startEditingColor,
    TResult Function()? startEditingBorders,
    TResult Function()? startEditingBorderStyle,
    TResult Function()? turnBackEditing,
    TResult Function()? startColumnDeleting,
    TResult Function()? startColorThemeEditing,
    TResult Function()? deleteColumns,
    TResult Function()? loadThemes,
    TResult Function(ListTheme listTheme)? loadFromTheme,
    TResult Function(ListTheme listTheme)? takeTheme,
    required TResult orElse(),
  }) {
    if (changeDiaryCellsSettings != null) {
      return changeDiaryCellsSettings(
          fontWeight,
          textDecoration,
          fontStyle,
          fontSize,
          color,
          horizontalAlignment,
          verticalAlignment,
          backgroundColor);
    }
    return orElse();
  }

  @override
  @optionalTypeArgs
  TResult map<TResult extends Object?>({
    required TResult Function(CreateSampleEvent value) createSample,
    required TResult Function(InitialLoadEvent value) initialLoad,
    required TResult Function(GetDiaryListEvent value) getDiaryList,
    required TResult Function(GetDiaryColumnsEvent value) getDiaryColumns,
    required TResult Function(GetDiaryCellsEvent value) getDiaryCells,
    required TResult Function(SelectDiaryCellEvent value) selectDiaryCell,
    required TResult Function(SelectDiaryCellsEvent value) selectDiaryCells,
    required TResult Function(SelectCapitalCellEvent value) selectCapitalCell,
    required TResult Function(OnPanUpdateEvent value) onPanUpdate,
    required TResult Function(StartEditingListEvent value) startEditingList,
    required TResult Function(ReturnToLoadedEvent value) returnToLoaded,
    required TResult Function(ReturnToCellsSelectedEvent value)
        returnToCellsSelected,
    required TResult Function(UpdateDiaryListNameEvent value)
        updateDiaryListName,
    required TResult Function(ChangeDiaryCellEvent value) changeDiaryCell,
    required TResult Function(ChangeCapitalCellEvent value) changeCapitalCell,
    required TResult Function(UpdateDiaryCellInFirebaseEvent value)
        updateDiaryCellInFirebase,
    required TResult Function(ChangeDiaryCellsSettingsEvent value)
        changeDiaryCellsSettings,
    required TResult Function(ChangeDiaryCellsBordersSettingsEvent value)
        changeDiaryCellsBordersSettings,
    required TResult Function(ChangeCapitalCellSettingsEvent value)
        changeCapitalCellSettings,
    required TResult Function(UpdateDiaryCellSettingsInFirebaseEvent value)
        updateDiaryCellSettingsInFirebase,
    required TResult Function(UpdateCapitalCellSettingsInFirebaseEvent value)
        updateCapitalCellSettingsInFirebase,
    required TResult Function(UpdateCapitalCellWidthEvent value)
        updateCapitalCellWidth,
    required TResult Function(UpdateCapitalCellWidthInFirebaseEvent value)
        updateCapitalCellWidthInFirebase,
    required TResult Function(StartEditingCellsEvent value) startEditingCells,
    required TResult Function(CreateDiaryColumnEvent value) createDiaryColumn,
    required TResult Function(DeleteDiaryColumnEvent value) deleteDiaryColumn,
    required TResult Function(UpdateDiaryListSettingsEvent value)
        updateDiaryListSettings,
    required TResult Function(ShareThemeEvent value) shareTheme,
    required TResult Function(StartEditingColorEvent value) startEditingColor,
    required TResult Function(StartEditingBordersEvent value)
        startEditingBorders,
    required TResult Function(StartEditingBordersStyleEvent value)
        startEditingBorderStyle,
    required TResult Function(TurnBackEditingEvent value) turnBackEditing,
    required TResult Function(StartColumnDeletingEvent value)
        startColumnDeleting,
    required TResult Function(StartColorThemeEditingEvent value)
        startColorThemeEditing,
    required TResult Function(DeleteColumnsEvent value) deleteColumns,
    required TResult Function(LoadThemesEvent value) loadThemes,
    required TResult Function(LoadFromThemeEvent value) loadFromTheme,
    required TResult Function(TakeThemeEvent value) takeTheme,
  }) {
    return changeDiaryCellsSettings(this);
  }

  @override
  @optionalTypeArgs
  TResult? mapOrNull<TResult extends Object?>({
    TResult? Function(CreateSampleEvent value)? createSample,
    TResult? Function(InitialLoadEvent value)? initialLoad,
    TResult? Function(GetDiaryListEvent value)? getDiaryList,
    TResult? Function(GetDiaryColumnsEvent value)? getDiaryColumns,
    TResult? Function(GetDiaryCellsEvent value)? getDiaryCells,
    TResult? Function(SelectDiaryCellEvent value)? selectDiaryCell,
    TResult? Function(SelectDiaryCellsEvent value)? selectDiaryCells,
    TResult? Function(SelectCapitalCellEvent value)? selectCapitalCell,
    TResult? Function(OnPanUpdateEvent value)? onPanUpdate,
    TResult? Function(StartEditingListEvent value)? startEditingList,
    TResult? Function(ReturnToLoadedEvent value)? returnToLoaded,
    TResult? Function(ReturnToCellsSelectedEvent value)? returnToCellsSelected,
    TResult? Function(UpdateDiaryListNameEvent value)? updateDiaryListName,
    TResult? Function(ChangeDiaryCellEvent value)? changeDiaryCell,
    TResult? Function(ChangeCapitalCellEvent value)? changeCapitalCell,
    TResult? Function(UpdateDiaryCellInFirebaseEvent value)?
        updateDiaryCellInFirebase,
    TResult? Function(ChangeDiaryCellsSettingsEvent value)?
        changeDiaryCellsSettings,
    TResult? Function(ChangeDiaryCellsBordersSettingsEvent value)?
        changeDiaryCellsBordersSettings,
    TResult? Function(ChangeCapitalCellSettingsEvent value)?
        changeCapitalCellSettings,
    TResult? Function(UpdateDiaryCellSettingsInFirebaseEvent value)?
        updateDiaryCellSettingsInFirebase,
    TResult? Function(UpdateCapitalCellSettingsInFirebaseEvent value)?
        updateCapitalCellSettingsInFirebase,
    TResult? Function(UpdateCapitalCellWidthEvent value)?
        updateCapitalCellWidth,
    TResult? Function(UpdateCapitalCellWidthInFirebaseEvent value)?
        updateCapitalCellWidthInFirebase,
    TResult? Function(StartEditingCellsEvent value)? startEditingCells,
    TResult? Function(CreateDiaryColumnEvent value)? createDiaryColumn,
    TResult? Function(DeleteDiaryColumnEvent value)? deleteDiaryColumn,
    TResult? Function(UpdateDiaryListSettingsEvent value)?
        updateDiaryListSettings,
    TResult? Function(ShareThemeEvent value)? shareTheme,
    TResult? Function(StartEditingColorEvent value)? startEditingColor,
    TResult? Function(StartEditingBordersEvent value)? startEditingBorders,
    TResult? Function(StartEditingBordersStyleEvent value)?
        startEditingBorderStyle,
    TResult? Function(TurnBackEditingEvent value)? turnBackEditing,
    TResult? Function(StartColumnDeletingEvent value)? startColumnDeleting,
    TResult? Function(StartColorThemeEditingEvent value)?
        startColorThemeEditing,
    TResult? Function(DeleteColumnsEvent value)? deleteColumns,
    TResult? Function(LoadThemesEvent value)? loadThemes,
    TResult? Function(LoadFromThemeEvent value)? loadFromTheme,
    TResult? Function(TakeThemeEvent value)? takeTheme,
  }) {
    return changeDiaryCellsSettings?.call(this);
  }

  @override
  @optionalTypeArgs
  TResult maybeMap<TResult extends Object?>({
    TResult Function(CreateSampleEvent value)? createSample,
    TResult Function(InitialLoadEvent value)? initialLoad,
    TResult Function(GetDiaryListEvent value)? getDiaryList,
    TResult Function(GetDiaryColumnsEvent value)? getDiaryColumns,
    TResult Function(GetDiaryCellsEvent value)? getDiaryCells,
    TResult Function(SelectDiaryCellEvent value)? selectDiaryCell,
    TResult Function(SelectDiaryCellsEvent value)? selectDiaryCells,
    TResult Function(SelectCapitalCellEvent value)? selectCapitalCell,
    TResult Function(OnPanUpdateEvent value)? onPanUpdate,
    TResult Function(StartEditingListEvent value)? startEditingList,
    TResult Function(ReturnToLoadedEvent value)? returnToLoaded,
    TResult Function(ReturnToCellsSelectedEvent value)? returnToCellsSelected,
    TResult Function(UpdateDiaryListNameEvent value)? updateDiaryListName,
    TResult Function(ChangeDiaryCellEvent value)? changeDiaryCell,
    TResult Function(ChangeCapitalCellEvent value)? changeCapitalCell,
    TResult Function(UpdateDiaryCellInFirebaseEvent value)?
        updateDiaryCellInFirebase,
    TResult Function(ChangeDiaryCellsSettingsEvent value)?
        changeDiaryCellsSettings,
    TResult Function(ChangeDiaryCellsBordersSettingsEvent value)?
        changeDiaryCellsBordersSettings,
    TResult Function(ChangeCapitalCellSettingsEvent value)?
        changeCapitalCellSettings,
    TResult Function(UpdateDiaryCellSettingsInFirebaseEvent value)?
        updateDiaryCellSettingsInFirebase,
    TResult Function(UpdateCapitalCellSettingsInFirebaseEvent value)?
        updateCapitalCellSettingsInFirebase,
    TResult Function(UpdateCapitalCellWidthEvent value)? updateCapitalCellWidth,
    TResult Function(UpdateCapitalCellWidthInFirebaseEvent value)?
        updateCapitalCellWidthInFirebase,
    TResult Function(StartEditingCellsEvent value)? startEditingCells,
    TResult Function(CreateDiaryColumnEvent value)? createDiaryColumn,
    TResult Function(DeleteDiaryColumnEvent value)? deleteDiaryColumn,
    TResult Function(UpdateDiaryListSettingsEvent value)?
        updateDiaryListSettings,
    TResult Function(ShareThemeEvent value)? shareTheme,
    TResult Function(StartEditingColorEvent value)? startEditingColor,
    TResult Function(StartEditingBordersEvent value)? startEditingBorders,
    TResult Function(StartEditingBordersStyleEvent value)?
        startEditingBorderStyle,
    TResult Function(TurnBackEditingEvent value)? turnBackEditing,
    TResult Function(StartColumnDeletingEvent value)? startColumnDeleting,
    TResult Function(StartColorThemeEditingEvent value)? startColorThemeEditing,
    TResult Function(DeleteColumnsEvent value)? deleteColumns,
    TResult Function(LoadThemesEvent value)? loadThemes,
    TResult Function(LoadFromThemeEvent value)? loadFromTheme,
    TResult Function(TakeThemeEvent value)? takeTheme,
    required TResult orElse(),
  }) {
    if (changeDiaryCellsSettings != null) {
      return changeDiaryCellsSettings(this);
    }
    return orElse();
  }
}

abstract class ChangeDiaryCellsSettingsEvent implements DiaryListEvent {
  const factory ChangeDiaryCellsSettingsEvent(
      {final FontWeightEnum? fontWeight,
      final TextDecorationEnum? textDecoration,
      final FontStyleEnum? fontStyle,
      final double? fontSize,
      final String? color,
      final HorizontalAlignmentsEnum? horizontalAlignment,
      final VerticalAlignmentsEnum? verticalAlignment,
      final String? backgroundColor}) = _$ChangeDiaryCellsSettingsEvent;

  FontWeightEnum? get fontWeight;
  TextDecorationEnum? get textDecoration;
  FontStyleEnum? get fontStyle;
  double? get fontSize;
  String? get color;
  HorizontalAlignmentsEnum? get horizontalAlignment;
  VerticalAlignmentsEnum? get verticalAlignment;
  String? get backgroundColor;
  @JsonKey(ignore: true)
  _$$ChangeDiaryCellsSettingsEventCopyWith<_$ChangeDiaryCellsSettingsEvent>
      get copyWith => throw _privateConstructorUsedError;
}

/// @nodoc
abstract class _$$ChangeDiaryCellsBordersSettingsEventCopyWith<$Res> {
  factory _$$ChangeDiaryCellsBordersSettingsEventCopyWith(
          _$ChangeDiaryCellsBordersSettingsEvent value,
          $Res Function(_$ChangeDiaryCellsBordersSettingsEvent) then) =
      __$$ChangeDiaryCellsBordersSettingsEventCopyWithImpl<$Res>;
  @useResult
  $Res call(
      {BordersEditingEnum bordersEditingEnum,
      BordersStyleEnum bordersStyleEnum,
      Color bordersColor});
}

/// @nodoc
class __$$ChangeDiaryCellsBordersSettingsEventCopyWithImpl<$Res>
    extends _$DiaryListEventCopyWithImpl<$Res,
        _$ChangeDiaryCellsBordersSettingsEvent>
    implements _$$ChangeDiaryCellsBordersSettingsEventCopyWith<$Res> {
  __$$ChangeDiaryCellsBordersSettingsEventCopyWithImpl(
      _$ChangeDiaryCellsBordersSettingsEvent _value,
      $Res Function(_$ChangeDiaryCellsBordersSettingsEvent) _then)
      : super(_value, _then);

  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? bordersEditingEnum = null,
    Object? bordersStyleEnum = null,
    Object? bordersColor = null,
  }) {
    return _then(_$ChangeDiaryCellsBordersSettingsEvent(
      bordersEditingEnum: null == bordersEditingEnum
          ? _value.bordersEditingEnum
          : bordersEditingEnum // ignore: cast_nullable_to_non_nullable
              as BordersEditingEnum,
      bordersStyleEnum: null == bordersStyleEnum
          ? _value.bordersStyleEnum
          : bordersStyleEnum // ignore: cast_nullable_to_non_nullable
              as BordersStyleEnum,
      bordersColor: null == bordersColor
          ? _value.bordersColor
          : bordersColor // ignore: cast_nullable_to_non_nullable
              as Color,
    ));
  }
}

/// @nodoc

class _$ChangeDiaryCellsBordersSettingsEvent
    implements ChangeDiaryCellsBordersSettingsEvent {
  const _$ChangeDiaryCellsBordersSettingsEvent(
      {required this.bordersEditingEnum,
      required this.bordersStyleEnum,
      required this.bordersColor});

  @override
  final BordersEditingEnum bordersEditingEnum;
  @override
  final BordersStyleEnum bordersStyleEnum;
  @override
  final Color bordersColor;

  @override
  String toString() {
    return 'DiaryListEvent.changeDiaryCellsBordersSettings(bordersEditingEnum: $bordersEditingEnum, bordersStyleEnum: $bordersStyleEnum, bordersColor: $bordersColor)';
  }

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$ChangeDiaryCellsBordersSettingsEvent &&
            (identical(other.bordersEditingEnum, bordersEditingEnum) ||
                other.bordersEditingEnum == bordersEditingEnum) &&
            (identical(other.bordersStyleEnum, bordersStyleEnum) ||
                other.bordersStyleEnum == bordersStyleEnum) &&
            (identical(other.bordersColor, bordersColor) ||
                other.bordersColor == bordersColor));
  }

  @override
  int get hashCode => Object.hash(
      runtimeType, bordersEditingEnum, bordersStyleEnum, bordersColor);

  @JsonKey(ignore: true)
  @override
  @pragma('vm:prefer-inline')
  _$$ChangeDiaryCellsBordersSettingsEventCopyWith<
          _$ChangeDiaryCellsBordersSettingsEvent>
      get copyWith => __$$ChangeDiaryCellsBordersSettingsEventCopyWithImpl<
          _$ChangeDiaryCellsBordersSettingsEvent>(this, _$identity);

  @override
  @optionalTypeArgs
  TResult when<TResult extends Object?>({
    required TResult Function() createSample,
    required TResult Function() initialLoad,
    required TResult Function(DateTime date, int delay) getDiaryList,
    required TResult Function(DiaryList diaryList, List<DiaryList> lists)
        getDiaryColumns,
    required TResult Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells,
            List<DiaryList> lists)
        getDiaryCells,
    required TResult Function(DiaryCell diaryCell) selectDiaryCell,
    required TResult Function(List<DiaryCell> diaryCells) selectDiaryCells,
    required TResult Function(CapitalCell capitalCell) selectCapitalCell,
    required TResult Function(
            DiaryCell diaryCell,
            GlobalObjectKey<State<StatefulWidget>> cellKey,
            DragUpdateDetails details,
            double scaleFactor)
        onPanUpdate,
    required TResult Function(DiaryList? selectedList) startEditingList,
    required TResult Function(
            String? newName, String? addedColumnName, int? addedColumnCount)
        returnToLoaded,
    required TResult Function() returnToCellsSelected,
    required TResult Function(DiaryList diaryList, String newName)
        updateDiaryListName,
    required TResult Function(DiaryCell diaryCell, String? textFieldText)
        changeDiaryCell,
    required TResult Function(CapitalCell capitalCell, String? textFieldText)
        changeCapitalCell,
    required TResult Function(DiaryCell diaryCell, String? textFieldText)
        updateDiaryCellInFirebase,
    required TResult Function(
            FontWeightEnum? fontWeight,
            TextDecorationEnum? textDecoration,
            FontStyleEnum? fontStyle,
            double? fontSize,
            String? color,
            HorizontalAlignmentsEnum? horizontalAlignment,
            VerticalAlignmentsEnum? verticalAlignment,
            String? backgroundColor)
        changeDiaryCellsSettings,
    required TResult Function(BordersEditingEnum bordersEditingEnum,
            BordersStyleEnum bordersStyleEnum, Color bordersColor)
        changeDiaryCellsBordersSettings,
    required TResult Function(
            FontWeightEnum? fontWeight,
            TextDecorationEnum? textDecoration,
            FontStyleEnum? fontStyle,
            double? fontSize,
            String? color,
            HorizontalAlignmentsEnum? horizontalAlignment,
            VerticalAlignmentsEnum? verticalAlignment,
            String? backgroundColor,
            BordersStyleEnum? bordersStyleEnum,
            Color? bordersColor)
        changeCapitalCellSettings,
    required TResult Function(
            DiaryCell diaryCell,
            int index,
            DiaryCellTextSettings? newTextSettings,
            DiaryCellSettings? newSettings)
        updateDiaryCellSettingsInFirebase,
    required TResult Function(DiaryColumnSettings newSettings)
        updateCapitalCellSettingsInFirebase,
    required TResult Function(PointerMoveEvent details) updateCapitalCellWidth,
    required TResult Function(PointerUpEvent details)
        updateCapitalCellWidthInFirebase,
    required TResult Function(bool isTextEditing) startEditingCells,
    required TResult Function(DiaryList diaryList, String name,
            int columnsCount, List<DiaryColumn> diaryColumns)
        createDiaryColumn,
    required TResult Function(DiaryList diaryList, String columnId)
        deleteDiaryColumn,
    required TResult Function(DiaryList diaryList, String? themeColor,
            String? themeBorderColor, String? themePanelBackgroundColor)
        updateDiaryListSettings,
    required TResult Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<DiaryCell> diaryCells,
            List<CapitalCell> capitalCells,
            String themeName,
            String description)
        shareTheme,
    required TResult Function() startEditingColor,
    required TResult Function() startEditingBorders,
    required TResult Function() startEditingBorderStyle,
    required TResult Function() turnBackEditing,
    required TResult Function() startColumnDeleting,
    required TResult Function() startColorThemeEditing,
    required TResult Function() deleteColumns,
    required TResult Function() loadThemes,
    required TResult Function(ListTheme listTheme) loadFromTheme,
    required TResult Function(ListTheme listTheme) takeTheme,
  }) {
    return changeDiaryCellsBordersSettings(
        bordersEditingEnum, bordersStyleEnum, bordersColor);
  }

  @override
  @optionalTypeArgs
  TResult? whenOrNull<TResult extends Object?>({
    TResult? Function()? createSample,
    TResult? Function()? initialLoad,
    TResult? Function(DateTime date, int delay)? getDiaryList,
    TResult? Function(DiaryList diaryList, List<DiaryList> lists)?
        getDiaryColumns,
    TResult? Function(DiaryList diaryList, List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells, List<DiaryList> lists)?
        getDiaryCells,
    TResult? Function(DiaryCell diaryCell)? selectDiaryCell,
    TResult? Function(List<DiaryCell> diaryCells)? selectDiaryCells,
    TResult? Function(CapitalCell capitalCell)? selectCapitalCell,
    TResult? Function(
            DiaryCell diaryCell,
            GlobalObjectKey<State<StatefulWidget>> cellKey,
            DragUpdateDetails details,
            double scaleFactor)?
        onPanUpdate,
    TResult? Function(DiaryList? selectedList)? startEditingList,
    TResult? Function(
            String? newName, String? addedColumnName, int? addedColumnCount)?
        returnToLoaded,
    TResult? Function()? returnToCellsSelected,
    TResult? Function(DiaryList diaryList, String newName)? updateDiaryListName,
    TResult? Function(DiaryCell diaryCell, String? textFieldText)?
        changeDiaryCell,
    TResult? Function(CapitalCell capitalCell, String? textFieldText)?
        changeCapitalCell,
    TResult? Function(DiaryCell diaryCell, String? textFieldText)?
        updateDiaryCellInFirebase,
    TResult? Function(
            FontWeightEnum? fontWeight,
            TextDecorationEnum? textDecoration,
            FontStyleEnum? fontStyle,
            double? fontSize,
            String? color,
            HorizontalAlignmentsEnum? horizontalAlignment,
            VerticalAlignmentsEnum? verticalAlignment,
            String? backgroundColor)?
        changeDiaryCellsSettings,
    TResult? Function(BordersEditingEnum bordersEditingEnum,
            BordersStyleEnum bordersStyleEnum, Color bordersColor)?
        changeDiaryCellsBordersSettings,
    TResult? Function(
            FontWeightEnum? fontWeight,
            TextDecorationEnum? textDecoration,
            FontStyleEnum? fontStyle,
            double? fontSize,
            String? color,
            HorizontalAlignmentsEnum? horizontalAlignment,
            VerticalAlignmentsEnum? verticalAlignment,
            String? backgroundColor,
            BordersStyleEnum? bordersStyleEnum,
            Color? bordersColor)?
        changeCapitalCellSettings,
    TResult? Function(
            DiaryCell diaryCell,
            int index,
            DiaryCellTextSettings? newTextSettings,
            DiaryCellSettings? newSettings)?
        updateDiaryCellSettingsInFirebase,
    TResult? Function(DiaryColumnSettings newSettings)?
        updateCapitalCellSettingsInFirebase,
    TResult? Function(PointerMoveEvent details)? updateCapitalCellWidth,
    TResult? Function(PointerUpEvent details)? updateCapitalCellWidthInFirebase,
    TResult? Function(bool isTextEditing)? startEditingCells,
    TResult? Function(DiaryList diaryList, String name, int columnsCount,
            List<DiaryColumn> diaryColumns)?
        createDiaryColumn,
    TResult? Function(DiaryList diaryList, String columnId)? deleteDiaryColumn,
    TResult? Function(DiaryList diaryList, String? themeColor,
            String? themeBorderColor, String? themePanelBackgroundColor)?
        updateDiaryListSettings,
    TResult? Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<DiaryCell> diaryCells,
            List<CapitalCell> capitalCells,
            String themeName,
            String description)?
        shareTheme,
    TResult? Function()? startEditingColor,
    TResult? Function()? startEditingBorders,
    TResult? Function()? startEditingBorderStyle,
    TResult? Function()? turnBackEditing,
    TResult? Function()? startColumnDeleting,
    TResult? Function()? startColorThemeEditing,
    TResult? Function()? deleteColumns,
    TResult? Function()? loadThemes,
    TResult? Function(ListTheme listTheme)? loadFromTheme,
    TResult? Function(ListTheme listTheme)? takeTheme,
  }) {
    return changeDiaryCellsBordersSettings?.call(
        bordersEditingEnum, bordersStyleEnum, bordersColor);
  }

  @override
  @optionalTypeArgs
  TResult maybeWhen<TResult extends Object?>({
    TResult Function()? createSample,
    TResult Function()? initialLoad,
    TResult Function(DateTime date, int delay)? getDiaryList,
    TResult Function(DiaryList diaryList, List<DiaryList> lists)?
        getDiaryColumns,
    TResult Function(DiaryList diaryList, List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells, List<DiaryList> lists)?
        getDiaryCells,
    TResult Function(DiaryCell diaryCell)? selectDiaryCell,
    TResult Function(List<DiaryCell> diaryCells)? selectDiaryCells,
    TResult Function(CapitalCell capitalCell)? selectCapitalCell,
    TResult Function(
            DiaryCell diaryCell,
            GlobalObjectKey<State<StatefulWidget>> cellKey,
            DragUpdateDetails details,
            double scaleFactor)?
        onPanUpdate,
    TResult Function(DiaryList? selectedList)? startEditingList,
    TResult Function(
            String? newName, String? addedColumnName, int? addedColumnCount)?
        returnToLoaded,
    TResult Function()? returnToCellsSelected,
    TResult Function(DiaryList diaryList, String newName)? updateDiaryListName,
    TResult Function(DiaryCell diaryCell, String? textFieldText)?
        changeDiaryCell,
    TResult Function(CapitalCell capitalCell, String? textFieldText)?
        changeCapitalCell,
    TResult Function(DiaryCell diaryCell, String? textFieldText)?
        updateDiaryCellInFirebase,
    TResult Function(
            FontWeightEnum? fontWeight,
            TextDecorationEnum? textDecoration,
            FontStyleEnum? fontStyle,
            double? fontSize,
            String? color,
            HorizontalAlignmentsEnum? horizontalAlignment,
            VerticalAlignmentsEnum? verticalAlignment,
            String? backgroundColor)?
        changeDiaryCellsSettings,
    TResult Function(BordersEditingEnum bordersEditingEnum,
            BordersStyleEnum bordersStyleEnum, Color bordersColor)?
        changeDiaryCellsBordersSettings,
    TResult Function(
            FontWeightEnum? fontWeight,
            TextDecorationEnum? textDecoration,
            FontStyleEnum? fontStyle,
            double? fontSize,
            String? color,
            HorizontalAlignmentsEnum? horizontalAlignment,
            VerticalAlignmentsEnum? verticalAlignment,
            String? backgroundColor,
            BordersStyleEnum? bordersStyleEnum,
            Color? bordersColor)?
        changeCapitalCellSettings,
    TResult Function(
            DiaryCell diaryCell,
            int index,
            DiaryCellTextSettings? newTextSettings,
            DiaryCellSettings? newSettings)?
        updateDiaryCellSettingsInFirebase,
    TResult Function(DiaryColumnSettings newSettings)?
        updateCapitalCellSettingsInFirebase,
    TResult Function(PointerMoveEvent details)? updateCapitalCellWidth,
    TResult Function(PointerUpEvent details)? updateCapitalCellWidthInFirebase,
    TResult Function(bool isTextEditing)? startEditingCells,
    TResult Function(DiaryList diaryList, String name, int columnsCount,
            List<DiaryColumn> diaryColumns)?
        createDiaryColumn,
    TResult Function(DiaryList diaryList, String columnId)? deleteDiaryColumn,
    TResult Function(DiaryList diaryList, String? themeColor,
            String? themeBorderColor, String? themePanelBackgroundColor)?
        updateDiaryListSettings,
    TResult Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<DiaryCell> diaryCells,
            List<CapitalCell> capitalCells,
            String themeName,
            String description)?
        shareTheme,
    TResult Function()? startEditingColor,
    TResult Function()? startEditingBorders,
    TResult Function()? startEditingBorderStyle,
    TResult Function()? turnBackEditing,
    TResult Function()? startColumnDeleting,
    TResult Function()? startColorThemeEditing,
    TResult Function()? deleteColumns,
    TResult Function()? loadThemes,
    TResult Function(ListTheme listTheme)? loadFromTheme,
    TResult Function(ListTheme listTheme)? takeTheme,
    required TResult orElse(),
  }) {
    if (changeDiaryCellsBordersSettings != null) {
      return changeDiaryCellsBordersSettings(
          bordersEditingEnum, bordersStyleEnum, bordersColor);
    }
    return orElse();
  }

  @override
  @optionalTypeArgs
  TResult map<TResult extends Object?>({
    required TResult Function(CreateSampleEvent value) createSample,
    required TResult Function(InitialLoadEvent value) initialLoad,
    required TResult Function(GetDiaryListEvent value) getDiaryList,
    required TResult Function(GetDiaryColumnsEvent value) getDiaryColumns,
    required TResult Function(GetDiaryCellsEvent value) getDiaryCells,
    required TResult Function(SelectDiaryCellEvent value) selectDiaryCell,
    required TResult Function(SelectDiaryCellsEvent value) selectDiaryCells,
    required TResult Function(SelectCapitalCellEvent value) selectCapitalCell,
    required TResult Function(OnPanUpdateEvent value) onPanUpdate,
    required TResult Function(StartEditingListEvent value) startEditingList,
    required TResult Function(ReturnToLoadedEvent value) returnToLoaded,
    required TResult Function(ReturnToCellsSelectedEvent value)
        returnToCellsSelected,
    required TResult Function(UpdateDiaryListNameEvent value)
        updateDiaryListName,
    required TResult Function(ChangeDiaryCellEvent value) changeDiaryCell,
    required TResult Function(ChangeCapitalCellEvent value) changeCapitalCell,
    required TResult Function(UpdateDiaryCellInFirebaseEvent value)
        updateDiaryCellInFirebase,
    required TResult Function(ChangeDiaryCellsSettingsEvent value)
        changeDiaryCellsSettings,
    required TResult Function(ChangeDiaryCellsBordersSettingsEvent value)
        changeDiaryCellsBordersSettings,
    required TResult Function(ChangeCapitalCellSettingsEvent value)
        changeCapitalCellSettings,
    required TResult Function(UpdateDiaryCellSettingsInFirebaseEvent value)
        updateDiaryCellSettingsInFirebase,
    required TResult Function(UpdateCapitalCellSettingsInFirebaseEvent value)
        updateCapitalCellSettingsInFirebase,
    required TResult Function(UpdateCapitalCellWidthEvent value)
        updateCapitalCellWidth,
    required TResult Function(UpdateCapitalCellWidthInFirebaseEvent value)
        updateCapitalCellWidthInFirebase,
    required TResult Function(StartEditingCellsEvent value) startEditingCells,
    required TResult Function(CreateDiaryColumnEvent value) createDiaryColumn,
    required TResult Function(DeleteDiaryColumnEvent value) deleteDiaryColumn,
    required TResult Function(UpdateDiaryListSettingsEvent value)
        updateDiaryListSettings,
    required TResult Function(ShareThemeEvent value) shareTheme,
    required TResult Function(StartEditingColorEvent value) startEditingColor,
    required TResult Function(StartEditingBordersEvent value)
        startEditingBorders,
    required TResult Function(StartEditingBordersStyleEvent value)
        startEditingBorderStyle,
    required TResult Function(TurnBackEditingEvent value) turnBackEditing,
    required TResult Function(StartColumnDeletingEvent value)
        startColumnDeleting,
    required TResult Function(StartColorThemeEditingEvent value)
        startColorThemeEditing,
    required TResult Function(DeleteColumnsEvent value) deleteColumns,
    required TResult Function(LoadThemesEvent value) loadThemes,
    required TResult Function(LoadFromThemeEvent value) loadFromTheme,
    required TResult Function(TakeThemeEvent value) takeTheme,
  }) {
    return changeDiaryCellsBordersSettings(this);
  }

  @override
  @optionalTypeArgs
  TResult? mapOrNull<TResult extends Object?>({
    TResult? Function(CreateSampleEvent value)? createSample,
    TResult? Function(InitialLoadEvent value)? initialLoad,
    TResult? Function(GetDiaryListEvent value)? getDiaryList,
    TResult? Function(GetDiaryColumnsEvent value)? getDiaryColumns,
    TResult? Function(GetDiaryCellsEvent value)? getDiaryCells,
    TResult? Function(SelectDiaryCellEvent value)? selectDiaryCell,
    TResult? Function(SelectDiaryCellsEvent value)? selectDiaryCells,
    TResult? Function(SelectCapitalCellEvent value)? selectCapitalCell,
    TResult? Function(OnPanUpdateEvent value)? onPanUpdate,
    TResult? Function(StartEditingListEvent value)? startEditingList,
    TResult? Function(ReturnToLoadedEvent value)? returnToLoaded,
    TResult? Function(ReturnToCellsSelectedEvent value)? returnToCellsSelected,
    TResult? Function(UpdateDiaryListNameEvent value)? updateDiaryListName,
    TResult? Function(ChangeDiaryCellEvent value)? changeDiaryCell,
    TResult? Function(ChangeCapitalCellEvent value)? changeCapitalCell,
    TResult? Function(UpdateDiaryCellInFirebaseEvent value)?
        updateDiaryCellInFirebase,
    TResult? Function(ChangeDiaryCellsSettingsEvent value)?
        changeDiaryCellsSettings,
    TResult? Function(ChangeDiaryCellsBordersSettingsEvent value)?
        changeDiaryCellsBordersSettings,
    TResult? Function(ChangeCapitalCellSettingsEvent value)?
        changeCapitalCellSettings,
    TResult? Function(UpdateDiaryCellSettingsInFirebaseEvent value)?
        updateDiaryCellSettingsInFirebase,
    TResult? Function(UpdateCapitalCellSettingsInFirebaseEvent value)?
        updateCapitalCellSettingsInFirebase,
    TResult? Function(UpdateCapitalCellWidthEvent value)?
        updateCapitalCellWidth,
    TResult? Function(UpdateCapitalCellWidthInFirebaseEvent value)?
        updateCapitalCellWidthInFirebase,
    TResult? Function(StartEditingCellsEvent value)? startEditingCells,
    TResult? Function(CreateDiaryColumnEvent value)? createDiaryColumn,
    TResult? Function(DeleteDiaryColumnEvent value)? deleteDiaryColumn,
    TResult? Function(UpdateDiaryListSettingsEvent value)?
        updateDiaryListSettings,
    TResult? Function(ShareThemeEvent value)? shareTheme,
    TResult? Function(StartEditingColorEvent value)? startEditingColor,
    TResult? Function(StartEditingBordersEvent value)? startEditingBorders,
    TResult? Function(StartEditingBordersStyleEvent value)?
        startEditingBorderStyle,
    TResult? Function(TurnBackEditingEvent value)? turnBackEditing,
    TResult? Function(StartColumnDeletingEvent value)? startColumnDeleting,
    TResult? Function(StartColorThemeEditingEvent value)?
        startColorThemeEditing,
    TResult? Function(DeleteColumnsEvent value)? deleteColumns,
    TResult? Function(LoadThemesEvent value)? loadThemes,
    TResult? Function(LoadFromThemeEvent value)? loadFromTheme,
    TResult? Function(TakeThemeEvent value)? takeTheme,
  }) {
    return changeDiaryCellsBordersSettings?.call(this);
  }

  @override
  @optionalTypeArgs
  TResult maybeMap<TResult extends Object?>({
    TResult Function(CreateSampleEvent value)? createSample,
    TResult Function(InitialLoadEvent value)? initialLoad,
    TResult Function(GetDiaryListEvent value)? getDiaryList,
    TResult Function(GetDiaryColumnsEvent value)? getDiaryColumns,
    TResult Function(GetDiaryCellsEvent value)? getDiaryCells,
    TResult Function(SelectDiaryCellEvent value)? selectDiaryCell,
    TResult Function(SelectDiaryCellsEvent value)? selectDiaryCells,
    TResult Function(SelectCapitalCellEvent value)? selectCapitalCell,
    TResult Function(OnPanUpdateEvent value)? onPanUpdate,
    TResult Function(StartEditingListEvent value)? startEditingList,
    TResult Function(ReturnToLoadedEvent value)? returnToLoaded,
    TResult Function(ReturnToCellsSelectedEvent value)? returnToCellsSelected,
    TResult Function(UpdateDiaryListNameEvent value)? updateDiaryListName,
    TResult Function(ChangeDiaryCellEvent value)? changeDiaryCell,
    TResult Function(ChangeCapitalCellEvent value)? changeCapitalCell,
    TResult Function(UpdateDiaryCellInFirebaseEvent value)?
        updateDiaryCellInFirebase,
    TResult Function(ChangeDiaryCellsSettingsEvent value)?
        changeDiaryCellsSettings,
    TResult Function(ChangeDiaryCellsBordersSettingsEvent value)?
        changeDiaryCellsBordersSettings,
    TResult Function(ChangeCapitalCellSettingsEvent value)?
        changeCapitalCellSettings,
    TResult Function(UpdateDiaryCellSettingsInFirebaseEvent value)?
        updateDiaryCellSettingsInFirebase,
    TResult Function(UpdateCapitalCellSettingsInFirebaseEvent value)?
        updateCapitalCellSettingsInFirebase,
    TResult Function(UpdateCapitalCellWidthEvent value)? updateCapitalCellWidth,
    TResult Function(UpdateCapitalCellWidthInFirebaseEvent value)?
        updateCapitalCellWidthInFirebase,
    TResult Function(StartEditingCellsEvent value)? startEditingCells,
    TResult Function(CreateDiaryColumnEvent value)? createDiaryColumn,
    TResult Function(DeleteDiaryColumnEvent value)? deleteDiaryColumn,
    TResult Function(UpdateDiaryListSettingsEvent value)?
        updateDiaryListSettings,
    TResult Function(ShareThemeEvent value)? shareTheme,
    TResult Function(StartEditingColorEvent value)? startEditingColor,
    TResult Function(StartEditingBordersEvent value)? startEditingBorders,
    TResult Function(StartEditingBordersStyleEvent value)?
        startEditingBorderStyle,
    TResult Function(TurnBackEditingEvent value)? turnBackEditing,
    TResult Function(StartColumnDeletingEvent value)? startColumnDeleting,
    TResult Function(StartColorThemeEditingEvent value)? startColorThemeEditing,
    TResult Function(DeleteColumnsEvent value)? deleteColumns,
    TResult Function(LoadThemesEvent value)? loadThemes,
    TResult Function(LoadFromThemeEvent value)? loadFromTheme,
    TResult Function(TakeThemeEvent value)? takeTheme,
    required TResult orElse(),
  }) {
    if (changeDiaryCellsBordersSettings != null) {
      return changeDiaryCellsBordersSettings(this);
    }
    return orElse();
  }
}

abstract class ChangeDiaryCellsBordersSettingsEvent implements DiaryListEvent {
  const factory ChangeDiaryCellsBordersSettingsEvent(
          {required final BordersEditingEnum bordersEditingEnum,
          required final BordersStyleEnum bordersStyleEnum,
          required final Color bordersColor}) =
      _$ChangeDiaryCellsBordersSettingsEvent;

  BordersEditingEnum get bordersEditingEnum;
  BordersStyleEnum get bordersStyleEnum;
  Color get bordersColor;
  @JsonKey(ignore: true)
  _$$ChangeDiaryCellsBordersSettingsEventCopyWith<
          _$ChangeDiaryCellsBordersSettingsEvent>
      get copyWith => throw _privateConstructorUsedError;
}

/// @nodoc
abstract class _$$ChangeCapitalCellSettingsEventCopyWith<$Res> {
  factory _$$ChangeCapitalCellSettingsEventCopyWith(
          _$ChangeCapitalCellSettingsEvent value,
          $Res Function(_$ChangeCapitalCellSettingsEvent) then) =
      __$$ChangeCapitalCellSettingsEventCopyWithImpl<$Res>;
  @useResult
  $Res call(
      {FontWeightEnum? fontWeight,
      TextDecorationEnum? textDecoration,
      FontStyleEnum? fontStyle,
      double? fontSize,
      String? color,
      HorizontalAlignmentsEnum? horizontalAlignment,
      VerticalAlignmentsEnum? verticalAlignment,
      String? backgroundColor,
      BordersStyleEnum? bordersStyleEnum,
      Color? bordersColor});
}

/// @nodoc
class __$$ChangeCapitalCellSettingsEventCopyWithImpl<$Res>
    extends _$DiaryListEventCopyWithImpl<$Res, _$ChangeCapitalCellSettingsEvent>
    implements _$$ChangeCapitalCellSettingsEventCopyWith<$Res> {
  __$$ChangeCapitalCellSettingsEventCopyWithImpl(
      _$ChangeCapitalCellSettingsEvent _value,
      $Res Function(_$ChangeCapitalCellSettingsEvent) _then)
      : super(_value, _then);

  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? fontWeight = freezed,
    Object? textDecoration = freezed,
    Object? fontStyle = freezed,
    Object? fontSize = freezed,
    Object? color = freezed,
    Object? horizontalAlignment = freezed,
    Object? verticalAlignment = freezed,
    Object? backgroundColor = freezed,
    Object? bordersStyleEnum = freezed,
    Object? bordersColor = freezed,
  }) {
    return _then(_$ChangeCapitalCellSettingsEvent(
      fontWeight: freezed == fontWeight
          ? _value.fontWeight
          : fontWeight // ignore: cast_nullable_to_non_nullable
              as FontWeightEnum?,
      textDecoration: freezed == textDecoration
          ? _value.textDecoration
          : textDecoration // ignore: cast_nullable_to_non_nullable
              as TextDecorationEnum?,
      fontStyle: freezed == fontStyle
          ? _value.fontStyle
          : fontStyle // ignore: cast_nullable_to_non_nullable
              as FontStyleEnum?,
      fontSize: freezed == fontSize
          ? _value.fontSize
          : fontSize // ignore: cast_nullable_to_non_nullable
              as double?,
      color: freezed == color
          ? _value.color
          : color // ignore: cast_nullable_to_non_nullable
              as String?,
      horizontalAlignment: freezed == horizontalAlignment
          ? _value.horizontalAlignment
          : horizontalAlignment // ignore: cast_nullable_to_non_nullable
              as HorizontalAlignmentsEnum?,
      verticalAlignment: freezed == verticalAlignment
          ? _value.verticalAlignment
          : verticalAlignment // ignore: cast_nullable_to_non_nullable
              as VerticalAlignmentsEnum?,
      backgroundColor: freezed == backgroundColor
          ? _value.backgroundColor
          : backgroundColor // ignore: cast_nullable_to_non_nullable
              as String?,
      bordersStyleEnum: freezed == bordersStyleEnum
          ? _value.bordersStyleEnum
          : bordersStyleEnum // ignore: cast_nullable_to_non_nullable
              as BordersStyleEnum?,
      bordersColor: freezed == bordersColor
          ? _value.bordersColor
          : bordersColor // ignore: cast_nullable_to_non_nullable
              as Color?,
    ));
  }
}

/// @nodoc

class _$ChangeCapitalCellSettingsEvent
    implements ChangeCapitalCellSettingsEvent {
  const _$ChangeCapitalCellSettingsEvent(
      {this.fontWeight,
      this.textDecoration,
      this.fontStyle,
      this.fontSize,
      this.color,
      this.horizontalAlignment,
      this.verticalAlignment,
      this.backgroundColor,
      this.bordersStyleEnum,
      this.bordersColor});

  @override
  final FontWeightEnum? fontWeight;
  @override
  final TextDecorationEnum? textDecoration;
  @override
  final FontStyleEnum? fontStyle;
  @override
  final double? fontSize;
  @override
  final String? color;
  @override
  final HorizontalAlignmentsEnum? horizontalAlignment;
  @override
  final VerticalAlignmentsEnum? verticalAlignment;
  @override
  final String? backgroundColor;
  @override
  final BordersStyleEnum? bordersStyleEnum;
  @override
  final Color? bordersColor;

  @override
  String toString() {
    return 'DiaryListEvent.changeCapitalCellSettings(fontWeight: $fontWeight, textDecoration: $textDecoration, fontStyle: $fontStyle, fontSize: $fontSize, color: $color, horizontalAlignment: $horizontalAlignment, verticalAlignment: $verticalAlignment, backgroundColor: $backgroundColor, bordersStyleEnum: $bordersStyleEnum, bordersColor: $bordersColor)';
  }

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$ChangeCapitalCellSettingsEvent &&
            (identical(other.fontWeight, fontWeight) ||
                other.fontWeight == fontWeight) &&
            (identical(other.textDecoration, textDecoration) ||
                other.textDecoration == textDecoration) &&
            (identical(other.fontStyle, fontStyle) ||
                other.fontStyle == fontStyle) &&
            (identical(other.fontSize, fontSize) ||
                other.fontSize == fontSize) &&
            (identical(other.color, color) || other.color == color) &&
            (identical(other.horizontalAlignment, horizontalAlignment) ||
                other.horizontalAlignment == horizontalAlignment) &&
            (identical(other.verticalAlignment, verticalAlignment) ||
                other.verticalAlignment == verticalAlignment) &&
            (identical(other.backgroundColor, backgroundColor) ||
                other.backgroundColor == backgroundColor) &&
            (identical(other.bordersStyleEnum, bordersStyleEnum) ||
                other.bordersStyleEnum == bordersStyleEnum) &&
            (identical(other.bordersColor, bordersColor) ||
                other.bordersColor == bordersColor));
  }

  @override
  int get hashCode => Object.hash(
      runtimeType,
      fontWeight,
      textDecoration,
      fontStyle,
      fontSize,
      color,
      horizontalAlignment,
      verticalAlignment,
      backgroundColor,
      bordersStyleEnum,
      bordersColor);

  @JsonKey(ignore: true)
  @override
  @pragma('vm:prefer-inline')
  _$$ChangeCapitalCellSettingsEventCopyWith<_$ChangeCapitalCellSettingsEvent>
      get copyWith => __$$ChangeCapitalCellSettingsEventCopyWithImpl<
          _$ChangeCapitalCellSettingsEvent>(this, _$identity);

  @override
  @optionalTypeArgs
  TResult when<TResult extends Object?>({
    required TResult Function() createSample,
    required TResult Function() initialLoad,
    required TResult Function(DateTime date, int delay) getDiaryList,
    required TResult Function(DiaryList diaryList, List<DiaryList> lists)
        getDiaryColumns,
    required TResult Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells,
            List<DiaryList> lists)
        getDiaryCells,
    required TResult Function(DiaryCell diaryCell) selectDiaryCell,
    required TResult Function(List<DiaryCell> diaryCells) selectDiaryCells,
    required TResult Function(CapitalCell capitalCell) selectCapitalCell,
    required TResult Function(
            DiaryCell diaryCell,
            GlobalObjectKey<State<StatefulWidget>> cellKey,
            DragUpdateDetails details,
            double scaleFactor)
        onPanUpdate,
    required TResult Function(DiaryList? selectedList) startEditingList,
    required TResult Function(
            String? newName, String? addedColumnName, int? addedColumnCount)
        returnToLoaded,
    required TResult Function() returnToCellsSelected,
    required TResult Function(DiaryList diaryList, String newName)
        updateDiaryListName,
    required TResult Function(DiaryCell diaryCell, String? textFieldText)
        changeDiaryCell,
    required TResult Function(CapitalCell capitalCell, String? textFieldText)
        changeCapitalCell,
    required TResult Function(DiaryCell diaryCell, String? textFieldText)
        updateDiaryCellInFirebase,
    required TResult Function(
            FontWeightEnum? fontWeight,
            TextDecorationEnum? textDecoration,
            FontStyleEnum? fontStyle,
            double? fontSize,
            String? color,
            HorizontalAlignmentsEnum? horizontalAlignment,
            VerticalAlignmentsEnum? verticalAlignment,
            String? backgroundColor)
        changeDiaryCellsSettings,
    required TResult Function(BordersEditingEnum bordersEditingEnum,
            BordersStyleEnum bordersStyleEnum, Color bordersColor)
        changeDiaryCellsBordersSettings,
    required TResult Function(
            FontWeightEnum? fontWeight,
            TextDecorationEnum? textDecoration,
            FontStyleEnum? fontStyle,
            double? fontSize,
            String? color,
            HorizontalAlignmentsEnum? horizontalAlignment,
            VerticalAlignmentsEnum? verticalAlignment,
            String? backgroundColor,
            BordersStyleEnum? bordersStyleEnum,
            Color? bordersColor)
        changeCapitalCellSettings,
    required TResult Function(
            DiaryCell diaryCell,
            int index,
            DiaryCellTextSettings? newTextSettings,
            DiaryCellSettings? newSettings)
        updateDiaryCellSettingsInFirebase,
    required TResult Function(DiaryColumnSettings newSettings)
        updateCapitalCellSettingsInFirebase,
    required TResult Function(PointerMoveEvent details) updateCapitalCellWidth,
    required TResult Function(PointerUpEvent details)
        updateCapitalCellWidthInFirebase,
    required TResult Function(bool isTextEditing) startEditingCells,
    required TResult Function(DiaryList diaryList, String name,
            int columnsCount, List<DiaryColumn> diaryColumns)
        createDiaryColumn,
    required TResult Function(DiaryList diaryList, String columnId)
        deleteDiaryColumn,
    required TResult Function(DiaryList diaryList, String? themeColor,
            String? themeBorderColor, String? themePanelBackgroundColor)
        updateDiaryListSettings,
    required TResult Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<DiaryCell> diaryCells,
            List<CapitalCell> capitalCells,
            String themeName,
            String description)
        shareTheme,
    required TResult Function() startEditingColor,
    required TResult Function() startEditingBorders,
    required TResult Function() startEditingBorderStyle,
    required TResult Function() turnBackEditing,
    required TResult Function() startColumnDeleting,
    required TResult Function() startColorThemeEditing,
    required TResult Function() deleteColumns,
    required TResult Function() loadThemes,
    required TResult Function(ListTheme listTheme) loadFromTheme,
    required TResult Function(ListTheme listTheme) takeTheme,
  }) {
    return changeCapitalCellSettings(
        fontWeight,
        textDecoration,
        fontStyle,
        fontSize,
        color,
        horizontalAlignment,
        verticalAlignment,
        backgroundColor,
        bordersStyleEnum,
        bordersColor);
  }

  @override
  @optionalTypeArgs
  TResult? whenOrNull<TResult extends Object?>({
    TResult? Function()? createSample,
    TResult? Function()? initialLoad,
    TResult? Function(DateTime date, int delay)? getDiaryList,
    TResult? Function(DiaryList diaryList, List<DiaryList> lists)?
        getDiaryColumns,
    TResult? Function(DiaryList diaryList, List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells, List<DiaryList> lists)?
        getDiaryCells,
    TResult? Function(DiaryCell diaryCell)? selectDiaryCell,
    TResult? Function(List<DiaryCell> diaryCells)? selectDiaryCells,
    TResult? Function(CapitalCell capitalCell)? selectCapitalCell,
    TResult? Function(
            DiaryCell diaryCell,
            GlobalObjectKey<State<StatefulWidget>> cellKey,
            DragUpdateDetails details,
            double scaleFactor)?
        onPanUpdate,
    TResult? Function(DiaryList? selectedList)? startEditingList,
    TResult? Function(
            String? newName, String? addedColumnName, int? addedColumnCount)?
        returnToLoaded,
    TResult? Function()? returnToCellsSelected,
    TResult? Function(DiaryList diaryList, String newName)? updateDiaryListName,
    TResult? Function(DiaryCell diaryCell, String? textFieldText)?
        changeDiaryCell,
    TResult? Function(CapitalCell capitalCell, String? textFieldText)?
        changeCapitalCell,
    TResult? Function(DiaryCell diaryCell, String? textFieldText)?
        updateDiaryCellInFirebase,
    TResult? Function(
            FontWeightEnum? fontWeight,
            TextDecorationEnum? textDecoration,
            FontStyleEnum? fontStyle,
            double? fontSize,
            String? color,
            HorizontalAlignmentsEnum? horizontalAlignment,
            VerticalAlignmentsEnum? verticalAlignment,
            String? backgroundColor)?
        changeDiaryCellsSettings,
    TResult? Function(BordersEditingEnum bordersEditingEnum,
            BordersStyleEnum bordersStyleEnum, Color bordersColor)?
        changeDiaryCellsBordersSettings,
    TResult? Function(
            FontWeightEnum? fontWeight,
            TextDecorationEnum? textDecoration,
            FontStyleEnum? fontStyle,
            double? fontSize,
            String? color,
            HorizontalAlignmentsEnum? horizontalAlignment,
            VerticalAlignmentsEnum? verticalAlignment,
            String? backgroundColor,
            BordersStyleEnum? bordersStyleEnum,
            Color? bordersColor)?
        changeCapitalCellSettings,
    TResult? Function(
            DiaryCell diaryCell,
            int index,
            DiaryCellTextSettings? newTextSettings,
            DiaryCellSettings? newSettings)?
        updateDiaryCellSettingsInFirebase,
    TResult? Function(DiaryColumnSettings newSettings)?
        updateCapitalCellSettingsInFirebase,
    TResult? Function(PointerMoveEvent details)? updateCapitalCellWidth,
    TResult? Function(PointerUpEvent details)? updateCapitalCellWidthInFirebase,
    TResult? Function(bool isTextEditing)? startEditingCells,
    TResult? Function(DiaryList diaryList, String name, int columnsCount,
            List<DiaryColumn> diaryColumns)?
        createDiaryColumn,
    TResult? Function(DiaryList diaryList, String columnId)? deleteDiaryColumn,
    TResult? Function(DiaryList diaryList, String? themeColor,
            String? themeBorderColor, String? themePanelBackgroundColor)?
        updateDiaryListSettings,
    TResult? Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<DiaryCell> diaryCells,
            List<CapitalCell> capitalCells,
            String themeName,
            String description)?
        shareTheme,
    TResult? Function()? startEditingColor,
    TResult? Function()? startEditingBorders,
    TResult? Function()? startEditingBorderStyle,
    TResult? Function()? turnBackEditing,
    TResult? Function()? startColumnDeleting,
    TResult? Function()? startColorThemeEditing,
    TResult? Function()? deleteColumns,
    TResult? Function()? loadThemes,
    TResult? Function(ListTheme listTheme)? loadFromTheme,
    TResult? Function(ListTheme listTheme)? takeTheme,
  }) {
    return changeCapitalCellSettings?.call(
        fontWeight,
        textDecoration,
        fontStyle,
        fontSize,
        color,
        horizontalAlignment,
        verticalAlignment,
        backgroundColor,
        bordersStyleEnum,
        bordersColor);
  }

  @override
  @optionalTypeArgs
  TResult maybeWhen<TResult extends Object?>({
    TResult Function()? createSample,
    TResult Function()? initialLoad,
    TResult Function(DateTime date, int delay)? getDiaryList,
    TResult Function(DiaryList diaryList, List<DiaryList> lists)?
        getDiaryColumns,
    TResult Function(DiaryList diaryList, List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells, List<DiaryList> lists)?
        getDiaryCells,
    TResult Function(DiaryCell diaryCell)? selectDiaryCell,
    TResult Function(List<DiaryCell> diaryCells)? selectDiaryCells,
    TResult Function(CapitalCell capitalCell)? selectCapitalCell,
    TResult Function(
            DiaryCell diaryCell,
            GlobalObjectKey<State<StatefulWidget>> cellKey,
            DragUpdateDetails details,
            double scaleFactor)?
        onPanUpdate,
    TResult Function(DiaryList? selectedList)? startEditingList,
    TResult Function(
            String? newName, String? addedColumnName, int? addedColumnCount)?
        returnToLoaded,
    TResult Function()? returnToCellsSelected,
    TResult Function(DiaryList diaryList, String newName)? updateDiaryListName,
    TResult Function(DiaryCell diaryCell, String? textFieldText)?
        changeDiaryCell,
    TResult Function(CapitalCell capitalCell, String? textFieldText)?
        changeCapitalCell,
    TResult Function(DiaryCell diaryCell, String? textFieldText)?
        updateDiaryCellInFirebase,
    TResult Function(
            FontWeightEnum? fontWeight,
            TextDecorationEnum? textDecoration,
            FontStyleEnum? fontStyle,
            double? fontSize,
            String? color,
            HorizontalAlignmentsEnum? horizontalAlignment,
            VerticalAlignmentsEnum? verticalAlignment,
            String? backgroundColor)?
        changeDiaryCellsSettings,
    TResult Function(BordersEditingEnum bordersEditingEnum,
            BordersStyleEnum bordersStyleEnum, Color bordersColor)?
        changeDiaryCellsBordersSettings,
    TResult Function(
            FontWeightEnum? fontWeight,
            TextDecorationEnum? textDecoration,
            FontStyleEnum? fontStyle,
            double? fontSize,
            String? color,
            HorizontalAlignmentsEnum? horizontalAlignment,
            VerticalAlignmentsEnum? verticalAlignment,
            String? backgroundColor,
            BordersStyleEnum? bordersStyleEnum,
            Color? bordersColor)?
        changeCapitalCellSettings,
    TResult Function(
            DiaryCell diaryCell,
            int index,
            DiaryCellTextSettings? newTextSettings,
            DiaryCellSettings? newSettings)?
        updateDiaryCellSettingsInFirebase,
    TResult Function(DiaryColumnSettings newSettings)?
        updateCapitalCellSettingsInFirebase,
    TResult Function(PointerMoveEvent details)? updateCapitalCellWidth,
    TResult Function(PointerUpEvent details)? updateCapitalCellWidthInFirebase,
    TResult Function(bool isTextEditing)? startEditingCells,
    TResult Function(DiaryList diaryList, String name, int columnsCount,
            List<DiaryColumn> diaryColumns)?
        createDiaryColumn,
    TResult Function(DiaryList diaryList, String columnId)? deleteDiaryColumn,
    TResult Function(DiaryList diaryList, String? themeColor,
            String? themeBorderColor, String? themePanelBackgroundColor)?
        updateDiaryListSettings,
    TResult Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<DiaryCell> diaryCells,
            List<CapitalCell> capitalCells,
            String themeName,
            String description)?
        shareTheme,
    TResult Function()? startEditingColor,
    TResult Function()? startEditingBorders,
    TResult Function()? startEditingBorderStyle,
    TResult Function()? turnBackEditing,
    TResult Function()? startColumnDeleting,
    TResult Function()? startColorThemeEditing,
    TResult Function()? deleteColumns,
    TResult Function()? loadThemes,
    TResult Function(ListTheme listTheme)? loadFromTheme,
    TResult Function(ListTheme listTheme)? takeTheme,
    required TResult orElse(),
  }) {
    if (changeCapitalCellSettings != null) {
      return changeCapitalCellSettings(
          fontWeight,
          textDecoration,
          fontStyle,
          fontSize,
          color,
          horizontalAlignment,
          verticalAlignment,
          backgroundColor,
          bordersStyleEnum,
          bordersColor);
    }
    return orElse();
  }

  @override
  @optionalTypeArgs
  TResult map<TResult extends Object?>({
    required TResult Function(CreateSampleEvent value) createSample,
    required TResult Function(InitialLoadEvent value) initialLoad,
    required TResult Function(GetDiaryListEvent value) getDiaryList,
    required TResult Function(GetDiaryColumnsEvent value) getDiaryColumns,
    required TResult Function(GetDiaryCellsEvent value) getDiaryCells,
    required TResult Function(SelectDiaryCellEvent value) selectDiaryCell,
    required TResult Function(SelectDiaryCellsEvent value) selectDiaryCells,
    required TResult Function(SelectCapitalCellEvent value) selectCapitalCell,
    required TResult Function(OnPanUpdateEvent value) onPanUpdate,
    required TResult Function(StartEditingListEvent value) startEditingList,
    required TResult Function(ReturnToLoadedEvent value) returnToLoaded,
    required TResult Function(ReturnToCellsSelectedEvent value)
        returnToCellsSelected,
    required TResult Function(UpdateDiaryListNameEvent value)
        updateDiaryListName,
    required TResult Function(ChangeDiaryCellEvent value) changeDiaryCell,
    required TResult Function(ChangeCapitalCellEvent value) changeCapitalCell,
    required TResult Function(UpdateDiaryCellInFirebaseEvent value)
        updateDiaryCellInFirebase,
    required TResult Function(ChangeDiaryCellsSettingsEvent value)
        changeDiaryCellsSettings,
    required TResult Function(ChangeDiaryCellsBordersSettingsEvent value)
        changeDiaryCellsBordersSettings,
    required TResult Function(ChangeCapitalCellSettingsEvent value)
        changeCapitalCellSettings,
    required TResult Function(UpdateDiaryCellSettingsInFirebaseEvent value)
        updateDiaryCellSettingsInFirebase,
    required TResult Function(UpdateCapitalCellSettingsInFirebaseEvent value)
        updateCapitalCellSettingsInFirebase,
    required TResult Function(UpdateCapitalCellWidthEvent value)
        updateCapitalCellWidth,
    required TResult Function(UpdateCapitalCellWidthInFirebaseEvent value)
        updateCapitalCellWidthInFirebase,
    required TResult Function(StartEditingCellsEvent value) startEditingCells,
    required TResult Function(CreateDiaryColumnEvent value) createDiaryColumn,
    required TResult Function(DeleteDiaryColumnEvent value) deleteDiaryColumn,
    required TResult Function(UpdateDiaryListSettingsEvent value)
        updateDiaryListSettings,
    required TResult Function(ShareThemeEvent value) shareTheme,
    required TResult Function(StartEditingColorEvent value) startEditingColor,
    required TResult Function(StartEditingBordersEvent value)
        startEditingBorders,
    required TResult Function(StartEditingBordersStyleEvent value)
        startEditingBorderStyle,
    required TResult Function(TurnBackEditingEvent value) turnBackEditing,
    required TResult Function(StartColumnDeletingEvent value)
        startColumnDeleting,
    required TResult Function(StartColorThemeEditingEvent value)
        startColorThemeEditing,
    required TResult Function(DeleteColumnsEvent value) deleteColumns,
    required TResult Function(LoadThemesEvent value) loadThemes,
    required TResult Function(LoadFromThemeEvent value) loadFromTheme,
    required TResult Function(TakeThemeEvent value) takeTheme,
  }) {
    return changeCapitalCellSettings(this);
  }

  @override
  @optionalTypeArgs
  TResult? mapOrNull<TResult extends Object?>({
    TResult? Function(CreateSampleEvent value)? createSample,
    TResult? Function(InitialLoadEvent value)? initialLoad,
    TResult? Function(GetDiaryListEvent value)? getDiaryList,
    TResult? Function(GetDiaryColumnsEvent value)? getDiaryColumns,
    TResult? Function(GetDiaryCellsEvent value)? getDiaryCells,
    TResult? Function(SelectDiaryCellEvent value)? selectDiaryCell,
    TResult? Function(SelectDiaryCellsEvent value)? selectDiaryCells,
    TResult? Function(SelectCapitalCellEvent value)? selectCapitalCell,
    TResult? Function(OnPanUpdateEvent value)? onPanUpdate,
    TResult? Function(StartEditingListEvent value)? startEditingList,
    TResult? Function(ReturnToLoadedEvent value)? returnToLoaded,
    TResult? Function(ReturnToCellsSelectedEvent value)? returnToCellsSelected,
    TResult? Function(UpdateDiaryListNameEvent value)? updateDiaryListName,
    TResult? Function(ChangeDiaryCellEvent value)? changeDiaryCell,
    TResult? Function(ChangeCapitalCellEvent value)? changeCapitalCell,
    TResult? Function(UpdateDiaryCellInFirebaseEvent value)?
        updateDiaryCellInFirebase,
    TResult? Function(ChangeDiaryCellsSettingsEvent value)?
        changeDiaryCellsSettings,
    TResult? Function(ChangeDiaryCellsBordersSettingsEvent value)?
        changeDiaryCellsBordersSettings,
    TResult? Function(ChangeCapitalCellSettingsEvent value)?
        changeCapitalCellSettings,
    TResult? Function(UpdateDiaryCellSettingsInFirebaseEvent value)?
        updateDiaryCellSettingsInFirebase,
    TResult? Function(UpdateCapitalCellSettingsInFirebaseEvent value)?
        updateCapitalCellSettingsInFirebase,
    TResult? Function(UpdateCapitalCellWidthEvent value)?
        updateCapitalCellWidth,
    TResult? Function(UpdateCapitalCellWidthInFirebaseEvent value)?
        updateCapitalCellWidthInFirebase,
    TResult? Function(StartEditingCellsEvent value)? startEditingCells,
    TResult? Function(CreateDiaryColumnEvent value)? createDiaryColumn,
    TResult? Function(DeleteDiaryColumnEvent value)? deleteDiaryColumn,
    TResult? Function(UpdateDiaryListSettingsEvent value)?
        updateDiaryListSettings,
    TResult? Function(ShareThemeEvent value)? shareTheme,
    TResult? Function(StartEditingColorEvent value)? startEditingColor,
    TResult? Function(StartEditingBordersEvent value)? startEditingBorders,
    TResult? Function(StartEditingBordersStyleEvent value)?
        startEditingBorderStyle,
    TResult? Function(TurnBackEditingEvent value)? turnBackEditing,
    TResult? Function(StartColumnDeletingEvent value)? startColumnDeleting,
    TResult? Function(StartColorThemeEditingEvent value)?
        startColorThemeEditing,
    TResult? Function(DeleteColumnsEvent value)? deleteColumns,
    TResult? Function(LoadThemesEvent value)? loadThemes,
    TResult? Function(LoadFromThemeEvent value)? loadFromTheme,
    TResult? Function(TakeThemeEvent value)? takeTheme,
  }) {
    return changeCapitalCellSettings?.call(this);
  }

  @override
  @optionalTypeArgs
  TResult maybeMap<TResult extends Object?>({
    TResult Function(CreateSampleEvent value)? createSample,
    TResult Function(InitialLoadEvent value)? initialLoad,
    TResult Function(GetDiaryListEvent value)? getDiaryList,
    TResult Function(GetDiaryColumnsEvent value)? getDiaryColumns,
    TResult Function(GetDiaryCellsEvent value)? getDiaryCells,
    TResult Function(SelectDiaryCellEvent value)? selectDiaryCell,
    TResult Function(SelectDiaryCellsEvent value)? selectDiaryCells,
    TResult Function(SelectCapitalCellEvent value)? selectCapitalCell,
    TResult Function(OnPanUpdateEvent value)? onPanUpdate,
    TResult Function(StartEditingListEvent value)? startEditingList,
    TResult Function(ReturnToLoadedEvent value)? returnToLoaded,
    TResult Function(ReturnToCellsSelectedEvent value)? returnToCellsSelected,
    TResult Function(UpdateDiaryListNameEvent value)? updateDiaryListName,
    TResult Function(ChangeDiaryCellEvent value)? changeDiaryCell,
    TResult Function(ChangeCapitalCellEvent value)? changeCapitalCell,
    TResult Function(UpdateDiaryCellInFirebaseEvent value)?
        updateDiaryCellInFirebase,
    TResult Function(ChangeDiaryCellsSettingsEvent value)?
        changeDiaryCellsSettings,
    TResult Function(ChangeDiaryCellsBordersSettingsEvent value)?
        changeDiaryCellsBordersSettings,
    TResult Function(ChangeCapitalCellSettingsEvent value)?
        changeCapitalCellSettings,
    TResult Function(UpdateDiaryCellSettingsInFirebaseEvent value)?
        updateDiaryCellSettingsInFirebase,
    TResult Function(UpdateCapitalCellSettingsInFirebaseEvent value)?
        updateCapitalCellSettingsInFirebase,
    TResult Function(UpdateCapitalCellWidthEvent value)? updateCapitalCellWidth,
    TResult Function(UpdateCapitalCellWidthInFirebaseEvent value)?
        updateCapitalCellWidthInFirebase,
    TResult Function(StartEditingCellsEvent value)? startEditingCells,
    TResult Function(CreateDiaryColumnEvent value)? createDiaryColumn,
    TResult Function(DeleteDiaryColumnEvent value)? deleteDiaryColumn,
    TResult Function(UpdateDiaryListSettingsEvent value)?
        updateDiaryListSettings,
    TResult Function(ShareThemeEvent value)? shareTheme,
    TResult Function(StartEditingColorEvent value)? startEditingColor,
    TResult Function(StartEditingBordersEvent value)? startEditingBorders,
    TResult Function(StartEditingBordersStyleEvent value)?
        startEditingBorderStyle,
    TResult Function(TurnBackEditingEvent value)? turnBackEditing,
    TResult Function(StartColumnDeletingEvent value)? startColumnDeleting,
    TResult Function(StartColorThemeEditingEvent value)? startColorThemeEditing,
    TResult Function(DeleteColumnsEvent value)? deleteColumns,
    TResult Function(LoadThemesEvent value)? loadThemes,
    TResult Function(LoadFromThemeEvent value)? loadFromTheme,
    TResult Function(TakeThemeEvent value)? takeTheme,
    required TResult orElse(),
  }) {
    if (changeCapitalCellSettings != null) {
      return changeCapitalCellSettings(this);
    }
    return orElse();
  }
}

abstract class ChangeCapitalCellSettingsEvent implements DiaryListEvent {
  const factory ChangeCapitalCellSettingsEvent(
      {final FontWeightEnum? fontWeight,
      final TextDecorationEnum? textDecoration,
      final FontStyleEnum? fontStyle,
      final double? fontSize,
      final String? color,
      final HorizontalAlignmentsEnum? horizontalAlignment,
      final VerticalAlignmentsEnum? verticalAlignment,
      final String? backgroundColor,
      final BordersStyleEnum? bordersStyleEnum,
      final Color? bordersColor}) = _$ChangeCapitalCellSettingsEvent;

  FontWeightEnum? get fontWeight;
  TextDecorationEnum? get textDecoration;
  FontStyleEnum? get fontStyle;
  double? get fontSize;
  String? get color;
  HorizontalAlignmentsEnum? get horizontalAlignment;
  VerticalAlignmentsEnum? get verticalAlignment;
  String? get backgroundColor;
  BordersStyleEnum? get bordersStyleEnum;
  Color? get bordersColor;
  @JsonKey(ignore: true)
  _$$ChangeCapitalCellSettingsEventCopyWith<_$ChangeCapitalCellSettingsEvent>
      get copyWith => throw _privateConstructorUsedError;
}

/// @nodoc
abstract class _$$UpdateDiaryCellSettingsInFirebaseEventCopyWith<$Res> {
  factory _$$UpdateDiaryCellSettingsInFirebaseEventCopyWith(
          _$UpdateDiaryCellSettingsInFirebaseEvent value,
          $Res Function(_$UpdateDiaryCellSettingsInFirebaseEvent) then) =
      __$$UpdateDiaryCellSettingsInFirebaseEventCopyWithImpl<$Res>;
  @useResult
  $Res call(
      {DiaryCell diaryCell,
      int index,
      DiaryCellTextSettings? newTextSettings,
      DiaryCellSettings? newSettings});
}

/// @nodoc
class __$$UpdateDiaryCellSettingsInFirebaseEventCopyWithImpl<$Res>
    extends _$DiaryListEventCopyWithImpl<$Res,
        _$UpdateDiaryCellSettingsInFirebaseEvent>
    implements _$$UpdateDiaryCellSettingsInFirebaseEventCopyWith<$Res> {
  __$$UpdateDiaryCellSettingsInFirebaseEventCopyWithImpl(
      _$UpdateDiaryCellSettingsInFirebaseEvent _value,
      $Res Function(_$UpdateDiaryCellSettingsInFirebaseEvent) _then)
      : super(_value, _then);

  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? diaryCell = null,
    Object? index = null,
    Object? newTextSettings = freezed,
    Object? newSettings = freezed,
  }) {
    return _then(_$UpdateDiaryCellSettingsInFirebaseEvent(
      diaryCell: null == diaryCell
          ? _value.diaryCell
          : diaryCell // ignore: cast_nullable_to_non_nullable
              as DiaryCell,
      index: null == index
          ? _value.index
          : index // ignore: cast_nullable_to_non_nullable
              as int,
      newTextSettings: freezed == newTextSettings
          ? _value.newTextSettings
          : newTextSettings // ignore: cast_nullable_to_non_nullable
              as DiaryCellTextSettings?,
      newSettings: freezed == newSettings
          ? _value.newSettings
          : newSettings // ignore: cast_nullable_to_non_nullable
              as DiaryCellSettings?,
    ));
  }
}

/// @nodoc

class _$UpdateDiaryCellSettingsInFirebaseEvent
    implements UpdateDiaryCellSettingsInFirebaseEvent {
  const _$UpdateDiaryCellSettingsInFirebaseEvent(
      {required this.diaryCell,
      required this.index,
      this.newTextSettings,
      this.newSettings});

  @override
  final DiaryCell diaryCell;
  @override
  final int index;
  @override
  final DiaryCellTextSettings? newTextSettings;
  @override
  final DiaryCellSettings? newSettings;

  @override
  String toString() {
    return 'DiaryListEvent.updateDiaryCellSettingsInFirebase(diaryCell: $diaryCell, index: $index, newTextSettings: $newTextSettings, newSettings: $newSettings)';
  }

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$UpdateDiaryCellSettingsInFirebaseEvent &&
            (identical(other.diaryCell, diaryCell) ||
                other.diaryCell == diaryCell) &&
            (identical(other.index, index) || other.index == index) &&
            (identical(other.newTextSettings, newTextSettings) ||
                other.newTextSettings == newTextSettings) &&
            (identical(other.newSettings, newSettings) ||
                other.newSettings == newSettings));
  }

  @override
  int get hashCode =>
      Object.hash(runtimeType, diaryCell, index, newTextSettings, newSettings);

  @JsonKey(ignore: true)
  @override
  @pragma('vm:prefer-inline')
  _$$UpdateDiaryCellSettingsInFirebaseEventCopyWith<
          _$UpdateDiaryCellSettingsInFirebaseEvent>
      get copyWith => __$$UpdateDiaryCellSettingsInFirebaseEventCopyWithImpl<
          _$UpdateDiaryCellSettingsInFirebaseEvent>(this, _$identity);

  @override
  @optionalTypeArgs
  TResult when<TResult extends Object?>({
    required TResult Function() createSample,
    required TResult Function() initialLoad,
    required TResult Function(DateTime date, int delay) getDiaryList,
    required TResult Function(DiaryList diaryList, List<DiaryList> lists)
        getDiaryColumns,
    required TResult Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells,
            List<DiaryList> lists)
        getDiaryCells,
    required TResult Function(DiaryCell diaryCell) selectDiaryCell,
    required TResult Function(List<DiaryCell> diaryCells) selectDiaryCells,
    required TResult Function(CapitalCell capitalCell) selectCapitalCell,
    required TResult Function(
            DiaryCell diaryCell,
            GlobalObjectKey<State<StatefulWidget>> cellKey,
            DragUpdateDetails details,
            double scaleFactor)
        onPanUpdate,
    required TResult Function(DiaryList? selectedList) startEditingList,
    required TResult Function(
            String? newName, String? addedColumnName, int? addedColumnCount)
        returnToLoaded,
    required TResult Function() returnToCellsSelected,
    required TResult Function(DiaryList diaryList, String newName)
        updateDiaryListName,
    required TResult Function(DiaryCell diaryCell, String? textFieldText)
        changeDiaryCell,
    required TResult Function(CapitalCell capitalCell, String? textFieldText)
        changeCapitalCell,
    required TResult Function(DiaryCell diaryCell, String? textFieldText)
        updateDiaryCellInFirebase,
    required TResult Function(
            FontWeightEnum? fontWeight,
            TextDecorationEnum? textDecoration,
            FontStyleEnum? fontStyle,
            double? fontSize,
            String? color,
            HorizontalAlignmentsEnum? horizontalAlignment,
            VerticalAlignmentsEnum? verticalAlignment,
            String? backgroundColor)
        changeDiaryCellsSettings,
    required TResult Function(BordersEditingEnum bordersEditingEnum,
            BordersStyleEnum bordersStyleEnum, Color bordersColor)
        changeDiaryCellsBordersSettings,
    required TResult Function(
            FontWeightEnum? fontWeight,
            TextDecorationEnum? textDecoration,
            FontStyleEnum? fontStyle,
            double? fontSize,
            String? color,
            HorizontalAlignmentsEnum? horizontalAlignment,
            VerticalAlignmentsEnum? verticalAlignment,
            String? backgroundColor,
            BordersStyleEnum? bordersStyleEnum,
            Color? bordersColor)
        changeCapitalCellSettings,
    required TResult Function(
            DiaryCell diaryCell,
            int index,
            DiaryCellTextSettings? newTextSettings,
            DiaryCellSettings? newSettings)
        updateDiaryCellSettingsInFirebase,
    required TResult Function(DiaryColumnSettings newSettings)
        updateCapitalCellSettingsInFirebase,
    required TResult Function(PointerMoveEvent details) updateCapitalCellWidth,
    required TResult Function(PointerUpEvent details)
        updateCapitalCellWidthInFirebase,
    required TResult Function(bool isTextEditing) startEditingCells,
    required TResult Function(DiaryList diaryList, String name,
            int columnsCount, List<DiaryColumn> diaryColumns)
        createDiaryColumn,
    required TResult Function(DiaryList diaryList, String columnId)
        deleteDiaryColumn,
    required TResult Function(DiaryList diaryList, String? themeColor,
            String? themeBorderColor, String? themePanelBackgroundColor)
        updateDiaryListSettings,
    required TResult Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<DiaryCell> diaryCells,
            List<CapitalCell> capitalCells,
            String themeName,
            String description)
        shareTheme,
    required TResult Function() startEditingColor,
    required TResult Function() startEditingBorders,
    required TResult Function() startEditingBorderStyle,
    required TResult Function() turnBackEditing,
    required TResult Function() startColumnDeleting,
    required TResult Function() startColorThemeEditing,
    required TResult Function() deleteColumns,
    required TResult Function() loadThemes,
    required TResult Function(ListTheme listTheme) loadFromTheme,
    required TResult Function(ListTheme listTheme) takeTheme,
  }) {
    return updateDiaryCellSettingsInFirebase(
        diaryCell, index, newTextSettings, newSettings);
  }

  @override
  @optionalTypeArgs
  TResult? whenOrNull<TResult extends Object?>({
    TResult? Function()? createSample,
    TResult? Function()? initialLoad,
    TResult? Function(DateTime date, int delay)? getDiaryList,
    TResult? Function(DiaryList diaryList, List<DiaryList> lists)?
        getDiaryColumns,
    TResult? Function(DiaryList diaryList, List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells, List<DiaryList> lists)?
        getDiaryCells,
    TResult? Function(DiaryCell diaryCell)? selectDiaryCell,
    TResult? Function(List<DiaryCell> diaryCells)? selectDiaryCells,
    TResult? Function(CapitalCell capitalCell)? selectCapitalCell,
    TResult? Function(
            DiaryCell diaryCell,
            GlobalObjectKey<State<StatefulWidget>> cellKey,
            DragUpdateDetails details,
            double scaleFactor)?
        onPanUpdate,
    TResult? Function(DiaryList? selectedList)? startEditingList,
    TResult? Function(
            String? newName, String? addedColumnName, int? addedColumnCount)?
        returnToLoaded,
    TResult? Function()? returnToCellsSelected,
    TResult? Function(DiaryList diaryList, String newName)? updateDiaryListName,
    TResult? Function(DiaryCell diaryCell, String? textFieldText)?
        changeDiaryCell,
    TResult? Function(CapitalCell capitalCell, String? textFieldText)?
        changeCapitalCell,
    TResult? Function(DiaryCell diaryCell, String? textFieldText)?
        updateDiaryCellInFirebase,
    TResult? Function(
            FontWeightEnum? fontWeight,
            TextDecorationEnum? textDecoration,
            FontStyleEnum? fontStyle,
            double? fontSize,
            String? color,
            HorizontalAlignmentsEnum? horizontalAlignment,
            VerticalAlignmentsEnum? verticalAlignment,
            String? backgroundColor)?
        changeDiaryCellsSettings,
    TResult? Function(BordersEditingEnum bordersEditingEnum,
            BordersStyleEnum bordersStyleEnum, Color bordersColor)?
        changeDiaryCellsBordersSettings,
    TResult? Function(
            FontWeightEnum? fontWeight,
            TextDecorationEnum? textDecoration,
            FontStyleEnum? fontStyle,
            double? fontSize,
            String? color,
            HorizontalAlignmentsEnum? horizontalAlignment,
            VerticalAlignmentsEnum? verticalAlignment,
            String? backgroundColor,
            BordersStyleEnum? bordersStyleEnum,
            Color? bordersColor)?
        changeCapitalCellSettings,
    TResult? Function(
            DiaryCell diaryCell,
            int index,
            DiaryCellTextSettings? newTextSettings,
            DiaryCellSettings? newSettings)?
        updateDiaryCellSettingsInFirebase,
    TResult? Function(DiaryColumnSettings newSettings)?
        updateCapitalCellSettingsInFirebase,
    TResult? Function(PointerMoveEvent details)? updateCapitalCellWidth,
    TResult? Function(PointerUpEvent details)? updateCapitalCellWidthInFirebase,
    TResult? Function(bool isTextEditing)? startEditingCells,
    TResult? Function(DiaryList diaryList, String name, int columnsCount,
            List<DiaryColumn> diaryColumns)?
        createDiaryColumn,
    TResult? Function(DiaryList diaryList, String columnId)? deleteDiaryColumn,
    TResult? Function(DiaryList diaryList, String? themeColor,
            String? themeBorderColor, String? themePanelBackgroundColor)?
        updateDiaryListSettings,
    TResult? Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<DiaryCell> diaryCells,
            List<CapitalCell> capitalCells,
            String themeName,
            String description)?
        shareTheme,
    TResult? Function()? startEditingColor,
    TResult? Function()? startEditingBorders,
    TResult? Function()? startEditingBorderStyle,
    TResult? Function()? turnBackEditing,
    TResult? Function()? startColumnDeleting,
    TResult? Function()? startColorThemeEditing,
    TResult? Function()? deleteColumns,
    TResult? Function()? loadThemes,
    TResult? Function(ListTheme listTheme)? loadFromTheme,
    TResult? Function(ListTheme listTheme)? takeTheme,
  }) {
    return updateDiaryCellSettingsInFirebase?.call(
        diaryCell, index, newTextSettings, newSettings);
  }

  @override
  @optionalTypeArgs
  TResult maybeWhen<TResult extends Object?>({
    TResult Function()? createSample,
    TResult Function()? initialLoad,
    TResult Function(DateTime date, int delay)? getDiaryList,
    TResult Function(DiaryList diaryList, List<DiaryList> lists)?
        getDiaryColumns,
    TResult Function(DiaryList diaryList, List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells, List<DiaryList> lists)?
        getDiaryCells,
    TResult Function(DiaryCell diaryCell)? selectDiaryCell,
    TResult Function(List<DiaryCell> diaryCells)? selectDiaryCells,
    TResult Function(CapitalCell capitalCell)? selectCapitalCell,
    TResult Function(
            DiaryCell diaryCell,
            GlobalObjectKey<State<StatefulWidget>> cellKey,
            DragUpdateDetails details,
            double scaleFactor)?
        onPanUpdate,
    TResult Function(DiaryList? selectedList)? startEditingList,
    TResult Function(
            String? newName, String? addedColumnName, int? addedColumnCount)?
        returnToLoaded,
    TResult Function()? returnToCellsSelected,
    TResult Function(DiaryList diaryList, String newName)? updateDiaryListName,
    TResult Function(DiaryCell diaryCell, String? textFieldText)?
        changeDiaryCell,
    TResult Function(CapitalCell capitalCell, String? textFieldText)?
        changeCapitalCell,
    TResult Function(DiaryCell diaryCell, String? textFieldText)?
        updateDiaryCellInFirebase,
    TResult Function(
            FontWeightEnum? fontWeight,
            TextDecorationEnum? textDecoration,
            FontStyleEnum? fontStyle,
            double? fontSize,
            String? color,
            HorizontalAlignmentsEnum? horizontalAlignment,
            VerticalAlignmentsEnum? verticalAlignment,
            String? backgroundColor)?
        changeDiaryCellsSettings,
    TResult Function(BordersEditingEnum bordersEditingEnum,
            BordersStyleEnum bordersStyleEnum, Color bordersColor)?
        changeDiaryCellsBordersSettings,
    TResult Function(
            FontWeightEnum? fontWeight,
            TextDecorationEnum? textDecoration,
            FontStyleEnum? fontStyle,
            double? fontSize,
            String? color,
            HorizontalAlignmentsEnum? horizontalAlignment,
            VerticalAlignmentsEnum? verticalAlignment,
            String? backgroundColor,
            BordersStyleEnum? bordersStyleEnum,
            Color? bordersColor)?
        changeCapitalCellSettings,
    TResult Function(
            DiaryCell diaryCell,
            int index,
            DiaryCellTextSettings? newTextSettings,
            DiaryCellSettings? newSettings)?
        updateDiaryCellSettingsInFirebase,
    TResult Function(DiaryColumnSettings newSettings)?
        updateCapitalCellSettingsInFirebase,
    TResult Function(PointerMoveEvent details)? updateCapitalCellWidth,
    TResult Function(PointerUpEvent details)? updateCapitalCellWidthInFirebase,
    TResult Function(bool isTextEditing)? startEditingCells,
    TResult Function(DiaryList diaryList, String name, int columnsCount,
            List<DiaryColumn> diaryColumns)?
        createDiaryColumn,
    TResult Function(DiaryList diaryList, String columnId)? deleteDiaryColumn,
    TResult Function(DiaryList diaryList, String? themeColor,
            String? themeBorderColor, String? themePanelBackgroundColor)?
        updateDiaryListSettings,
    TResult Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<DiaryCell> diaryCells,
            List<CapitalCell> capitalCells,
            String themeName,
            String description)?
        shareTheme,
    TResult Function()? startEditingColor,
    TResult Function()? startEditingBorders,
    TResult Function()? startEditingBorderStyle,
    TResult Function()? turnBackEditing,
    TResult Function()? startColumnDeleting,
    TResult Function()? startColorThemeEditing,
    TResult Function()? deleteColumns,
    TResult Function()? loadThemes,
    TResult Function(ListTheme listTheme)? loadFromTheme,
    TResult Function(ListTheme listTheme)? takeTheme,
    required TResult orElse(),
  }) {
    if (updateDiaryCellSettingsInFirebase != null) {
      return updateDiaryCellSettingsInFirebase(
          diaryCell, index, newTextSettings, newSettings);
    }
    return orElse();
  }

  @override
  @optionalTypeArgs
  TResult map<TResult extends Object?>({
    required TResult Function(CreateSampleEvent value) createSample,
    required TResult Function(InitialLoadEvent value) initialLoad,
    required TResult Function(GetDiaryListEvent value) getDiaryList,
    required TResult Function(GetDiaryColumnsEvent value) getDiaryColumns,
    required TResult Function(GetDiaryCellsEvent value) getDiaryCells,
    required TResult Function(SelectDiaryCellEvent value) selectDiaryCell,
    required TResult Function(SelectDiaryCellsEvent value) selectDiaryCells,
    required TResult Function(SelectCapitalCellEvent value) selectCapitalCell,
    required TResult Function(OnPanUpdateEvent value) onPanUpdate,
    required TResult Function(StartEditingListEvent value) startEditingList,
    required TResult Function(ReturnToLoadedEvent value) returnToLoaded,
    required TResult Function(ReturnToCellsSelectedEvent value)
        returnToCellsSelected,
    required TResult Function(UpdateDiaryListNameEvent value)
        updateDiaryListName,
    required TResult Function(ChangeDiaryCellEvent value) changeDiaryCell,
    required TResult Function(ChangeCapitalCellEvent value) changeCapitalCell,
    required TResult Function(UpdateDiaryCellInFirebaseEvent value)
        updateDiaryCellInFirebase,
    required TResult Function(ChangeDiaryCellsSettingsEvent value)
        changeDiaryCellsSettings,
    required TResult Function(ChangeDiaryCellsBordersSettingsEvent value)
        changeDiaryCellsBordersSettings,
    required TResult Function(ChangeCapitalCellSettingsEvent value)
        changeCapitalCellSettings,
    required TResult Function(UpdateDiaryCellSettingsInFirebaseEvent value)
        updateDiaryCellSettingsInFirebase,
    required TResult Function(UpdateCapitalCellSettingsInFirebaseEvent value)
        updateCapitalCellSettingsInFirebase,
    required TResult Function(UpdateCapitalCellWidthEvent value)
        updateCapitalCellWidth,
    required TResult Function(UpdateCapitalCellWidthInFirebaseEvent value)
        updateCapitalCellWidthInFirebase,
    required TResult Function(StartEditingCellsEvent value) startEditingCells,
    required TResult Function(CreateDiaryColumnEvent value) createDiaryColumn,
    required TResult Function(DeleteDiaryColumnEvent value) deleteDiaryColumn,
    required TResult Function(UpdateDiaryListSettingsEvent value)
        updateDiaryListSettings,
    required TResult Function(ShareThemeEvent value) shareTheme,
    required TResult Function(StartEditingColorEvent value) startEditingColor,
    required TResult Function(StartEditingBordersEvent value)
        startEditingBorders,
    required TResult Function(StartEditingBordersStyleEvent value)
        startEditingBorderStyle,
    required TResult Function(TurnBackEditingEvent value) turnBackEditing,
    required TResult Function(StartColumnDeletingEvent value)
        startColumnDeleting,
    required TResult Function(StartColorThemeEditingEvent value)
        startColorThemeEditing,
    required TResult Function(DeleteColumnsEvent value) deleteColumns,
    required TResult Function(LoadThemesEvent value) loadThemes,
    required TResult Function(LoadFromThemeEvent value) loadFromTheme,
    required TResult Function(TakeThemeEvent value) takeTheme,
  }) {
    return updateDiaryCellSettingsInFirebase(this);
  }

  @override
  @optionalTypeArgs
  TResult? mapOrNull<TResult extends Object?>({
    TResult? Function(CreateSampleEvent value)? createSample,
    TResult? Function(InitialLoadEvent value)? initialLoad,
    TResult? Function(GetDiaryListEvent value)? getDiaryList,
    TResult? Function(GetDiaryColumnsEvent value)? getDiaryColumns,
    TResult? Function(GetDiaryCellsEvent value)? getDiaryCells,
    TResult? Function(SelectDiaryCellEvent value)? selectDiaryCell,
    TResult? Function(SelectDiaryCellsEvent value)? selectDiaryCells,
    TResult? Function(SelectCapitalCellEvent value)? selectCapitalCell,
    TResult? Function(OnPanUpdateEvent value)? onPanUpdate,
    TResult? Function(StartEditingListEvent value)? startEditingList,
    TResult? Function(ReturnToLoadedEvent value)? returnToLoaded,
    TResult? Function(ReturnToCellsSelectedEvent value)? returnToCellsSelected,
    TResult? Function(UpdateDiaryListNameEvent value)? updateDiaryListName,
    TResult? Function(ChangeDiaryCellEvent value)? changeDiaryCell,
    TResult? Function(ChangeCapitalCellEvent value)? changeCapitalCell,
    TResult? Function(UpdateDiaryCellInFirebaseEvent value)?
        updateDiaryCellInFirebase,
    TResult? Function(ChangeDiaryCellsSettingsEvent value)?
        changeDiaryCellsSettings,
    TResult? Function(ChangeDiaryCellsBordersSettingsEvent value)?
        changeDiaryCellsBordersSettings,
    TResult? Function(ChangeCapitalCellSettingsEvent value)?
        changeCapitalCellSettings,
    TResult? Function(UpdateDiaryCellSettingsInFirebaseEvent value)?
        updateDiaryCellSettingsInFirebase,
    TResult? Function(UpdateCapitalCellSettingsInFirebaseEvent value)?
        updateCapitalCellSettingsInFirebase,
    TResult? Function(UpdateCapitalCellWidthEvent value)?
        updateCapitalCellWidth,
    TResult? Function(UpdateCapitalCellWidthInFirebaseEvent value)?
        updateCapitalCellWidthInFirebase,
    TResult? Function(StartEditingCellsEvent value)? startEditingCells,
    TResult? Function(CreateDiaryColumnEvent value)? createDiaryColumn,
    TResult? Function(DeleteDiaryColumnEvent value)? deleteDiaryColumn,
    TResult? Function(UpdateDiaryListSettingsEvent value)?
        updateDiaryListSettings,
    TResult? Function(ShareThemeEvent value)? shareTheme,
    TResult? Function(StartEditingColorEvent value)? startEditingColor,
    TResult? Function(StartEditingBordersEvent value)? startEditingBorders,
    TResult? Function(StartEditingBordersStyleEvent value)?
        startEditingBorderStyle,
    TResult? Function(TurnBackEditingEvent value)? turnBackEditing,
    TResult? Function(StartColumnDeletingEvent value)? startColumnDeleting,
    TResult? Function(StartColorThemeEditingEvent value)?
        startColorThemeEditing,
    TResult? Function(DeleteColumnsEvent value)? deleteColumns,
    TResult? Function(LoadThemesEvent value)? loadThemes,
    TResult? Function(LoadFromThemeEvent value)? loadFromTheme,
    TResult? Function(TakeThemeEvent value)? takeTheme,
  }) {
    return updateDiaryCellSettingsInFirebase?.call(this);
  }

  @override
  @optionalTypeArgs
  TResult maybeMap<TResult extends Object?>({
    TResult Function(CreateSampleEvent value)? createSample,
    TResult Function(InitialLoadEvent value)? initialLoad,
    TResult Function(GetDiaryListEvent value)? getDiaryList,
    TResult Function(GetDiaryColumnsEvent value)? getDiaryColumns,
    TResult Function(GetDiaryCellsEvent value)? getDiaryCells,
    TResult Function(SelectDiaryCellEvent value)? selectDiaryCell,
    TResult Function(SelectDiaryCellsEvent value)? selectDiaryCells,
    TResult Function(SelectCapitalCellEvent value)? selectCapitalCell,
    TResult Function(OnPanUpdateEvent value)? onPanUpdate,
    TResult Function(StartEditingListEvent value)? startEditingList,
    TResult Function(ReturnToLoadedEvent value)? returnToLoaded,
    TResult Function(ReturnToCellsSelectedEvent value)? returnToCellsSelected,
    TResult Function(UpdateDiaryListNameEvent value)? updateDiaryListName,
    TResult Function(ChangeDiaryCellEvent value)? changeDiaryCell,
    TResult Function(ChangeCapitalCellEvent value)? changeCapitalCell,
    TResult Function(UpdateDiaryCellInFirebaseEvent value)?
        updateDiaryCellInFirebase,
    TResult Function(ChangeDiaryCellsSettingsEvent value)?
        changeDiaryCellsSettings,
    TResult Function(ChangeDiaryCellsBordersSettingsEvent value)?
        changeDiaryCellsBordersSettings,
    TResult Function(ChangeCapitalCellSettingsEvent value)?
        changeCapitalCellSettings,
    TResult Function(UpdateDiaryCellSettingsInFirebaseEvent value)?
        updateDiaryCellSettingsInFirebase,
    TResult Function(UpdateCapitalCellSettingsInFirebaseEvent value)?
        updateCapitalCellSettingsInFirebase,
    TResult Function(UpdateCapitalCellWidthEvent value)? updateCapitalCellWidth,
    TResult Function(UpdateCapitalCellWidthInFirebaseEvent value)?
        updateCapitalCellWidthInFirebase,
    TResult Function(StartEditingCellsEvent value)? startEditingCells,
    TResult Function(CreateDiaryColumnEvent value)? createDiaryColumn,
    TResult Function(DeleteDiaryColumnEvent value)? deleteDiaryColumn,
    TResult Function(UpdateDiaryListSettingsEvent value)?
        updateDiaryListSettings,
    TResult Function(ShareThemeEvent value)? shareTheme,
    TResult Function(StartEditingColorEvent value)? startEditingColor,
    TResult Function(StartEditingBordersEvent value)? startEditingBorders,
    TResult Function(StartEditingBordersStyleEvent value)?
        startEditingBorderStyle,
    TResult Function(TurnBackEditingEvent value)? turnBackEditing,
    TResult Function(StartColumnDeletingEvent value)? startColumnDeleting,
    TResult Function(StartColorThemeEditingEvent value)? startColorThemeEditing,
    TResult Function(DeleteColumnsEvent value)? deleteColumns,
    TResult Function(LoadThemesEvent value)? loadThemes,
    TResult Function(LoadFromThemeEvent value)? loadFromTheme,
    TResult Function(TakeThemeEvent value)? takeTheme,
    required TResult orElse(),
  }) {
    if (updateDiaryCellSettingsInFirebase != null) {
      return updateDiaryCellSettingsInFirebase(this);
    }
    return orElse();
  }
}

abstract class UpdateDiaryCellSettingsInFirebaseEvent
    implements DiaryListEvent {
  const factory UpdateDiaryCellSettingsInFirebaseEvent(
          {required final DiaryCell diaryCell,
          required final int index,
          final DiaryCellTextSettings? newTextSettings,
          final DiaryCellSettings? newSettings}) =
      _$UpdateDiaryCellSettingsInFirebaseEvent;

  DiaryCell get diaryCell;
  int get index;
  DiaryCellTextSettings? get newTextSettings;
  DiaryCellSettings? get newSettings;
  @JsonKey(ignore: true)
  _$$UpdateDiaryCellSettingsInFirebaseEventCopyWith<
          _$UpdateDiaryCellSettingsInFirebaseEvent>
      get copyWith => throw _privateConstructorUsedError;
}

/// @nodoc
abstract class _$$UpdateCapitalCellSettingsInFirebaseEventCopyWith<$Res> {
  factory _$$UpdateCapitalCellSettingsInFirebaseEventCopyWith(
          _$UpdateCapitalCellSettingsInFirebaseEvent value,
          $Res Function(_$UpdateCapitalCellSettingsInFirebaseEvent) then) =
      __$$UpdateCapitalCellSettingsInFirebaseEventCopyWithImpl<$Res>;
  @useResult
  $Res call({DiaryColumnSettings newSettings});
}

/// @nodoc
class __$$UpdateCapitalCellSettingsInFirebaseEventCopyWithImpl<$Res>
    extends _$DiaryListEventCopyWithImpl<$Res,
        _$UpdateCapitalCellSettingsInFirebaseEvent>
    implements _$$UpdateCapitalCellSettingsInFirebaseEventCopyWith<$Res> {
  __$$UpdateCapitalCellSettingsInFirebaseEventCopyWithImpl(
      _$UpdateCapitalCellSettingsInFirebaseEvent _value,
      $Res Function(_$UpdateCapitalCellSettingsInFirebaseEvent) _then)
      : super(_value, _then);

  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? newSettings = null,
  }) {
    return _then(_$UpdateCapitalCellSettingsInFirebaseEvent(
      newSettings: null == newSettings
          ? _value.newSettings
          : newSettings // ignore: cast_nullable_to_non_nullable
              as DiaryColumnSettings,
    ));
  }
}

/// @nodoc

class _$UpdateCapitalCellSettingsInFirebaseEvent
    implements UpdateCapitalCellSettingsInFirebaseEvent {
  const _$UpdateCapitalCellSettingsInFirebaseEvent({required this.newSettings});

  @override
  final DiaryColumnSettings newSettings;

  @override
  String toString() {
    return 'DiaryListEvent.updateCapitalCellSettingsInFirebase(newSettings: $newSettings)';
  }

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$UpdateCapitalCellSettingsInFirebaseEvent &&
            (identical(other.newSettings, newSettings) ||
                other.newSettings == newSettings));
  }

  @override
  int get hashCode => Object.hash(runtimeType, newSettings);

  @JsonKey(ignore: true)
  @override
  @pragma('vm:prefer-inline')
  _$$UpdateCapitalCellSettingsInFirebaseEventCopyWith<
          _$UpdateCapitalCellSettingsInFirebaseEvent>
      get copyWith => __$$UpdateCapitalCellSettingsInFirebaseEventCopyWithImpl<
          _$UpdateCapitalCellSettingsInFirebaseEvent>(this, _$identity);

  @override
  @optionalTypeArgs
  TResult when<TResult extends Object?>({
    required TResult Function() createSample,
    required TResult Function() initialLoad,
    required TResult Function(DateTime date, int delay) getDiaryList,
    required TResult Function(DiaryList diaryList, List<DiaryList> lists)
        getDiaryColumns,
    required TResult Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells,
            List<DiaryList> lists)
        getDiaryCells,
    required TResult Function(DiaryCell diaryCell) selectDiaryCell,
    required TResult Function(List<DiaryCell> diaryCells) selectDiaryCells,
    required TResult Function(CapitalCell capitalCell) selectCapitalCell,
    required TResult Function(
            DiaryCell diaryCell,
            GlobalObjectKey<State<StatefulWidget>> cellKey,
            DragUpdateDetails details,
            double scaleFactor)
        onPanUpdate,
    required TResult Function(DiaryList? selectedList) startEditingList,
    required TResult Function(
            String? newName, String? addedColumnName, int? addedColumnCount)
        returnToLoaded,
    required TResult Function() returnToCellsSelected,
    required TResult Function(DiaryList diaryList, String newName)
        updateDiaryListName,
    required TResult Function(DiaryCell diaryCell, String? textFieldText)
        changeDiaryCell,
    required TResult Function(CapitalCell capitalCell, String? textFieldText)
        changeCapitalCell,
    required TResult Function(DiaryCell diaryCell, String? textFieldText)
        updateDiaryCellInFirebase,
    required TResult Function(
            FontWeightEnum? fontWeight,
            TextDecorationEnum? textDecoration,
            FontStyleEnum? fontStyle,
            double? fontSize,
            String? color,
            HorizontalAlignmentsEnum? horizontalAlignment,
            VerticalAlignmentsEnum? verticalAlignment,
            String? backgroundColor)
        changeDiaryCellsSettings,
    required TResult Function(BordersEditingEnum bordersEditingEnum,
            BordersStyleEnum bordersStyleEnum, Color bordersColor)
        changeDiaryCellsBordersSettings,
    required TResult Function(
            FontWeightEnum? fontWeight,
            TextDecorationEnum? textDecoration,
            FontStyleEnum? fontStyle,
            double? fontSize,
            String? color,
            HorizontalAlignmentsEnum? horizontalAlignment,
            VerticalAlignmentsEnum? verticalAlignment,
            String? backgroundColor,
            BordersStyleEnum? bordersStyleEnum,
            Color? bordersColor)
        changeCapitalCellSettings,
    required TResult Function(
            DiaryCell diaryCell,
            int index,
            DiaryCellTextSettings? newTextSettings,
            DiaryCellSettings? newSettings)
        updateDiaryCellSettingsInFirebase,
    required TResult Function(DiaryColumnSettings newSettings)
        updateCapitalCellSettingsInFirebase,
    required TResult Function(PointerMoveEvent details) updateCapitalCellWidth,
    required TResult Function(PointerUpEvent details)
        updateCapitalCellWidthInFirebase,
    required TResult Function(bool isTextEditing) startEditingCells,
    required TResult Function(DiaryList diaryList, String name,
            int columnsCount, List<DiaryColumn> diaryColumns)
        createDiaryColumn,
    required TResult Function(DiaryList diaryList, String columnId)
        deleteDiaryColumn,
    required TResult Function(DiaryList diaryList, String? themeColor,
            String? themeBorderColor, String? themePanelBackgroundColor)
        updateDiaryListSettings,
    required TResult Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<DiaryCell> diaryCells,
            List<CapitalCell> capitalCells,
            String themeName,
            String description)
        shareTheme,
    required TResult Function() startEditingColor,
    required TResult Function() startEditingBorders,
    required TResult Function() startEditingBorderStyle,
    required TResult Function() turnBackEditing,
    required TResult Function() startColumnDeleting,
    required TResult Function() startColorThemeEditing,
    required TResult Function() deleteColumns,
    required TResult Function() loadThemes,
    required TResult Function(ListTheme listTheme) loadFromTheme,
    required TResult Function(ListTheme listTheme) takeTheme,
  }) {
    return updateCapitalCellSettingsInFirebase(newSettings);
  }

  @override
  @optionalTypeArgs
  TResult? whenOrNull<TResult extends Object?>({
    TResult? Function()? createSample,
    TResult? Function()? initialLoad,
    TResult? Function(DateTime date, int delay)? getDiaryList,
    TResult? Function(DiaryList diaryList, List<DiaryList> lists)?
        getDiaryColumns,
    TResult? Function(DiaryList diaryList, List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells, List<DiaryList> lists)?
        getDiaryCells,
    TResult? Function(DiaryCell diaryCell)? selectDiaryCell,
    TResult? Function(List<DiaryCell> diaryCells)? selectDiaryCells,
    TResult? Function(CapitalCell capitalCell)? selectCapitalCell,
    TResult? Function(
            DiaryCell diaryCell,
            GlobalObjectKey<State<StatefulWidget>> cellKey,
            DragUpdateDetails details,
            double scaleFactor)?
        onPanUpdate,
    TResult? Function(DiaryList? selectedList)? startEditingList,
    TResult? Function(
            String? newName, String? addedColumnName, int? addedColumnCount)?
        returnToLoaded,
    TResult? Function()? returnToCellsSelected,
    TResult? Function(DiaryList diaryList, String newName)? updateDiaryListName,
    TResult? Function(DiaryCell diaryCell, String? textFieldText)?
        changeDiaryCell,
    TResult? Function(CapitalCell capitalCell, String? textFieldText)?
        changeCapitalCell,
    TResult? Function(DiaryCell diaryCell, String? textFieldText)?
        updateDiaryCellInFirebase,
    TResult? Function(
            FontWeightEnum? fontWeight,
            TextDecorationEnum? textDecoration,
            FontStyleEnum? fontStyle,
            double? fontSize,
            String? color,
            HorizontalAlignmentsEnum? horizontalAlignment,
            VerticalAlignmentsEnum? verticalAlignment,
            String? backgroundColor)?
        changeDiaryCellsSettings,
    TResult? Function(BordersEditingEnum bordersEditingEnum,
            BordersStyleEnum bordersStyleEnum, Color bordersColor)?
        changeDiaryCellsBordersSettings,
    TResult? Function(
            FontWeightEnum? fontWeight,
            TextDecorationEnum? textDecoration,
            FontStyleEnum? fontStyle,
            double? fontSize,
            String? color,
            HorizontalAlignmentsEnum? horizontalAlignment,
            VerticalAlignmentsEnum? verticalAlignment,
            String? backgroundColor,
            BordersStyleEnum? bordersStyleEnum,
            Color? bordersColor)?
        changeCapitalCellSettings,
    TResult? Function(
            DiaryCell diaryCell,
            int index,
            DiaryCellTextSettings? newTextSettings,
            DiaryCellSettings? newSettings)?
        updateDiaryCellSettingsInFirebase,
    TResult? Function(DiaryColumnSettings newSettings)?
        updateCapitalCellSettingsInFirebase,
    TResult? Function(PointerMoveEvent details)? updateCapitalCellWidth,
    TResult? Function(PointerUpEvent details)? updateCapitalCellWidthInFirebase,
    TResult? Function(bool isTextEditing)? startEditingCells,
    TResult? Function(DiaryList diaryList, String name, int columnsCount,
            List<DiaryColumn> diaryColumns)?
        createDiaryColumn,
    TResult? Function(DiaryList diaryList, String columnId)? deleteDiaryColumn,
    TResult? Function(DiaryList diaryList, String? themeColor,
            String? themeBorderColor, String? themePanelBackgroundColor)?
        updateDiaryListSettings,
    TResult? Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<DiaryCell> diaryCells,
            List<CapitalCell> capitalCells,
            String themeName,
            String description)?
        shareTheme,
    TResult? Function()? startEditingColor,
    TResult? Function()? startEditingBorders,
    TResult? Function()? startEditingBorderStyle,
    TResult? Function()? turnBackEditing,
    TResult? Function()? startColumnDeleting,
    TResult? Function()? startColorThemeEditing,
    TResult? Function()? deleteColumns,
    TResult? Function()? loadThemes,
    TResult? Function(ListTheme listTheme)? loadFromTheme,
    TResult? Function(ListTheme listTheme)? takeTheme,
  }) {
    return updateCapitalCellSettingsInFirebase?.call(newSettings);
  }

  @override
  @optionalTypeArgs
  TResult maybeWhen<TResult extends Object?>({
    TResult Function()? createSample,
    TResult Function()? initialLoad,
    TResult Function(DateTime date, int delay)? getDiaryList,
    TResult Function(DiaryList diaryList, List<DiaryList> lists)?
        getDiaryColumns,
    TResult Function(DiaryList diaryList, List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells, List<DiaryList> lists)?
        getDiaryCells,
    TResult Function(DiaryCell diaryCell)? selectDiaryCell,
    TResult Function(List<DiaryCell> diaryCells)? selectDiaryCells,
    TResult Function(CapitalCell capitalCell)? selectCapitalCell,
    TResult Function(
            DiaryCell diaryCell,
            GlobalObjectKey<State<StatefulWidget>> cellKey,
            DragUpdateDetails details,
            double scaleFactor)?
        onPanUpdate,
    TResult Function(DiaryList? selectedList)? startEditingList,
    TResult Function(
            String? newName, String? addedColumnName, int? addedColumnCount)?
        returnToLoaded,
    TResult Function()? returnToCellsSelected,
    TResult Function(DiaryList diaryList, String newName)? updateDiaryListName,
    TResult Function(DiaryCell diaryCell, String? textFieldText)?
        changeDiaryCell,
    TResult Function(CapitalCell capitalCell, String? textFieldText)?
        changeCapitalCell,
    TResult Function(DiaryCell diaryCell, String? textFieldText)?
        updateDiaryCellInFirebase,
    TResult Function(
            FontWeightEnum? fontWeight,
            TextDecorationEnum? textDecoration,
            FontStyleEnum? fontStyle,
            double? fontSize,
            String? color,
            HorizontalAlignmentsEnum? horizontalAlignment,
            VerticalAlignmentsEnum? verticalAlignment,
            String? backgroundColor)?
        changeDiaryCellsSettings,
    TResult Function(BordersEditingEnum bordersEditingEnum,
            BordersStyleEnum bordersStyleEnum, Color bordersColor)?
        changeDiaryCellsBordersSettings,
    TResult Function(
            FontWeightEnum? fontWeight,
            TextDecorationEnum? textDecoration,
            FontStyleEnum? fontStyle,
            double? fontSize,
            String? color,
            HorizontalAlignmentsEnum? horizontalAlignment,
            VerticalAlignmentsEnum? verticalAlignment,
            String? backgroundColor,
            BordersStyleEnum? bordersStyleEnum,
            Color? bordersColor)?
        changeCapitalCellSettings,
    TResult Function(
            DiaryCell diaryCell,
            int index,
            DiaryCellTextSettings? newTextSettings,
            DiaryCellSettings? newSettings)?
        updateDiaryCellSettingsInFirebase,
    TResult Function(DiaryColumnSettings newSettings)?
        updateCapitalCellSettingsInFirebase,
    TResult Function(PointerMoveEvent details)? updateCapitalCellWidth,
    TResult Function(PointerUpEvent details)? updateCapitalCellWidthInFirebase,
    TResult Function(bool isTextEditing)? startEditingCells,
    TResult Function(DiaryList diaryList, String name, int columnsCount,
            List<DiaryColumn> diaryColumns)?
        createDiaryColumn,
    TResult Function(DiaryList diaryList, String columnId)? deleteDiaryColumn,
    TResult Function(DiaryList diaryList, String? themeColor,
            String? themeBorderColor, String? themePanelBackgroundColor)?
        updateDiaryListSettings,
    TResult Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<DiaryCell> diaryCells,
            List<CapitalCell> capitalCells,
            String themeName,
            String description)?
        shareTheme,
    TResult Function()? startEditingColor,
    TResult Function()? startEditingBorders,
    TResult Function()? startEditingBorderStyle,
    TResult Function()? turnBackEditing,
    TResult Function()? startColumnDeleting,
    TResult Function()? startColorThemeEditing,
    TResult Function()? deleteColumns,
    TResult Function()? loadThemes,
    TResult Function(ListTheme listTheme)? loadFromTheme,
    TResult Function(ListTheme listTheme)? takeTheme,
    required TResult orElse(),
  }) {
    if (updateCapitalCellSettingsInFirebase != null) {
      return updateCapitalCellSettingsInFirebase(newSettings);
    }
    return orElse();
  }

  @override
  @optionalTypeArgs
  TResult map<TResult extends Object?>({
    required TResult Function(CreateSampleEvent value) createSample,
    required TResult Function(InitialLoadEvent value) initialLoad,
    required TResult Function(GetDiaryListEvent value) getDiaryList,
    required TResult Function(GetDiaryColumnsEvent value) getDiaryColumns,
    required TResult Function(GetDiaryCellsEvent value) getDiaryCells,
    required TResult Function(SelectDiaryCellEvent value) selectDiaryCell,
    required TResult Function(SelectDiaryCellsEvent value) selectDiaryCells,
    required TResult Function(SelectCapitalCellEvent value) selectCapitalCell,
    required TResult Function(OnPanUpdateEvent value) onPanUpdate,
    required TResult Function(StartEditingListEvent value) startEditingList,
    required TResult Function(ReturnToLoadedEvent value) returnToLoaded,
    required TResult Function(ReturnToCellsSelectedEvent value)
        returnToCellsSelected,
    required TResult Function(UpdateDiaryListNameEvent value)
        updateDiaryListName,
    required TResult Function(ChangeDiaryCellEvent value) changeDiaryCell,
    required TResult Function(ChangeCapitalCellEvent value) changeCapitalCell,
    required TResult Function(UpdateDiaryCellInFirebaseEvent value)
        updateDiaryCellInFirebase,
    required TResult Function(ChangeDiaryCellsSettingsEvent value)
        changeDiaryCellsSettings,
    required TResult Function(ChangeDiaryCellsBordersSettingsEvent value)
        changeDiaryCellsBordersSettings,
    required TResult Function(ChangeCapitalCellSettingsEvent value)
        changeCapitalCellSettings,
    required TResult Function(UpdateDiaryCellSettingsInFirebaseEvent value)
        updateDiaryCellSettingsInFirebase,
    required TResult Function(UpdateCapitalCellSettingsInFirebaseEvent value)
        updateCapitalCellSettingsInFirebase,
    required TResult Function(UpdateCapitalCellWidthEvent value)
        updateCapitalCellWidth,
    required TResult Function(UpdateCapitalCellWidthInFirebaseEvent value)
        updateCapitalCellWidthInFirebase,
    required TResult Function(StartEditingCellsEvent value) startEditingCells,
    required TResult Function(CreateDiaryColumnEvent value) createDiaryColumn,
    required TResult Function(DeleteDiaryColumnEvent value) deleteDiaryColumn,
    required TResult Function(UpdateDiaryListSettingsEvent value)
        updateDiaryListSettings,
    required TResult Function(ShareThemeEvent value) shareTheme,
    required TResult Function(StartEditingColorEvent value) startEditingColor,
    required TResult Function(StartEditingBordersEvent value)
        startEditingBorders,
    required TResult Function(StartEditingBordersStyleEvent value)
        startEditingBorderStyle,
    required TResult Function(TurnBackEditingEvent value) turnBackEditing,
    required TResult Function(StartColumnDeletingEvent value)
        startColumnDeleting,
    required TResult Function(StartColorThemeEditingEvent value)
        startColorThemeEditing,
    required TResult Function(DeleteColumnsEvent value) deleteColumns,
    required TResult Function(LoadThemesEvent value) loadThemes,
    required TResult Function(LoadFromThemeEvent value) loadFromTheme,
    required TResult Function(TakeThemeEvent value) takeTheme,
  }) {
    return updateCapitalCellSettingsInFirebase(this);
  }

  @override
  @optionalTypeArgs
  TResult? mapOrNull<TResult extends Object?>({
    TResult? Function(CreateSampleEvent value)? createSample,
    TResult? Function(InitialLoadEvent value)? initialLoad,
    TResult? Function(GetDiaryListEvent value)? getDiaryList,
    TResult? Function(GetDiaryColumnsEvent value)? getDiaryColumns,
    TResult? Function(GetDiaryCellsEvent value)? getDiaryCells,
    TResult? Function(SelectDiaryCellEvent value)? selectDiaryCell,
    TResult? Function(SelectDiaryCellsEvent value)? selectDiaryCells,
    TResult? Function(SelectCapitalCellEvent value)? selectCapitalCell,
    TResult? Function(OnPanUpdateEvent value)? onPanUpdate,
    TResult? Function(StartEditingListEvent value)? startEditingList,
    TResult? Function(ReturnToLoadedEvent value)? returnToLoaded,
    TResult? Function(ReturnToCellsSelectedEvent value)? returnToCellsSelected,
    TResult? Function(UpdateDiaryListNameEvent value)? updateDiaryListName,
    TResult? Function(ChangeDiaryCellEvent value)? changeDiaryCell,
    TResult? Function(ChangeCapitalCellEvent value)? changeCapitalCell,
    TResult? Function(UpdateDiaryCellInFirebaseEvent value)?
        updateDiaryCellInFirebase,
    TResult? Function(ChangeDiaryCellsSettingsEvent value)?
        changeDiaryCellsSettings,
    TResult? Function(ChangeDiaryCellsBordersSettingsEvent value)?
        changeDiaryCellsBordersSettings,
    TResult? Function(ChangeCapitalCellSettingsEvent value)?
        changeCapitalCellSettings,
    TResult? Function(UpdateDiaryCellSettingsInFirebaseEvent value)?
        updateDiaryCellSettingsInFirebase,
    TResult? Function(UpdateCapitalCellSettingsInFirebaseEvent value)?
        updateCapitalCellSettingsInFirebase,
    TResult? Function(UpdateCapitalCellWidthEvent value)?
        updateCapitalCellWidth,
    TResult? Function(UpdateCapitalCellWidthInFirebaseEvent value)?
        updateCapitalCellWidthInFirebase,
    TResult? Function(StartEditingCellsEvent value)? startEditingCells,
    TResult? Function(CreateDiaryColumnEvent value)? createDiaryColumn,
    TResult? Function(DeleteDiaryColumnEvent value)? deleteDiaryColumn,
    TResult? Function(UpdateDiaryListSettingsEvent value)?
        updateDiaryListSettings,
    TResult? Function(ShareThemeEvent value)? shareTheme,
    TResult? Function(StartEditingColorEvent value)? startEditingColor,
    TResult? Function(StartEditingBordersEvent value)? startEditingBorders,
    TResult? Function(StartEditingBordersStyleEvent value)?
        startEditingBorderStyle,
    TResult? Function(TurnBackEditingEvent value)? turnBackEditing,
    TResult? Function(StartColumnDeletingEvent value)? startColumnDeleting,
    TResult? Function(StartColorThemeEditingEvent value)?
        startColorThemeEditing,
    TResult? Function(DeleteColumnsEvent value)? deleteColumns,
    TResult? Function(LoadThemesEvent value)? loadThemes,
    TResult? Function(LoadFromThemeEvent value)? loadFromTheme,
    TResult? Function(TakeThemeEvent value)? takeTheme,
  }) {
    return updateCapitalCellSettingsInFirebase?.call(this);
  }

  @override
  @optionalTypeArgs
  TResult maybeMap<TResult extends Object?>({
    TResult Function(CreateSampleEvent value)? createSample,
    TResult Function(InitialLoadEvent value)? initialLoad,
    TResult Function(GetDiaryListEvent value)? getDiaryList,
    TResult Function(GetDiaryColumnsEvent value)? getDiaryColumns,
    TResult Function(GetDiaryCellsEvent value)? getDiaryCells,
    TResult Function(SelectDiaryCellEvent value)? selectDiaryCell,
    TResult Function(SelectDiaryCellsEvent value)? selectDiaryCells,
    TResult Function(SelectCapitalCellEvent value)? selectCapitalCell,
    TResult Function(OnPanUpdateEvent value)? onPanUpdate,
    TResult Function(StartEditingListEvent value)? startEditingList,
    TResult Function(ReturnToLoadedEvent value)? returnToLoaded,
    TResult Function(ReturnToCellsSelectedEvent value)? returnToCellsSelected,
    TResult Function(UpdateDiaryListNameEvent value)? updateDiaryListName,
    TResult Function(ChangeDiaryCellEvent value)? changeDiaryCell,
    TResult Function(ChangeCapitalCellEvent value)? changeCapitalCell,
    TResult Function(UpdateDiaryCellInFirebaseEvent value)?
        updateDiaryCellInFirebase,
    TResult Function(ChangeDiaryCellsSettingsEvent value)?
        changeDiaryCellsSettings,
    TResult Function(ChangeDiaryCellsBordersSettingsEvent value)?
        changeDiaryCellsBordersSettings,
    TResult Function(ChangeCapitalCellSettingsEvent value)?
        changeCapitalCellSettings,
    TResult Function(UpdateDiaryCellSettingsInFirebaseEvent value)?
        updateDiaryCellSettingsInFirebase,
    TResult Function(UpdateCapitalCellSettingsInFirebaseEvent value)?
        updateCapitalCellSettingsInFirebase,
    TResult Function(UpdateCapitalCellWidthEvent value)? updateCapitalCellWidth,
    TResult Function(UpdateCapitalCellWidthInFirebaseEvent value)?
        updateCapitalCellWidthInFirebase,
    TResult Function(StartEditingCellsEvent value)? startEditingCells,
    TResult Function(CreateDiaryColumnEvent value)? createDiaryColumn,
    TResult Function(DeleteDiaryColumnEvent value)? deleteDiaryColumn,
    TResult Function(UpdateDiaryListSettingsEvent value)?
        updateDiaryListSettings,
    TResult Function(ShareThemeEvent value)? shareTheme,
    TResult Function(StartEditingColorEvent value)? startEditingColor,
    TResult Function(StartEditingBordersEvent value)? startEditingBorders,
    TResult Function(StartEditingBordersStyleEvent value)?
        startEditingBorderStyle,
    TResult Function(TurnBackEditingEvent value)? turnBackEditing,
    TResult Function(StartColumnDeletingEvent value)? startColumnDeleting,
    TResult Function(StartColorThemeEditingEvent value)? startColorThemeEditing,
    TResult Function(DeleteColumnsEvent value)? deleteColumns,
    TResult Function(LoadThemesEvent value)? loadThemes,
    TResult Function(LoadFromThemeEvent value)? loadFromTheme,
    TResult Function(TakeThemeEvent value)? takeTheme,
    required TResult orElse(),
  }) {
    if (updateCapitalCellSettingsInFirebase != null) {
      return updateCapitalCellSettingsInFirebase(this);
    }
    return orElse();
  }
}

abstract class UpdateCapitalCellSettingsInFirebaseEvent
    implements DiaryListEvent {
  const factory UpdateCapitalCellSettingsInFirebaseEvent(
          {required final DiaryColumnSettings newSettings}) =
      _$UpdateCapitalCellSettingsInFirebaseEvent;

  DiaryColumnSettings get newSettings;
  @JsonKey(ignore: true)
  _$$UpdateCapitalCellSettingsInFirebaseEventCopyWith<
          _$UpdateCapitalCellSettingsInFirebaseEvent>
      get copyWith => throw _privateConstructorUsedError;
}

/// @nodoc
abstract class _$$UpdateCapitalCellWidthEventCopyWith<$Res> {
  factory _$$UpdateCapitalCellWidthEventCopyWith(
          _$UpdateCapitalCellWidthEvent value,
          $Res Function(_$UpdateCapitalCellWidthEvent) then) =
      __$$UpdateCapitalCellWidthEventCopyWithImpl<$Res>;
  @useResult
  $Res call({PointerMoveEvent details});
}

/// @nodoc
class __$$UpdateCapitalCellWidthEventCopyWithImpl<$Res>
    extends _$DiaryListEventCopyWithImpl<$Res, _$UpdateCapitalCellWidthEvent>
    implements _$$UpdateCapitalCellWidthEventCopyWith<$Res> {
  __$$UpdateCapitalCellWidthEventCopyWithImpl(
      _$UpdateCapitalCellWidthEvent _value,
      $Res Function(_$UpdateCapitalCellWidthEvent) _then)
      : super(_value, _then);

  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? details = null,
  }) {
    return _then(_$UpdateCapitalCellWidthEvent(
      details: null == details
          ? _value.details
          : details // ignore: cast_nullable_to_non_nullable
              as PointerMoveEvent,
    ));
  }
}

/// @nodoc

class _$UpdateCapitalCellWidthEvent implements UpdateCapitalCellWidthEvent {
  const _$UpdateCapitalCellWidthEvent({required this.details});

  @override
  final PointerMoveEvent details;

  @override
  String toString() {
    return 'DiaryListEvent.updateCapitalCellWidth(details: $details)';
  }

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$UpdateCapitalCellWidthEvent &&
            (identical(other.details, details) || other.details == details));
  }

  @override
  int get hashCode => Object.hash(runtimeType, details);

  @JsonKey(ignore: true)
  @override
  @pragma('vm:prefer-inline')
  _$$UpdateCapitalCellWidthEventCopyWith<_$UpdateCapitalCellWidthEvent>
      get copyWith => __$$UpdateCapitalCellWidthEventCopyWithImpl<
          _$UpdateCapitalCellWidthEvent>(this, _$identity);

  @override
  @optionalTypeArgs
  TResult when<TResult extends Object?>({
    required TResult Function() createSample,
    required TResult Function() initialLoad,
    required TResult Function(DateTime date, int delay) getDiaryList,
    required TResult Function(DiaryList diaryList, List<DiaryList> lists)
        getDiaryColumns,
    required TResult Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells,
            List<DiaryList> lists)
        getDiaryCells,
    required TResult Function(DiaryCell diaryCell) selectDiaryCell,
    required TResult Function(List<DiaryCell> diaryCells) selectDiaryCells,
    required TResult Function(CapitalCell capitalCell) selectCapitalCell,
    required TResult Function(
            DiaryCell diaryCell,
            GlobalObjectKey<State<StatefulWidget>> cellKey,
            DragUpdateDetails details,
            double scaleFactor)
        onPanUpdate,
    required TResult Function(DiaryList? selectedList) startEditingList,
    required TResult Function(
            String? newName, String? addedColumnName, int? addedColumnCount)
        returnToLoaded,
    required TResult Function() returnToCellsSelected,
    required TResult Function(DiaryList diaryList, String newName)
        updateDiaryListName,
    required TResult Function(DiaryCell diaryCell, String? textFieldText)
        changeDiaryCell,
    required TResult Function(CapitalCell capitalCell, String? textFieldText)
        changeCapitalCell,
    required TResult Function(DiaryCell diaryCell, String? textFieldText)
        updateDiaryCellInFirebase,
    required TResult Function(
            FontWeightEnum? fontWeight,
            TextDecorationEnum? textDecoration,
            FontStyleEnum? fontStyle,
            double? fontSize,
            String? color,
            HorizontalAlignmentsEnum? horizontalAlignment,
            VerticalAlignmentsEnum? verticalAlignment,
            String? backgroundColor)
        changeDiaryCellsSettings,
    required TResult Function(BordersEditingEnum bordersEditingEnum,
            BordersStyleEnum bordersStyleEnum, Color bordersColor)
        changeDiaryCellsBordersSettings,
    required TResult Function(
            FontWeightEnum? fontWeight,
            TextDecorationEnum? textDecoration,
            FontStyleEnum? fontStyle,
            double? fontSize,
            String? color,
            HorizontalAlignmentsEnum? horizontalAlignment,
            VerticalAlignmentsEnum? verticalAlignment,
            String? backgroundColor,
            BordersStyleEnum? bordersStyleEnum,
            Color? bordersColor)
        changeCapitalCellSettings,
    required TResult Function(
            DiaryCell diaryCell,
            int index,
            DiaryCellTextSettings? newTextSettings,
            DiaryCellSettings? newSettings)
        updateDiaryCellSettingsInFirebase,
    required TResult Function(DiaryColumnSettings newSettings)
        updateCapitalCellSettingsInFirebase,
    required TResult Function(PointerMoveEvent details) updateCapitalCellWidth,
    required TResult Function(PointerUpEvent details)
        updateCapitalCellWidthInFirebase,
    required TResult Function(bool isTextEditing) startEditingCells,
    required TResult Function(DiaryList diaryList, String name,
            int columnsCount, List<DiaryColumn> diaryColumns)
        createDiaryColumn,
    required TResult Function(DiaryList diaryList, String columnId)
        deleteDiaryColumn,
    required TResult Function(DiaryList diaryList, String? themeColor,
            String? themeBorderColor, String? themePanelBackgroundColor)
        updateDiaryListSettings,
    required TResult Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<DiaryCell> diaryCells,
            List<CapitalCell> capitalCells,
            String themeName,
            String description)
        shareTheme,
    required TResult Function() startEditingColor,
    required TResult Function() startEditingBorders,
    required TResult Function() startEditingBorderStyle,
    required TResult Function() turnBackEditing,
    required TResult Function() startColumnDeleting,
    required TResult Function() startColorThemeEditing,
    required TResult Function() deleteColumns,
    required TResult Function() loadThemes,
    required TResult Function(ListTheme listTheme) loadFromTheme,
    required TResult Function(ListTheme listTheme) takeTheme,
  }) {
    return updateCapitalCellWidth(details);
  }

  @override
  @optionalTypeArgs
  TResult? whenOrNull<TResult extends Object?>({
    TResult? Function()? createSample,
    TResult? Function()? initialLoad,
    TResult? Function(DateTime date, int delay)? getDiaryList,
    TResult? Function(DiaryList diaryList, List<DiaryList> lists)?
        getDiaryColumns,
    TResult? Function(DiaryList diaryList, List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells, List<DiaryList> lists)?
        getDiaryCells,
    TResult? Function(DiaryCell diaryCell)? selectDiaryCell,
    TResult? Function(List<DiaryCell> diaryCells)? selectDiaryCells,
    TResult? Function(CapitalCell capitalCell)? selectCapitalCell,
    TResult? Function(
            DiaryCell diaryCell,
            GlobalObjectKey<State<StatefulWidget>> cellKey,
            DragUpdateDetails details,
            double scaleFactor)?
        onPanUpdate,
    TResult? Function(DiaryList? selectedList)? startEditingList,
    TResult? Function(
            String? newName, String? addedColumnName, int? addedColumnCount)?
        returnToLoaded,
    TResult? Function()? returnToCellsSelected,
    TResult? Function(DiaryList diaryList, String newName)? updateDiaryListName,
    TResult? Function(DiaryCell diaryCell, String? textFieldText)?
        changeDiaryCell,
    TResult? Function(CapitalCell capitalCell, String? textFieldText)?
        changeCapitalCell,
    TResult? Function(DiaryCell diaryCell, String? textFieldText)?
        updateDiaryCellInFirebase,
    TResult? Function(
            FontWeightEnum? fontWeight,
            TextDecorationEnum? textDecoration,
            FontStyleEnum? fontStyle,
            double? fontSize,
            String? color,
            HorizontalAlignmentsEnum? horizontalAlignment,
            VerticalAlignmentsEnum? verticalAlignment,
            String? backgroundColor)?
        changeDiaryCellsSettings,
    TResult? Function(BordersEditingEnum bordersEditingEnum,
            BordersStyleEnum bordersStyleEnum, Color bordersColor)?
        changeDiaryCellsBordersSettings,
    TResult? Function(
            FontWeightEnum? fontWeight,
            TextDecorationEnum? textDecoration,
            FontStyleEnum? fontStyle,
            double? fontSize,
            String? color,
            HorizontalAlignmentsEnum? horizontalAlignment,
            VerticalAlignmentsEnum? verticalAlignment,
            String? backgroundColor,
            BordersStyleEnum? bordersStyleEnum,
            Color? bordersColor)?
        changeCapitalCellSettings,
    TResult? Function(
            DiaryCell diaryCell,
            int index,
            DiaryCellTextSettings? newTextSettings,
            DiaryCellSettings? newSettings)?
        updateDiaryCellSettingsInFirebase,
    TResult? Function(DiaryColumnSettings newSettings)?
        updateCapitalCellSettingsInFirebase,
    TResult? Function(PointerMoveEvent details)? updateCapitalCellWidth,
    TResult? Function(PointerUpEvent details)? updateCapitalCellWidthInFirebase,
    TResult? Function(bool isTextEditing)? startEditingCells,
    TResult? Function(DiaryList diaryList, String name, int columnsCount,
            List<DiaryColumn> diaryColumns)?
        createDiaryColumn,
    TResult? Function(DiaryList diaryList, String columnId)? deleteDiaryColumn,
    TResult? Function(DiaryList diaryList, String? themeColor,
            String? themeBorderColor, String? themePanelBackgroundColor)?
        updateDiaryListSettings,
    TResult? Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<DiaryCell> diaryCells,
            List<CapitalCell> capitalCells,
            String themeName,
            String description)?
        shareTheme,
    TResult? Function()? startEditingColor,
    TResult? Function()? startEditingBorders,
    TResult? Function()? startEditingBorderStyle,
    TResult? Function()? turnBackEditing,
    TResult? Function()? startColumnDeleting,
    TResult? Function()? startColorThemeEditing,
    TResult? Function()? deleteColumns,
    TResult? Function()? loadThemes,
    TResult? Function(ListTheme listTheme)? loadFromTheme,
    TResult? Function(ListTheme listTheme)? takeTheme,
  }) {
    return updateCapitalCellWidth?.call(details);
  }

  @override
  @optionalTypeArgs
  TResult maybeWhen<TResult extends Object?>({
    TResult Function()? createSample,
    TResult Function()? initialLoad,
    TResult Function(DateTime date, int delay)? getDiaryList,
    TResult Function(DiaryList diaryList, List<DiaryList> lists)?
        getDiaryColumns,
    TResult Function(DiaryList diaryList, List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells, List<DiaryList> lists)?
        getDiaryCells,
    TResult Function(DiaryCell diaryCell)? selectDiaryCell,
    TResult Function(List<DiaryCell> diaryCells)? selectDiaryCells,
    TResult Function(CapitalCell capitalCell)? selectCapitalCell,
    TResult Function(
            DiaryCell diaryCell,
            GlobalObjectKey<State<StatefulWidget>> cellKey,
            DragUpdateDetails details,
            double scaleFactor)?
        onPanUpdate,
    TResult Function(DiaryList? selectedList)? startEditingList,
    TResult Function(
            String? newName, String? addedColumnName, int? addedColumnCount)?
        returnToLoaded,
    TResult Function()? returnToCellsSelected,
    TResult Function(DiaryList diaryList, String newName)? updateDiaryListName,
    TResult Function(DiaryCell diaryCell, String? textFieldText)?
        changeDiaryCell,
    TResult Function(CapitalCell capitalCell, String? textFieldText)?
        changeCapitalCell,
    TResult Function(DiaryCell diaryCell, String? textFieldText)?
        updateDiaryCellInFirebase,
    TResult Function(
            FontWeightEnum? fontWeight,
            TextDecorationEnum? textDecoration,
            FontStyleEnum? fontStyle,
            double? fontSize,
            String? color,
            HorizontalAlignmentsEnum? horizontalAlignment,
            VerticalAlignmentsEnum? verticalAlignment,
            String? backgroundColor)?
        changeDiaryCellsSettings,
    TResult Function(BordersEditingEnum bordersEditingEnum,
            BordersStyleEnum bordersStyleEnum, Color bordersColor)?
        changeDiaryCellsBordersSettings,
    TResult Function(
            FontWeightEnum? fontWeight,
            TextDecorationEnum? textDecoration,
            FontStyleEnum? fontStyle,
            double? fontSize,
            String? color,
            HorizontalAlignmentsEnum? horizontalAlignment,
            VerticalAlignmentsEnum? verticalAlignment,
            String? backgroundColor,
            BordersStyleEnum? bordersStyleEnum,
            Color? bordersColor)?
        changeCapitalCellSettings,
    TResult Function(
            DiaryCell diaryCell,
            int index,
            DiaryCellTextSettings? newTextSettings,
            DiaryCellSettings? newSettings)?
        updateDiaryCellSettingsInFirebase,
    TResult Function(DiaryColumnSettings newSettings)?
        updateCapitalCellSettingsInFirebase,
    TResult Function(PointerMoveEvent details)? updateCapitalCellWidth,
    TResult Function(PointerUpEvent details)? updateCapitalCellWidthInFirebase,
    TResult Function(bool isTextEditing)? startEditingCells,
    TResult Function(DiaryList diaryList, String name, int columnsCount,
            List<DiaryColumn> diaryColumns)?
        createDiaryColumn,
    TResult Function(DiaryList diaryList, String columnId)? deleteDiaryColumn,
    TResult Function(DiaryList diaryList, String? themeColor,
            String? themeBorderColor, String? themePanelBackgroundColor)?
        updateDiaryListSettings,
    TResult Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<DiaryCell> diaryCells,
            List<CapitalCell> capitalCells,
            String themeName,
            String description)?
        shareTheme,
    TResult Function()? startEditingColor,
    TResult Function()? startEditingBorders,
    TResult Function()? startEditingBorderStyle,
    TResult Function()? turnBackEditing,
    TResult Function()? startColumnDeleting,
    TResult Function()? startColorThemeEditing,
    TResult Function()? deleteColumns,
    TResult Function()? loadThemes,
    TResult Function(ListTheme listTheme)? loadFromTheme,
    TResult Function(ListTheme listTheme)? takeTheme,
    required TResult orElse(),
  }) {
    if (updateCapitalCellWidth != null) {
      return updateCapitalCellWidth(details);
    }
    return orElse();
  }

  @override
  @optionalTypeArgs
  TResult map<TResult extends Object?>({
    required TResult Function(CreateSampleEvent value) createSample,
    required TResult Function(InitialLoadEvent value) initialLoad,
    required TResult Function(GetDiaryListEvent value) getDiaryList,
    required TResult Function(GetDiaryColumnsEvent value) getDiaryColumns,
    required TResult Function(GetDiaryCellsEvent value) getDiaryCells,
    required TResult Function(SelectDiaryCellEvent value) selectDiaryCell,
    required TResult Function(SelectDiaryCellsEvent value) selectDiaryCells,
    required TResult Function(SelectCapitalCellEvent value) selectCapitalCell,
    required TResult Function(OnPanUpdateEvent value) onPanUpdate,
    required TResult Function(StartEditingListEvent value) startEditingList,
    required TResult Function(ReturnToLoadedEvent value) returnToLoaded,
    required TResult Function(ReturnToCellsSelectedEvent value)
        returnToCellsSelected,
    required TResult Function(UpdateDiaryListNameEvent value)
        updateDiaryListName,
    required TResult Function(ChangeDiaryCellEvent value) changeDiaryCell,
    required TResult Function(ChangeCapitalCellEvent value) changeCapitalCell,
    required TResult Function(UpdateDiaryCellInFirebaseEvent value)
        updateDiaryCellInFirebase,
    required TResult Function(ChangeDiaryCellsSettingsEvent value)
        changeDiaryCellsSettings,
    required TResult Function(ChangeDiaryCellsBordersSettingsEvent value)
        changeDiaryCellsBordersSettings,
    required TResult Function(ChangeCapitalCellSettingsEvent value)
        changeCapitalCellSettings,
    required TResult Function(UpdateDiaryCellSettingsInFirebaseEvent value)
        updateDiaryCellSettingsInFirebase,
    required TResult Function(UpdateCapitalCellSettingsInFirebaseEvent value)
        updateCapitalCellSettingsInFirebase,
    required TResult Function(UpdateCapitalCellWidthEvent value)
        updateCapitalCellWidth,
    required TResult Function(UpdateCapitalCellWidthInFirebaseEvent value)
        updateCapitalCellWidthInFirebase,
    required TResult Function(StartEditingCellsEvent value) startEditingCells,
    required TResult Function(CreateDiaryColumnEvent value) createDiaryColumn,
    required TResult Function(DeleteDiaryColumnEvent value) deleteDiaryColumn,
    required TResult Function(UpdateDiaryListSettingsEvent value)
        updateDiaryListSettings,
    required TResult Function(ShareThemeEvent value) shareTheme,
    required TResult Function(StartEditingColorEvent value) startEditingColor,
    required TResult Function(StartEditingBordersEvent value)
        startEditingBorders,
    required TResult Function(StartEditingBordersStyleEvent value)
        startEditingBorderStyle,
    required TResult Function(TurnBackEditingEvent value) turnBackEditing,
    required TResult Function(StartColumnDeletingEvent value)
        startColumnDeleting,
    required TResult Function(StartColorThemeEditingEvent value)
        startColorThemeEditing,
    required TResult Function(DeleteColumnsEvent value) deleteColumns,
    required TResult Function(LoadThemesEvent value) loadThemes,
    required TResult Function(LoadFromThemeEvent value) loadFromTheme,
    required TResult Function(TakeThemeEvent value) takeTheme,
  }) {
    return updateCapitalCellWidth(this);
  }

  @override
  @optionalTypeArgs
  TResult? mapOrNull<TResult extends Object?>({
    TResult? Function(CreateSampleEvent value)? createSample,
    TResult? Function(InitialLoadEvent value)? initialLoad,
    TResult? Function(GetDiaryListEvent value)? getDiaryList,
    TResult? Function(GetDiaryColumnsEvent value)? getDiaryColumns,
    TResult? Function(GetDiaryCellsEvent value)? getDiaryCells,
    TResult? Function(SelectDiaryCellEvent value)? selectDiaryCell,
    TResult? Function(SelectDiaryCellsEvent value)? selectDiaryCells,
    TResult? Function(SelectCapitalCellEvent value)? selectCapitalCell,
    TResult? Function(OnPanUpdateEvent value)? onPanUpdate,
    TResult? Function(StartEditingListEvent value)? startEditingList,
    TResult? Function(ReturnToLoadedEvent value)? returnToLoaded,
    TResult? Function(ReturnToCellsSelectedEvent value)? returnToCellsSelected,
    TResult? Function(UpdateDiaryListNameEvent value)? updateDiaryListName,
    TResult? Function(ChangeDiaryCellEvent value)? changeDiaryCell,
    TResult? Function(ChangeCapitalCellEvent value)? changeCapitalCell,
    TResult? Function(UpdateDiaryCellInFirebaseEvent value)?
        updateDiaryCellInFirebase,
    TResult? Function(ChangeDiaryCellsSettingsEvent value)?
        changeDiaryCellsSettings,
    TResult? Function(ChangeDiaryCellsBordersSettingsEvent value)?
        changeDiaryCellsBordersSettings,
    TResult? Function(ChangeCapitalCellSettingsEvent value)?
        changeCapitalCellSettings,
    TResult? Function(UpdateDiaryCellSettingsInFirebaseEvent value)?
        updateDiaryCellSettingsInFirebase,
    TResult? Function(UpdateCapitalCellSettingsInFirebaseEvent value)?
        updateCapitalCellSettingsInFirebase,
    TResult? Function(UpdateCapitalCellWidthEvent value)?
        updateCapitalCellWidth,
    TResult? Function(UpdateCapitalCellWidthInFirebaseEvent value)?
        updateCapitalCellWidthInFirebase,
    TResult? Function(StartEditingCellsEvent value)? startEditingCells,
    TResult? Function(CreateDiaryColumnEvent value)? createDiaryColumn,
    TResult? Function(DeleteDiaryColumnEvent value)? deleteDiaryColumn,
    TResult? Function(UpdateDiaryListSettingsEvent value)?
        updateDiaryListSettings,
    TResult? Function(ShareThemeEvent value)? shareTheme,
    TResult? Function(StartEditingColorEvent value)? startEditingColor,
    TResult? Function(StartEditingBordersEvent value)? startEditingBorders,
    TResult? Function(StartEditingBordersStyleEvent value)?
        startEditingBorderStyle,
    TResult? Function(TurnBackEditingEvent value)? turnBackEditing,
    TResult? Function(StartColumnDeletingEvent value)? startColumnDeleting,
    TResult? Function(StartColorThemeEditingEvent value)?
        startColorThemeEditing,
    TResult? Function(DeleteColumnsEvent value)? deleteColumns,
    TResult? Function(LoadThemesEvent value)? loadThemes,
    TResult? Function(LoadFromThemeEvent value)? loadFromTheme,
    TResult? Function(TakeThemeEvent value)? takeTheme,
  }) {
    return updateCapitalCellWidth?.call(this);
  }

  @override
  @optionalTypeArgs
  TResult maybeMap<TResult extends Object?>({
    TResult Function(CreateSampleEvent value)? createSample,
    TResult Function(InitialLoadEvent value)? initialLoad,
    TResult Function(GetDiaryListEvent value)? getDiaryList,
    TResult Function(GetDiaryColumnsEvent value)? getDiaryColumns,
    TResult Function(GetDiaryCellsEvent value)? getDiaryCells,
    TResult Function(SelectDiaryCellEvent value)? selectDiaryCell,
    TResult Function(SelectDiaryCellsEvent value)? selectDiaryCells,
    TResult Function(SelectCapitalCellEvent value)? selectCapitalCell,
    TResult Function(OnPanUpdateEvent value)? onPanUpdate,
    TResult Function(StartEditingListEvent value)? startEditingList,
    TResult Function(ReturnToLoadedEvent value)? returnToLoaded,
    TResult Function(ReturnToCellsSelectedEvent value)? returnToCellsSelected,
    TResult Function(UpdateDiaryListNameEvent value)? updateDiaryListName,
    TResult Function(ChangeDiaryCellEvent value)? changeDiaryCell,
    TResult Function(ChangeCapitalCellEvent value)? changeCapitalCell,
    TResult Function(UpdateDiaryCellInFirebaseEvent value)?
        updateDiaryCellInFirebase,
    TResult Function(ChangeDiaryCellsSettingsEvent value)?
        changeDiaryCellsSettings,
    TResult Function(ChangeDiaryCellsBordersSettingsEvent value)?
        changeDiaryCellsBordersSettings,
    TResult Function(ChangeCapitalCellSettingsEvent value)?
        changeCapitalCellSettings,
    TResult Function(UpdateDiaryCellSettingsInFirebaseEvent value)?
        updateDiaryCellSettingsInFirebase,
    TResult Function(UpdateCapitalCellSettingsInFirebaseEvent value)?
        updateCapitalCellSettingsInFirebase,
    TResult Function(UpdateCapitalCellWidthEvent value)? updateCapitalCellWidth,
    TResult Function(UpdateCapitalCellWidthInFirebaseEvent value)?
        updateCapitalCellWidthInFirebase,
    TResult Function(StartEditingCellsEvent value)? startEditingCells,
    TResult Function(CreateDiaryColumnEvent value)? createDiaryColumn,
    TResult Function(DeleteDiaryColumnEvent value)? deleteDiaryColumn,
    TResult Function(UpdateDiaryListSettingsEvent value)?
        updateDiaryListSettings,
    TResult Function(ShareThemeEvent value)? shareTheme,
    TResult Function(StartEditingColorEvent value)? startEditingColor,
    TResult Function(StartEditingBordersEvent value)? startEditingBorders,
    TResult Function(StartEditingBordersStyleEvent value)?
        startEditingBorderStyle,
    TResult Function(TurnBackEditingEvent value)? turnBackEditing,
    TResult Function(StartColumnDeletingEvent value)? startColumnDeleting,
    TResult Function(StartColorThemeEditingEvent value)? startColorThemeEditing,
    TResult Function(DeleteColumnsEvent value)? deleteColumns,
    TResult Function(LoadThemesEvent value)? loadThemes,
    TResult Function(LoadFromThemeEvent value)? loadFromTheme,
    TResult Function(TakeThemeEvent value)? takeTheme,
    required TResult orElse(),
  }) {
    if (updateCapitalCellWidth != null) {
      return updateCapitalCellWidth(this);
    }
    return orElse();
  }
}

abstract class UpdateCapitalCellWidthEvent implements DiaryListEvent {
  const factory UpdateCapitalCellWidthEvent(
          {required final PointerMoveEvent details}) =
      _$UpdateCapitalCellWidthEvent;

  PointerMoveEvent get details;
  @JsonKey(ignore: true)
  _$$UpdateCapitalCellWidthEventCopyWith<_$UpdateCapitalCellWidthEvent>
      get copyWith => throw _privateConstructorUsedError;
}

/// @nodoc
abstract class _$$UpdateCapitalCellWidthInFirebaseEventCopyWith<$Res> {
  factory _$$UpdateCapitalCellWidthInFirebaseEventCopyWith(
          _$UpdateCapitalCellWidthInFirebaseEvent value,
          $Res Function(_$UpdateCapitalCellWidthInFirebaseEvent) then) =
      __$$UpdateCapitalCellWidthInFirebaseEventCopyWithImpl<$Res>;
  @useResult
  $Res call({PointerUpEvent details});
}

/// @nodoc
class __$$UpdateCapitalCellWidthInFirebaseEventCopyWithImpl<$Res>
    extends _$DiaryListEventCopyWithImpl<$Res,
        _$UpdateCapitalCellWidthInFirebaseEvent>
    implements _$$UpdateCapitalCellWidthInFirebaseEventCopyWith<$Res> {
  __$$UpdateCapitalCellWidthInFirebaseEventCopyWithImpl(
      _$UpdateCapitalCellWidthInFirebaseEvent _value,
      $Res Function(_$UpdateCapitalCellWidthInFirebaseEvent) _then)
      : super(_value, _then);

  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? details = null,
  }) {
    return _then(_$UpdateCapitalCellWidthInFirebaseEvent(
      details: null == details
          ? _value.details
          : details // ignore: cast_nullable_to_non_nullable
              as PointerUpEvent,
    ));
  }
}

/// @nodoc

class _$UpdateCapitalCellWidthInFirebaseEvent
    implements UpdateCapitalCellWidthInFirebaseEvent {
  const _$UpdateCapitalCellWidthInFirebaseEvent({required this.details});

  @override
  final PointerUpEvent details;

  @override
  String toString() {
    return 'DiaryListEvent.updateCapitalCellWidthInFirebase(details: $details)';
  }

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$UpdateCapitalCellWidthInFirebaseEvent &&
            (identical(other.details, details) || other.details == details));
  }

  @override
  int get hashCode => Object.hash(runtimeType, details);

  @JsonKey(ignore: true)
  @override
  @pragma('vm:prefer-inline')
  _$$UpdateCapitalCellWidthInFirebaseEventCopyWith<
          _$UpdateCapitalCellWidthInFirebaseEvent>
      get copyWith => __$$UpdateCapitalCellWidthInFirebaseEventCopyWithImpl<
          _$UpdateCapitalCellWidthInFirebaseEvent>(this, _$identity);

  @override
  @optionalTypeArgs
  TResult when<TResult extends Object?>({
    required TResult Function() createSample,
    required TResult Function() initialLoad,
    required TResult Function(DateTime date, int delay) getDiaryList,
    required TResult Function(DiaryList diaryList, List<DiaryList> lists)
        getDiaryColumns,
    required TResult Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells,
            List<DiaryList> lists)
        getDiaryCells,
    required TResult Function(DiaryCell diaryCell) selectDiaryCell,
    required TResult Function(List<DiaryCell> diaryCells) selectDiaryCells,
    required TResult Function(CapitalCell capitalCell) selectCapitalCell,
    required TResult Function(
            DiaryCell diaryCell,
            GlobalObjectKey<State<StatefulWidget>> cellKey,
            DragUpdateDetails details,
            double scaleFactor)
        onPanUpdate,
    required TResult Function(DiaryList? selectedList) startEditingList,
    required TResult Function(
            String? newName, String? addedColumnName, int? addedColumnCount)
        returnToLoaded,
    required TResult Function() returnToCellsSelected,
    required TResult Function(DiaryList diaryList, String newName)
        updateDiaryListName,
    required TResult Function(DiaryCell diaryCell, String? textFieldText)
        changeDiaryCell,
    required TResult Function(CapitalCell capitalCell, String? textFieldText)
        changeCapitalCell,
    required TResult Function(DiaryCell diaryCell, String? textFieldText)
        updateDiaryCellInFirebase,
    required TResult Function(
            FontWeightEnum? fontWeight,
            TextDecorationEnum? textDecoration,
            FontStyleEnum? fontStyle,
            double? fontSize,
            String? color,
            HorizontalAlignmentsEnum? horizontalAlignment,
            VerticalAlignmentsEnum? verticalAlignment,
            String? backgroundColor)
        changeDiaryCellsSettings,
    required TResult Function(BordersEditingEnum bordersEditingEnum,
            BordersStyleEnum bordersStyleEnum, Color bordersColor)
        changeDiaryCellsBordersSettings,
    required TResult Function(
            FontWeightEnum? fontWeight,
            TextDecorationEnum? textDecoration,
            FontStyleEnum? fontStyle,
            double? fontSize,
            String? color,
            HorizontalAlignmentsEnum? horizontalAlignment,
            VerticalAlignmentsEnum? verticalAlignment,
            String? backgroundColor,
            BordersStyleEnum? bordersStyleEnum,
            Color? bordersColor)
        changeCapitalCellSettings,
    required TResult Function(
            DiaryCell diaryCell,
            int index,
            DiaryCellTextSettings? newTextSettings,
            DiaryCellSettings? newSettings)
        updateDiaryCellSettingsInFirebase,
    required TResult Function(DiaryColumnSettings newSettings)
        updateCapitalCellSettingsInFirebase,
    required TResult Function(PointerMoveEvent details) updateCapitalCellWidth,
    required TResult Function(PointerUpEvent details)
        updateCapitalCellWidthInFirebase,
    required TResult Function(bool isTextEditing) startEditingCells,
    required TResult Function(DiaryList diaryList, String name,
            int columnsCount, List<DiaryColumn> diaryColumns)
        createDiaryColumn,
    required TResult Function(DiaryList diaryList, String columnId)
        deleteDiaryColumn,
    required TResult Function(DiaryList diaryList, String? themeColor,
            String? themeBorderColor, String? themePanelBackgroundColor)
        updateDiaryListSettings,
    required TResult Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<DiaryCell> diaryCells,
            List<CapitalCell> capitalCells,
            String themeName,
            String description)
        shareTheme,
    required TResult Function() startEditingColor,
    required TResult Function() startEditingBorders,
    required TResult Function() startEditingBorderStyle,
    required TResult Function() turnBackEditing,
    required TResult Function() startColumnDeleting,
    required TResult Function() startColorThemeEditing,
    required TResult Function() deleteColumns,
    required TResult Function() loadThemes,
    required TResult Function(ListTheme listTheme) loadFromTheme,
    required TResult Function(ListTheme listTheme) takeTheme,
  }) {
    return updateCapitalCellWidthInFirebase(details);
  }

  @override
  @optionalTypeArgs
  TResult? whenOrNull<TResult extends Object?>({
    TResult? Function()? createSample,
    TResult? Function()? initialLoad,
    TResult? Function(DateTime date, int delay)? getDiaryList,
    TResult? Function(DiaryList diaryList, List<DiaryList> lists)?
        getDiaryColumns,
    TResult? Function(DiaryList diaryList, List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells, List<DiaryList> lists)?
        getDiaryCells,
    TResult? Function(DiaryCell diaryCell)? selectDiaryCell,
    TResult? Function(List<DiaryCell> diaryCells)? selectDiaryCells,
    TResult? Function(CapitalCell capitalCell)? selectCapitalCell,
    TResult? Function(
            DiaryCell diaryCell,
            GlobalObjectKey<State<StatefulWidget>> cellKey,
            DragUpdateDetails details,
            double scaleFactor)?
        onPanUpdate,
    TResult? Function(DiaryList? selectedList)? startEditingList,
    TResult? Function(
            String? newName, String? addedColumnName, int? addedColumnCount)?
        returnToLoaded,
    TResult? Function()? returnToCellsSelected,
    TResult? Function(DiaryList diaryList, String newName)? updateDiaryListName,
    TResult? Function(DiaryCell diaryCell, String? textFieldText)?
        changeDiaryCell,
    TResult? Function(CapitalCell capitalCell, String? textFieldText)?
        changeCapitalCell,
    TResult? Function(DiaryCell diaryCell, String? textFieldText)?
        updateDiaryCellInFirebase,
    TResult? Function(
            FontWeightEnum? fontWeight,
            TextDecorationEnum? textDecoration,
            FontStyleEnum? fontStyle,
            double? fontSize,
            String? color,
            HorizontalAlignmentsEnum? horizontalAlignment,
            VerticalAlignmentsEnum? verticalAlignment,
            String? backgroundColor)?
        changeDiaryCellsSettings,
    TResult? Function(BordersEditingEnum bordersEditingEnum,
            BordersStyleEnum bordersStyleEnum, Color bordersColor)?
        changeDiaryCellsBordersSettings,
    TResult? Function(
            FontWeightEnum? fontWeight,
            TextDecorationEnum? textDecoration,
            FontStyleEnum? fontStyle,
            double? fontSize,
            String? color,
            HorizontalAlignmentsEnum? horizontalAlignment,
            VerticalAlignmentsEnum? verticalAlignment,
            String? backgroundColor,
            BordersStyleEnum? bordersStyleEnum,
            Color? bordersColor)?
        changeCapitalCellSettings,
    TResult? Function(
            DiaryCell diaryCell,
            int index,
            DiaryCellTextSettings? newTextSettings,
            DiaryCellSettings? newSettings)?
        updateDiaryCellSettingsInFirebase,
    TResult? Function(DiaryColumnSettings newSettings)?
        updateCapitalCellSettingsInFirebase,
    TResult? Function(PointerMoveEvent details)? updateCapitalCellWidth,
    TResult? Function(PointerUpEvent details)? updateCapitalCellWidthInFirebase,
    TResult? Function(bool isTextEditing)? startEditingCells,
    TResult? Function(DiaryList diaryList, String name, int columnsCount,
            List<DiaryColumn> diaryColumns)?
        createDiaryColumn,
    TResult? Function(DiaryList diaryList, String columnId)? deleteDiaryColumn,
    TResult? Function(DiaryList diaryList, String? themeColor,
            String? themeBorderColor, String? themePanelBackgroundColor)?
        updateDiaryListSettings,
    TResult? Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<DiaryCell> diaryCells,
            List<CapitalCell> capitalCells,
            String themeName,
            String description)?
        shareTheme,
    TResult? Function()? startEditingColor,
    TResult? Function()? startEditingBorders,
    TResult? Function()? startEditingBorderStyle,
    TResult? Function()? turnBackEditing,
    TResult? Function()? startColumnDeleting,
    TResult? Function()? startColorThemeEditing,
    TResult? Function()? deleteColumns,
    TResult? Function()? loadThemes,
    TResult? Function(ListTheme listTheme)? loadFromTheme,
    TResult? Function(ListTheme listTheme)? takeTheme,
  }) {
    return updateCapitalCellWidthInFirebase?.call(details);
  }

  @override
  @optionalTypeArgs
  TResult maybeWhen<TResult extends Object?>({
    TResult Function()? createSample,
    TResult Function()? initialLoad,
    TResult Function(DateTime date, int delay)? getDiaryList,
    TResult Function(DiaryList diaryList, List<DiaryList> lists)?
        getDiaryColumns,
    TResult Function(DiaryList diaryList, List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells, List<DiaryList> lists)?
        getDiaryCells,
    TResult Function(DiaryCell diaryCell)? selectDiaryCell,
    TResult Function(List<DiaryCell> diaryCells)? selectDiaryCells,
    TResult Function(CapitalCell capitalCell)? selectCapitalCell,
    TResult Function(
            DiaryCell diaryCell,
            GlobalObjectKey<State<StatefulWidget>> cellKey,
            DragUpdateDetails details,
            double scaleFactor)?
        onPanUpdate,
    TResult Function(DiaryList? selectedList)? startEditingList,
    TResult Function(
            String? newName, String? addedColumnName, int? addedColumnCount)?
        returnToLoaded,
    TResult Function()? returnToCellsSelected,
    TResult Function(DiaryList diaryList, String newName)? updateDiaryListName,
    TResult Function(DiaryCell diaryCell, String? textFieldText)?
        changeDiaryCell,
    TResult Function(CapitalCell capitalCell, String? textFieldText)?
        changeCapitalCell,
    TResult Function(DiaryCell diaryCell, String? textFieldText)?
        updateDiaryCellInFirebase,
    TResult Function(
            FontWeightEnum? fontWeight,
            TextDecorationEnum? textDecoration,
            FontStyleEnum? fontStyle,
            double? fontSize,
            String? color,
            HorizontalAlignmentsEnum? horizontalAlignment,
            VerticalAlignmentsEnum? verticalAlignment,
            String? backgroundColor)?
        changeDiaryCellsSettings,
    TResult Function(BordersEditingEnum bordersEditingEnum,
            BordersStyleEnum bordersStyleEnum, Color bordersColor)?
        changeDiaryCellsBordersSettings,
    TResult Function(
            FontWeightEnum? fontWeight,
            TextDecorationEnum? textDecoration,
            FontStyleEnum? fontStyle,
            double? fontSize,
            String? color,
            HorizontalAlignmentsEnum? horizontalAlignment,
            VerticalAlignmentsEnum? verticalAlignment,
            String? backgroundColor,
            BordersStyleEnum? bordersStyleEnum,
            Color? bordersColor)?
        changeCapitalCellSettings,
    TResult Function(
            DiaryCell diaryCell,
            int index,
            DiaryCellTextSettings? newTextSettings,
            DiaryCellSettings? newSettings)?
        updateDiaryCellSettingsInFirebase,
    TResult Function(DiaryColumnSettings newSettings)?
        updateCapitalCellSettingsInFirebase,
    TResult Function(PointerMoveEvent details)? updateCapitalCellWidth,
    TResult Function(PointerUpEvent details)? updateCapitalCellWidthInFirebase,
    TResult Function(bool isTextEditing)? startEditingCells,
    TResult Function(DiaryList diaryList, String name, int columnsCount,
            List<DiaryColumn> diaryColumns)?
        createDiaryColumn,
    TResult Function(DiaryList diaryList, String columnId)? deleteDiaryColumn,
    TResult Function(DiaryList diaryList, String? themeColor,
            String? themeBorderColor, String? themePanelBackgroundColor)?
        updateDiaryListSettings,
    TResult Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<DiaryCell> diaryCells,
            List<CapitalCell> capitalCells,
            String themeName,
            String description)?
        shareTheme,
    TResult Function()? startEditingColor,
    TResult Function()? startEditingBorders,
    TResult Function()? startEditingBorderStyle,
    TResult Function()? turnBackEditing,
    TResult Function()? startColumnDeleting,
    TResult Function()? startColorThemeEditing,
    TResult Function()? deleteColumns,
    TResult Function()? loadThemes,
    TResult Function(ListTheme listTheme)? loadFromTheme,
    TResult Function(ListTheme listTheme)? takeTheme,
    required TResult orElse(),
  }) {
    if (updateCapitalCellWidthInFirebase != null) {
      return updateCapitalCellWidthInFirebase(details);
    }
    return orElse();
  }

  @override
  @optionalTypeArgs
  TResult map<TResult extends Object?>({
    required TResult Function(CreateSampleEvent value) createSample,
    required TResult Function(InitialLoadEvent value) initialLoad,
    required TResult Function(GetDiaryListEvent value) getDiaryList,
    required TResult Function(GetDiaryColumnsEvent value) getDiaryColumns,
    required TResult Function(GetDiaryCellsEvent value) getDiaryCells,
    required TResult Function(SelectDiaryCellEvent value) selectDiaryCell,
    required TResult Function(SelectDiaryCellsEvent value) selectDiaryCells,
    required TResult Function(SelectCapitalCellEvent value) selectCapitalCell,
    required TResult Function(OnPanUpdateEvent value) onPanUpdate,
    required TResult Function(StartEditingListEvent value) startEditingList,
    required TResult Function(ReturnToLoadedEvent value) returnToLoaded,
    required TResult Function(ReturnToCellsSelectedEvent value)
        returnToCellsSelected,
    required TResult Function(UpdateDiaryListNameEvent value)
        updateDiaryListName,
    required TResult Function(ChangeDiaryCellEvent value) changeDiaryCell,
    required TResult Function(ChangeCapitalCellEvent value) changeCapitalCell,
    required TResult Function(UpdateDiaryCellInFirebaseEvent value)
        updateDiaryCellInFirebase,
    required TResult Function(ChangeDiaryCellsSettingsEvent value)
        changeDiaryCellsSettings,
    required TResult Function(ChangeDiaryCellsBordersSettingsEvent value)
        changeDiaryCellsBordersSettings,
    required TResult Function(ChangeCapitalCellSettingsEvent value)
        changeCapitalCellSettings,
    required TResult Function(UpdateDiaryCellSettingsInFirebaseEvent value)
        updateDiaryCellSettingsInFirebase,
    required TResult Function(UpdateCapitalCellSettingsInFirebaseEvent value)
        updateCapitalCellSettingsInFirebase,
    required TResult Function(UpdateCapitalCellWidthEvent value)
        updateCapitalCellWidth,
    required TResult Function(UpdateCapitalCellWidthInFirebaseEvent value)
        updateCapitalCellWidthInFirebase,
    required TResult Function(StartEditingCellsEvent value) startEditingCells,
    required TResult Function(CreateDiaryColumnEvent value) createDiaryColumn,
    required TResult Function(DeleteDiaryColumnEvent value) deleteDiaryColumn,
    required TResult Function(UpdateDiaryListSettingsEvent value)
        updateDiaryListSettings,
    required TResult Function(ShareThemeEvent value) shareTheme,
    required TResult Function(StartEditingColorEvent value) startEditingColor,
    required TResult Function(StartEditingBordersEvent value)
        startEditingBorders,
    required TResult Function(StartEditingBordersStyleEvent value)
        startEditingBorderStyle,
    required TResult Function(TurnBackEditingEvent value) turnBackEditing,
    required TResult Function(StartColumnDeletingEvent value)
        startColumnDeleting,
    required TResult Function(StartColorThemeEditingEvent value)
        startColorThemeEditing,
    required TResult Function(DeleteColumnsEvent value) deleteColumns,
    required TResult Function(LoadThemesEvent value) loadThemes,
    required TResult Function(LoadFromThemeEvent value) loadFromTheme,
    required TResult Function(TakeThemeEvent value) takeTheme,
  }) {
    return updateCapitalCellWidthInFirebase(this);
  }

  @override
  @optionalTypeArgs
  TResult? mapOrNull<TResult extends Object?>({
    TResult? Function(CreateSampleEvent value)? createSample,
    TResult? Function(InitialLoadEvent value)? initialLoad,
    TResult? Function(GetDiaryListEvent value)? getDiaryList,
    TResult? Function(GetDiaryColumnsEvent value)? getDiaryColumns,
    TResult? Function(GetDiaryCellsEvent value)? getDiaryCells,
    TResult? Function(SelectDiaryCellEvent value)? selectDiaryCell,
    TResult? Function(SelectDiaryCellsEvent value)? selectDiaryCells,
    TResult? Function(SelectCapitalCellEvent value)? selectCapitalCell,
    TResult? Function(OnPanUpdateEvent value)? onPanUpdate,
    TResult? Function(StartEditingListEvent value)? startEditingList,
    TResult? Function(ReturnToLoadedEvent value)? returnToLoaded,
    TResult? Function(ReturnToCellsSelectedEvent value)? returnToCellsSelected,
    TResult? Function(UpdateDiaryListNameEvent value)? updateDiaryListName,
    TResult? Function(ChangeDiaryCellEvent value)? changeDiaryCell,
    TResult? Function(ChangeCapitalCellEvent value)? changeCapitalCell,
    TResult? Function(UpdateDiaryCellInFirebaseEvent value)?
        updateDiaryCellInFirebase,
    TResult? Function(ChangeDiaryCellsSettingsEvent value)?
        changeDiaryCellsSettings,
    TResult? Function(ChangeDiaryCellsBordersSettingsEvent value)?
        changeDiaryCellsBordersSettings,
    TResult? Function(ChangeCapitalCellSettingsEvent value)?
        changeCapitalCellSettings,
    TResult? Function(UpdateDiaryCellSettingsInFirebaseEvent value)?
        updateDiaryCellSettingsInFirebase,
    TResult? Function(UpdateCapitalCellSettingsInFirebaseEvent value)?
        updateCapitalCellSettingsInFirebase,
    TResult? Function(UpdateCapitalCellWidthEvent value)?
        updateCapitalCellWidth,
    TResult? Function(UpdateCapitalCellWidthInFirebaseEvent value)?
        updateCapitalCellWidthInFirebase,
    TResult? Function(StartEditingCellsEvent value)? startEditingCells,
    TResult? Function(CreateDiaryColumnEvent value)? createDiaryColumn,
    TResult? Function(DeleteDiaryColumnEvent value)? deleteDiaryColumn,
    TResult? Function(UpdateDiaryListSettingsEvent value)?
        updateDiaryListSettings,
    TResult? Function(ShareThemeEvent value)? shareTheme,
    TResult? Function(StartEditingColorEvent value)? startEditingColor,
    TResult? Function(StartEditingBordersEvent value)? startEditingBorders,
    TResult? Function(StartEditingBordersStyleEvent value)?
        startEditingBorderStyle,
    TResult? Function(TurnBackEditingEvent value)? turnBackEditing,
    TResult? Function(StartColumnDeletingEvent value)? startColumnDeleting,
    TResult? Function(StartColorThemeEditingEvent value)?
        startColorThemeEditing,
    TResult? Function(DeleteColumnsEvent value)? deleteColumns,
    TResult? Function(LoadThemesEvent value)? loadThemes,
    TResult? Function(LoadFromThemeEvent value)? loadFromTheme,
    TResult? Function(TakeThemeEvent value)? takeTheme,
  }) {
    return updateCapitalCellWidthInFirebase?.call(this);
  }

  @override
  @optionalTypeArgs
  TResult maybeMap<TResult extends Object?>({
    TResult Function(CreateSampleEvent value)? createSample,
    TResult Function(InitialLoadEvent value)? initialLoad,
    TResult Function(GetDiaryListEvent value)? getDiaryList,
    TResult Function(GetDiaryColumnsEvent value)? getDiaryColumns,
    TResult Function(GetDiaryCellsEvent value)? getDiaryCells,
    TResult Function(SelectDiaryCellEvent value)? selectDiaryCell,
    TResult Function(SelectDiaryCellsEvent value)? selectDiaryCells,
    TResult Function(SelectCapitalCellEvent value)? selectCapitalCell,
    TResult Function(OnPanUpdateEvent value)? onPanUpdate,
    TResult Function(StartEditingListEvent value)? startEditingList,
    TResult Function(ReturnToLoadedEvent value)? returnToLoaded,
    TResult Function(ReturnToCellsSelectedEvent value)? returnToCellsSelected,
    TResult Function(UpdateDiaryListNameEvent value)? updateDiaryListName,
    TResult Function(ChangeDiaryCellEvent value)? changeDiaryCell,
    TResult Function(ChangeCapitalCellEvent value)? changeCapitalCell,
    TResult Function(UpdateDiaryCellInFirebaseEvent value)?
        updateDiaryCellInFirebase,
    TResult Function(ChangeDiaryCellsSettingsEvent value)?
        changeDiaryCellsSettings,
    TResult Function(ChangeDiaryCellsBordersSettingsEvent value)?
        changeDiaryCellsBordersSettings,
    TResult Function(ChangeCapitalCellSettingsEvent value)?
        changeCapitalCellSettings,
    TResult Function(UpdateDiaryCellSettingsInFirebaseEvent value)?
        updateDiaryCellSettingsInFirebase,
    TResult Function(UpdateCapitalCellSettingsInFirebaseEvent value)?
        updateCapitalCellSettingsInFirebase,
    TResult Function(UpdateCapitalCellWidthEvent value)? updateCapitalCellWidth,
    TResult Function(UpdateCapitalCellWidthInFirebaseEvent value)?
        updateCapitalCellWidthInFirebase,
    TResult Function(StartEditingCellsEvent value)? startEditingCells,
    TResult Function(CreateDiaryColumnEvent value)? createDiaryColumn,
    TResult Function(DeleteDiaryColumnEvent value)? deleteDiaryColumn,
    TResult Function(UpdateDiaryListSettingsEvent value)?
        updateDiaryListSettings,
    TResult Function(ShareThemeEvent value)? shareTheme,
    TResult Function(StartEditingColorEvent value)? startEditingColor,
    TResult Function(StartEditingBordersEvent value)? startEditingBorders,
    TResult Function(StartEditingBordersStyleEvent value)?
        startEditingBorderStyle,
    TResult Function(TurnBackEditingEvent value)? turnBackEditing,
    TResult Function(StartColumnDeletingEvent value)? startColumnDeleting,
    TResult Function(StartColorThemeEditingEvent value)? startColorThemeEditing,
    TResult Function(DeleteColumnsEvent value)? deleteColumns,
    TResult Function(LoadThemesEvent value)? loadThemes,
    TResult Function(LoadFromThemeEvent value)? loadFromTheme,
    TResult Function(TakeThemeEvent value)? takeTheme,
    required TResult orElse(),
  }) {
    if (updateCapitalCellWidthInFirebase != null) {
      return updateCapitalCellWidthInFirebase(this);
    }
    return orElse();
  }
}

abstract class UpdateCapitalCellWidthInFirebaseEvent implements DiaryListEvent {
  const factory UpdateCapitalCellWidthInFirebaseEvent(
          {required final PointerUpEvent details}) =
      _$UpdateCapitalCellWidthInFirebaseEvent;

  PointerUpEvent get details;
  @JsonKey(ignore: true)
  _$$UpdateCapitalCellWidthInFirebaseEventCopyWith<
          _$UpdateCapitalCellWidthInFirebaseEvent>
      get copyWith => throw _privateConstructorUsedError;
}

/// @nodoc
abstract class _$$StartEditingCellsEventCopyWith<$Res> {
  factory _$$StartEditingCellsEventCopyWith(_$StartEditingCellsEvent value,
          $Res Function(_$StartEditingCellsEvent) then) =
      __$$StartEditingCellsEventCopyWithImpl<$Res>;
  @useResult
  $Res call({bool isTextEditing});
}

/// @nodoc
class __$$StartEditingCellsEventCopyWithImpl<$Res>
    extends _$DiaryListEventCopyWithImpl<$Res, _$StartEditingCellsEvent>
    implements _$$StartEditingCellsEventCopyWith<$Res> {
  __$$StartEditingCellsEventCopyWithImpl(_$StartEditingCellsEvent _value,
      $Res Function(_$StartEditingCellsEvent) _then)
      : super(_value, _then);

  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? isTextEditing = null,
  }) {
    return _then(_$StartEditingCellsEvent(
      isTextEditing: null == isTextEditing
          ? _value.isTextEditing
          : isTextEditing // ignore: cast_nullable_to_non_nullable
              as bool,
    ));
  }
}

/// @nodoc

class _$StartEditingCellsEvent implements StartEditingCellsEvent {
  const _$StartEditingCellsEvent({required this.isTextEditing});

  @override
  final bool isTextEditing;

  @override
  String toString() {
    return 'DiaryListEvent.startEditingCells(isTextEditing: $isTextEditing)';
  }

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$StartEditingCellsEvent &&
            (identical(other.isTextEditing, isTextEditing) ||
                other.isTextEditing == isTextEditing));
  }

  @override
  int get hashCode => Object.hash(runtimeType, isTextEditing);

  @JsonKey(ignore: true)
  @override
  @pragma('vm:prefer-inline')
  _$$StartEditingCellsEventCopyWith<_$StartEditingCellsEvent> get copyWith =>
      __$$StartEditingCellsEventCopyWithImpl<_$StartEditingCellsEvent>(
          this, _$identity);

  @override
  @optionalTypeArgs
  TResult when<TResult extends Object?>({
    required TResult Function() createSample,
    required TResult Function() initialLoad,
    required TResult Function(DateTime date, int delay) getDiaryList,
    required TResult Function(DiaryList diaryList, List<DiaryList> lists)
        getDiaryColumns,
    required TResult Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells,
            List<DiaryList> lists)
        getDiaryCells,
    required TResult Function(DiaryCell diaryCell) selectDiaryCell,
    required TResult Function(List<DiaryCell> diaryCells) selectDiaryCells,
    required TResult Function(CapitalCell capitalCell) selectCapitalCell,
    required TResult Function(
            DiaryCell diaryCell,
            GlobalObjectKey<State<StatefulWidget>> cellKey,
            DragUpdateDetails details,
            double scaleFactor)
        onPanUpdate,
    required TResult Function(DiaryList? selectedList) startEditingList,
    required TResult Function(
            String? newName, String? addedColumnName, int? addedColumnCount)
        returnToLoaded,
    required TResult Function() returnToCellsSelected,
    required TResult Function(DiaryList diaryList, String newName)
        updateDiaryListName,
    required TResult Function(DiaryCell diaryCell, String? textFieldText)
        changeDiaryCell,
    required TResult Function(CapitalCell capitalCell, String? textFieldText)
        changeCapitalCell,
    required TResult Function(DiaryCell diaryCell, String? textFieldText)
        updateDiaryCellInFirebase,
    required TResult Function(
            FontWeightEnum? fontWeight,
            TextDecorationEnum? textDecoration,
            FontStyleEnum? fontStyle,
            double? fontSize,
            String? color,
            HorizontalAlignmentsEnum? horizontalAlignment,
            VerticalAlignmentsEnum? verticalAlignment,
            String? backgroundColor)
        changeDiaryCellsSettings,
    required TResult Function(BordersEditingEnum bordersEditingEnum,
            BordersStyleEnum bordersStyleEnum, Color bordersColor)
        changeDiaryCellsBordersSettings,
    required TResult Function(
            FontWeightEnum? fontWeight,
            TextDecorationEnum? textDecoration,
            FontStyleEnum? fontStyle,
            double? fontSize,
            String? color,
            HorizontalAlignmentsEnum? horizontalAlignment,
            VerticalAlignmentsEnum? verticalAlignment,
            String? backgroundColor,
            BordersStyleEnum? bordersStyleEnum,
            Color? bordersColor)
        changeCapitalCellSettings,
    required TResult Function(
            DiaryCell diaryCell,
            int index,
            DiaryCellTextSettings? newTextSettings,
            DiaryCellSettings? newSettings)
        updateDiaryCellSettingsInFirebase,
    required TResult Function(DiaryColumnSettings newSettings)
        updateCapitalCellSettingsInFirebase,
    required TResult Function(PointerMoveEvent details) updateCapitalCellWidth,
    required TResult Function(PointerUpEvent details)
        updateCapitalCellWidthInFirebase,
    required TResult Function(bool isTextEditing) startEditingCells,
    required TResult Function(DiaryList diaryList, String name,
            int columnsCount, List<DiaryColumn> diaryColumns)
        createDiaryColumn,
    required TResult Function(DiaryList diaryList, String columnId)
        deleteDiaryColumn,
    required TResult Function(DiaryList diaryList, String? themeColor,
            String? themeBorderColor, String? themePanelBackgroundColor)
        updateDiaryListSettings,
    required TResult Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<DiaryCell> diaryCells,
            List<CapitalCell> capitalCells,
            String themeName,
            String description)
        shareTheme,
    required TResult Function() startEditingColor,
    required TResult Function() startEditingBorders,
    required TResult Function() startEditingBorderStyle,
    required TResult Function() turnBackEditing,
    required TResult Function() startColumnDeleting,
    required TResult Function() startColorThemeEditing,
    required TResult Function() deleteColumns,
    required TResult Function() loadThemes,
    required TResult Function(ListTheme listTheme) loadFromTheme,
    required TResult Function(ListTheme listTheme) takeTheme,
  }) {
    return startEditingCells(isTextEditing);
  }

  @override
  @optionalTypeArgs
  TResult? whenOrNull<TResult extends Object?>({
    TResult? Function()? createSample,
    TResult? Function()? initialLoad,
    TResult? Function(DateTime date, int delay)? getDiaryList,
    TResult? Function(DiaryList diaryList, List<DiaryList> lists)?
        getDiaryColumns,
    TResult? Function(DiaryList diaryList, List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells, List<DiaryList> lists)?
        getDiaryCells,
    TResult? Function(DiaryCell diaryCell)? selectDiaryCell,
    TResult? Function(List<DiaryCell> diaryCells)? selectDiaryCells,
    TResult? Function(CapitalCell capitalCell)? selectCapitalCell,
    TResult? Function(
            DiaryCell diaryCell,
            GlobalObjectKey<State<StatefulWidget>> cellKey,
            DragUpdateDetails details,
            double scaleFactor)?
        onPanUpdate,
    TResult? Function(DiaryList? selectedList)? startEditingList,
    TResult? Function(
            String? newName, String? addedColumnName, int? addedColumnCount)?
        returnToLoaded,
    TResult? Function()? returnToCellsSelected,
    TResult? Function(DiaryList diaryList, String newName)? updateDiaryListName,
    TResult? Function(DiaryCell diaryCell, String? textFieldText)?
        changeDiaryCell,
    TResult? Function(CapitalCell capitalCell, String? textFieldText)?
        changeCapitalCell,
    TResult? Function(DiaryCell diaryCell, String? textFieldText)?
        updateDiaryCellInFirebase,
    TResult? Function(
            FontWeightEnum? fontWeight,
            TextDecorationEnum? textDecoration,
            FontStyleEnum? fontStyle,
            double? fontSize,
            String? color,
            HorizontalAlignmentsEnum? horizontalAlignment,
            VerticalAlignmentsEnum? verticalAlignment,
            String? backgroundColor)?
        changeDiaryCellsSettings,
    TResult? Function(BordersEditingEnum bordersEditingEnum,
            BordersStyleEnum bordersStyleEnum, Color bordersColor)?
        changeDiaryCellsBordersSettings,
    TResult? Function(
            FontWeightEnum? fontWeight,
            TextDecorationEnum? textDecoration,
            FontStyleEnum? fontStyle,
            double? fontSize,
            String? color,
            HorizontalAlignmentsEnum? horizontalAlignment,
            VerticalAlignmentsEnum? verticalAlignment,
            String? backgroundColor,
            BordersStyleEnum? bordersStyleEnum,
            Color? bordersColor)?
        changeCapitalCellSettings,
    TResult? Function(
            DiaryCell diaryCell,
            int index,
            DiaryCellTextSettings? newTextSettings,
            DiaryCellSettings? newSettings)?
        updateDiaryCellSettingsInFirebase,
    TResult? Function(DiaryColumnSettings newSettings)?
        updateCapitalCellSettingsInFirebase,
    TResult? Function(PointerMoveEvent details)? updateCapitalCellWidth,
    TResult? Function(PointerUpEvent details)? updateCapitalCellWidthInFirebase,
    TResult? Function(bool isTextEditing)? startEditingCells,
    TResult? Function(DiaryList diaryList, String name, int columnsCount,
            List<DiaryColumn> diaryColumns)?
        createDiaryColumn,
    TResult? Function(DiaryList diaryList, String columnId)? deleteDiaryColumn,
    TResult? Function(DiaryList diaryList, String? themeColor,
            String? themeBorderColor, String? themePanelBackgroundColor)?
        updateDiaryListSettings,
    TResult? Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<DiaryCell> diaryCells,
            List<CapitalCell> capitalCells,
            String themeName,
            String description)?
        shareTheme,
    TResult? Function()? startEditingColor,
    TResult? Function()? startEditingBorders,
    TResult? Function()? startEditingBorderStyle,
    TResult? Function()? turnBackEditing,
    TResult? Function()? startColumnDeleting,
    TResult? Function()? startColorThemeEditing,
    TResult? Function()? deleteColumns,
    TResult? Function()? loadThemes,
    TResult? Function(ListTheme listTheme)? loadFromTheme,
    TResult? Function(ListTheme listTheme)? takeTheme,
  }) {
    return startEditingCells?.call(isTextEditing);
  }

  @override
  @optionalTypeArgs
  TResult maybeWhen<TResult extends Object?>({
    TResult Function()? createSample,
    TResult Function()? initialLoad,
    TResult Function(DateTime date, int delay)? getDiaryList,
    TResult Function(DiaryList diaryList, List<DiaryList> lists)?
        getDiaryColumns,
    TResult Function(DiaryList diaryList, List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells, List<DiaryList> lists)?
        getDiaryCells,
    TResult Function(DiaryCell diaryCell)? selectDiaryCell,
    TResult Function(List<DiaryCell> diaryCells)? selectDiaryCells,
    TResult Function(CapitalCell capitalCell)? selectCapitalCell,
    TResult Function(
            DiaryCell diaryCell,
            GlobalObjectKey<State<StatefulWidget>> cellKey,
            DragUpdateDetails details,
            double scaleFactor)?
        onPanUpdate,
    TResult Function(DiaryList? selectedList)? startEditingList,
    TResult Function(
            String? newName, String? addedColumnName, int? addedColumnCount)?
        returnToLoaded,
    TResult Function()? returnToCellsSelected,
    TResult Function(DiaryList diaryList, String newName)? updateDiaryListName,
    TResult Function(DiaryCell diaryCell, String? textFieldText)?
        changeDiaryCell,
    TResult Function(CapitalCell capitalCell, String? textFieldText)?
        changeCapitalCell,
    TResult Function(DiaryCell diaryCell, String? textFieldText)?
        updateDiaryCellInFirebase,
    TResult Function(
            FontWeightEnum? fontWeight,
            TextDecorationEnum? textDecoration,
            FontStyleEnum? fontStyle,
            double? fontSize,
            String? color,
            HorizontalAlignmentsEnum? horizontalAlignment,
            VerticalAlignmentsEnum? verticalAlignment,
            String? backgroundColor)?
        changeDiaryCellsSettings,
    TResult Function(BordersEditingEnum bordersEditingEnum,
            BordersStyleEnum bordersStyleEnum, Color bordersColor)?
        changeDiaryCellsBordersSettings,
    TResult Function(
            FontWeightEnum? fontWeight,
            TextDecorationEnum? textDecoration,
            FontStyleEnum? fontStyle,
            double? fontSize,
            String? color,
            HorizontalAlignmentsEnum? horizontalAlignment,
            VerticalAlignmentsEnum? verticalAlignment,
            String? backgroundColor,
            BordersStyleEnum? bordersStyleEnum,
            Color? bordersColor)?
        changeCapitalCellSettings,
    TResult Function(
            DiaryCell diaryCell,
            int index,
            DiaryCellTextSettings? newTextSettings,
            DiaryCellSettings? newSettings)?
        updateDiaryCellSettingsInFirebase,
    TResult Function(DiaryColumnSettings newSettings)?
        updateCapitalCellSettingsInFirebase,
    TResult Function(PointerMoveEvent details)? updateCapitalCellWidth,
    TResult Function(PointerUpEvent details)? updateCapitalCellWidthInFirebase,
    TResult Function(bool isTextEditing)? startEditingCells,
    TResult Function(DiaryList diaryList, String name, int columnsCount,
            List<DiaryColumn> diaryColumns)?
        createDiaryColumn,
    TResult Function(DiaryList diaryList, String columnId)? deleteDiaryColumn,
    TResult Function(DiaryList diaryList, String? themeColor,
            String? themeBorderColor, String? themePanelBackgroundColor)?
        updateDiaryListSettings,
    TResult Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<DiaryCell> diaryCells,
            List<CapitalCell> capitalCells,
            String themeName,
            String description)?
        shareTheme,
    TResult Function()? startEditingColor,
    TResult Function()? startEditingBorders,
    TResult Function()? startEditingBorderStyle,
    TResult Function()? turnBackEditing,
    TResult Function()? startColumnDeleting,
    TResult Function()? startColorThemeEditing,
    TResult Function()? deleteColumns,
    TResult Function()? loadThemes,
    TResult Function(ListTheme listTheme)? loadFromTheme,
    TResult Function(ListTheme listTheme)? takeTheme,
    required TResult orElse(),
  }) {
    if (startEditingCells != null) {
      return startEditingCells(isTextEditing);
    }
    return orElse();
  }

  @override
  @optionalTypeArgs
  TResult map<TResult extends Object?>({
    required TResult Function(CreateSampleEvent value) createSample,
    required TResult Function(InitialLoadEvent value) initialLoad,
    required TResult Function(GetDiaryListEvent value) getDiaryList,
    required TResult Function(GetDiaryColumnsEvent value) getDiaryColumns,
    required TResult Function(GetDiaryCellsEvent value) getDiaryCells,
    required TResult Function(SelectDiaryCellEvent value) selectDiaryCell,
    required TResult Function(SelectDiaryCellsEvent value) selectDiaryCells,
    required TResult Function(SelectCapitalCellEvent value) selectCapitalCell,
    required TResult Function(OnPanUpdateEvent value) onPanUpdate,
    required TResult Function(StartEditingListEvent value) startEditingList,
    required TResult Function(ReturnToLoadedEvent value) returnToLoaded,
    required TResult Function(ReturnToCellsSelectedEvent value)
        returnToCellsSelected,
    required TResult Function(UpdateDiaryListNameEvent value)
        updateDiaryListName,
    required TResult Function(ChangeDiaryCellEvent value) changeDiaryCell,
    required TResult Function(ChangeCapitalCellEvent value) changeCapitalCell,
    required TResult Function(UpdateDiaryCellInFirebaseEvent value)
        updateDiaryCellInFirebase,
    required TResult Function(ChangeDiaryCellsSettingsEvent value)
        changeDiaryCellsSettings,
    required TResult Function(ChangeDiaryCellsBordersSettingsEvent value)
        changeDiaryCellsBordersSettings,
    required TResult Function(ChangeCapitalCellSettingsEvent value)
        changeCapitalCellSettings,
    required TResult Function(UpdateDiaryCellSettingsInFirebaseEvent value)
        updateDiaryCellSettingsInFirebase,
    required TResult Function(UpdateCapitalCellSettingsInFirebaseEvent value)
        updateCapitalCellSettingsInFirebase,
    required TResult Function(UpdateCapitalCellWidthEvent value)
        updateCapitalCellWidth,
    required TResult Function(UpdateCapitalCellWidthInFirebaseEvent value)
        updateCapitalCellWidthInFirebase,
    required TResult Function(StartEditingCellsEvent value) startEditingCells,
    required TResult Function(CreateDiaryColumnEvent value) createDiaryColumn,
    required TResult Function(DeleteDiaryColumnEvent value) deleteDiaryColumn,
    required TResult Function(UpdateDiaryListSettingsEvent value)
        updateDiaryListSettings,
    required TResult Function(ShareThemeEvent value) shareTheme,
    required TResult Function(StartEditingColorEvent value) startEditingColor,
    required TResult Function(StartEditingBordersEvent value)
        startEditingBorders,
    required TResult Function(StartEditingBordersStyleEvent value)
        startEditingBorderStyle,
    required TResult Function(TurnBackEditingEvent value) turnBackEditing,
    required TResult Function(StartColumnDeletingEvent value)
        startColumnDeleting,
    required TResult Function(StartColorThemeEditingEvent value)
        startColorThemeEditing,
    required TResult Function(DeleteColumnsEvent value) deleteColumns,
    required TResult Function(LoadThemesEvent value) loadThemes,
    required TResult Function(LoadFromThemeEvent value) loadFromTheme,
    required TResult Function(TakeThemeEvent value) takeTheme,
  }) {
    return startEditingCells(this);
  }

  @override
  @optionalTypeArgs
  TResult? mapOrNull<TResult extends Object?>({
    TResult? Function(CreateSampleEvent value)? createSample,
    TResult? Function(InitialLoadEvent value)? initialLoad,
    TResult? Function(GetDiaryListEvent value)? getDiaryList,
    TResult? Function(GetDiaryColumnsEvent value)? getDiaryColumns,
    TResult? Function(GetDiaryCellsEvent value)? getDiaryCells,
    TResult? Function(SelectDiaryCellEvent value)? selectDiaryCell,
    TResult? Function(SelectDiaryCellsEvent value)? selectDiaryCells,
    TResult? Function(SelectCapitalCellEvent value)? selectCapitalCell,
    TResult? Function(OnPanUpdateEvent value)? onPanUpdate,
    TResult? Function(StartEditingListEvent value)? startEditingList,
    TResult? Function(ReturnToLoadedEvent value)? returnToLoaded,
    TResult? Function(ReturnToCellsSelectedEvent value)? returnToCellsSelected,
    TResult? Function(UpdateDiaryListNameEvent value)? updateDiaryListName,
    TResult? Function(ChangeDiaryCellEvent value)? changeDiaryCell,
    TResult? Function(ChangeCapitalCellEvent value)? changeCapitalCell,
    TResult? Function(UpdateDiaryCellInFirebaseEvent value)?
        updateDiaryCellInFirebase,
    TResult? Function(ChangeDiaryCellsSettingsEvent value)?
        changeDiaryCellsSettings,
    TResult? Function(ChangeDiaryCellsBordersSettingsEvent value)?
        changeDiaryCellsBordersSettings,
    TResult? Function(ChangeCapitalCellSettingsEvent value)?
        changeCapitalCellSettings,
    TResult? Function(UpdateDiaryCellSettingsInFirebaseEvent value)?
        updateDiaryCellSettingsInFirebase,
    TResult? Function(UpdateCapitalCellSettingsInFirebaseEvent value)?
        updateCapitalCellSettingsInFirebase,
    TResult? Function(UpdateCapitalCellWidthEvent value)?
        updateCapitalCellWidth,
    TResult? Function(UpdateCapitalCellWidthInFirebaseEvent value)?
        updateCapitalCellWidthInFirebase,
    TResult? Function(StartEditingCellsEvent value)? startEditingCells,
    TResult? Function(CreateDiaryColumnEvent value)? createDiaryColumn,
    TResult? Function(DeleteDiaryColumnEvent value)? deleteDiaryColumn,
    TResult? Function(UpdateDiaryListSettingsEvent value)?
        updateDiaryListSettings,
    TResult? Function(ShareThemeEvent value)? shareTheme,
    TResult? Function(StartEditingColorEvent value)? startEditingColor,
    TResult? Function(StartEditingBordersEvent value)? startEditingBorders,
    TResult? Function(StartEditingBordersStyleEvent value)?
        startEditingBorderStyle,
    TResult? Function(TurnBackEditingEvent value)? turnBackEditing,
    TResult? Function(StartColumnDeletingEvent value)? startColumnDeleting,
    TResult? Function(StartColorThemeEditingEvent value)?
        startColorThemeEditing,
    TResult? Function(DeleteColumnsEvent value)? deleteColumns,
    TResult? Function(LoadThemesEvent value)? loadThemes,
    TResult? Function(LoadFromThemeEvent value)? loadFromTheme,
    TResult? Function(TakeThemeEvent value)? takeTheme,
  }) {
    return startEditingCells?.call(this);
  }

  @override
  @optionalTypeArgs
  TResult maybeMap<TResult extends Object?>({
    TResult Function(CreateSampleEvent value)? createSample,
    TResult Function(InitialLoadEvent value)? initialLoad,
    TResult Function(GetDiaryListEvent value)? getDiaryList,
    TResult Function(GetDiaryColumnsEvent value)? getDiaryColumns,
    TResult Function(GetDiaryCellsEvent value)? getDiaryCells,
    TResult Function(SelectDiaryCellEvent value)? selectDiaryCell,
    TResult Function(SelectDiaryCellsEvent value)? selectDiaryCells,
    TResult Function(SelectCapitalCellEvent value)? selectCapitalCell,
    TResult Function(OnPanUpdateEvent value)? onPanUpdate,
    TResult Function(StartEditingListEvent value)? startEditingList,
    TResult Function(ReturnToLoadedEvent value)? returnToLoaded,
    TResult Function(ReturnToCellsSelectedEvent value)? returnToCellsSelected,
    TResult Function(UpdateDiaryListNameEvent value)? updateDiaryListName,
    TResult Function(ChangeDiaryCellEvent value)? changeDiaryCell,
    TResult Function(ChangeCapitalCellEvent value)? changeCapitalCell,
    TResult Function(UpdateDiaryCellInFirebaseEvent value)?
        updateDiaryCellInFirebase,
    TResult Function(ChangeDiaryCellsSettingsEvent value)?
        changeDiaryCellsSettings,
    TResult Function(ChangeDiaryCellsBordersSettingsEvent value)?
        changeDiaryCellsBordersSettings,
    TResult Function(ChangeCapitalCellSettingsEvent value)?
        changeCapitalCellSettings,
    TResult Function(UpdateDiaryCellSettingsInFirebaseEvent value)?
        updateDiaryCellSettingsInFirebase,
    TResult Function(UpdateCapitalCellSettingsInFirebaseEvent value)?
        updateCapitalCellSettingsInFirebase,
    TResult Function(UpdateCapitalCellWidthEvent value)? updateCapitalCellWidth,
    TResult Function(UpdateCapitalCellWidthInFirebaseEvent value)?
        updateCapitalCellWidthInFirebase,
    TResult Function(StartEditingCellsEvent value)? startEditingCells,
    TResult Function(CreateDiaryColumnEvent value)? createDiaryColumn,
    TResult Function(DeleteDiaryColumnEvent value)? deleteDiaryColumn,
    TResult Function(UpdateDiaryListSettingsEvent value)?
        updateDiaryListSettings,
    TResult Function(ShareThemeEvent value)? shareTheme,
    TResult Function(StartEditingColorEvent value)? startEditingColor,
    TResult Function(StartEditingBordersEvent value)? startEditingBorders,
    TResult Function(StartEditingBordersStyleEvent value)?
        startEditingBorderStyle,
    TResult Function(TurnBackEditingEvent value)? turnBackEditing,
    TResult Function(StartColumnDeletingEvent value)? startColumnDeleting,
    TResult Function(StartColorThemeEditingEvent value)? startColorThemeEditing,
    TResult Function(DeleteColumnsEvent value)? deleteColumns,
    TResult Function(LoadThemesEvent value)? loadThemes,
    TResult Function(LoadFromThemeEvent value)? loadFromTheme,
    TResult Function(TakeThemeEvent value)? takeTheme,
    required TResult orElse(),
  }) {
    if (startEditingCells != null) {
      return startEditingCells(this);
    }
    return orElse();
  }
}

abstract class StartEditingCellsEvent implements DiaryListEvent {
  const factory StartEditingCellsEvent({required final bool isTextEditing}) =
      _$StartEditingCellsEvent;

  bool get isTextEditing;
  @JsonKey(ignore: true)
  _$$StartEditingCellsEventCopyWith<_$StartEditingCellsEvent> get copyWith =>
      throw _privateConstructorUsedError;
}

/// @nodoc
abstract class _$$CreateDiaryColumnEventCopyWith<$Res> {
  factory _$$CreateDiaryColumnEventCopyWith(_$CreateDiaryColumnEvent value,
          $Res Function(_$CreateDiaryColumnEvent) then) =
      __$$CreateDiaryColumnEventCopyWithImpl<$Res>;
  @useResult
  $Res call(
      {DiaryList diaryList,
      String name,
      int columnsCount,
      List<DiaryColumn> diaryColumns});
}

/// @nodoc
class __$$CreateDiaryColumnEventCopyWithImpl<$Res>
    extends _$DiaryListEventCopyWithImpl<$Res, _$CreateDiaryColumnEvent>
    implements _$$CreateDiaryColumnEventCopyWith<$Res> {
  __$$CreateDiaryColumnEventCopyWithImpl(_$CreateDiaryColumnEvent _value,
      $Res Function(_$CreateDiaryColumnEvent) _then)
      : super(_value, _then);

  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? diaryList = null,
    Object? name = null,
    Object? columnsCount = null,
    Object? diaryColumns = null,
  }) {
    return _then(_$CreateDiaryColumnEvent(
      diaryList: null == diaryList
          ? _value.diaryList
          : diaryList // ignore: cast_nullable_to_non_nullable
              as DiaryList,
      name: null == name
          ? _value.name
          : name // ignore: cast_nullable_to_non_nullable
              as String,
      columnsCount: null == columnsCount
          ? _value.columnsCount
          : columnsCount // ignore: cast_nullable_to_non_nullable
              as int,
      diaryColumns: null == diaryColumns
          ? _value._diaryColumns
          : diaryColumns // ignore: cast_nullable_to_non_nullable
              as List<DiaryColumn>,
    ));
  }
}

/// @nodoc

class _$CreateDiaryColumnEvent implements CreateDiaryColumnEvent {
  const _$CreateDiaryColumnEvent(
      {required this.diaryList,
      required this.name,
      required this.columnsCount,
      required final List<DiaryColumn> diaryColumns})
      : _diaryColumns = diaryColumns;

  @override
  final DiaryList diaryList;
  @override
  final String name;
  @override
  final int columnsCount;
  final List<DiaryColumn> _diaryColumns;
  @override
  List<DiaryColumn> get diaryColumns {
    if (_diaryColumns is EqualUnmodifiableListView) return _diaryColumns;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_diaryColumns);
  }

  @override
  String toString() {
    return 'DiaryListEvent.createDiaryColumn(diaryList: $diaryList, name: $name, columnsCount: $columnsCount, diaryColumns: $diaryColumns)';
  }

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$CreateDiaryColumnEvent &&
            (identical(other.diaryList, diaryList) ||
                other.diaryList == diaryList) &&
            (identical(other.name, name) || other.name == name) &&
            (identical(other.columnsCount, columnsCount) ||
                other.columnsCount == columnsCount) &&
            const DeepCollectionEquality()
                .equals(other._diaryColumns, _diaryColumns));
  }

  @override
  int get hashCode => Object.hash(runtimeType, diaryList, name, columnsCount,
      const DeepCollectionEquality().hash(_diaryColumns));

  @JsonKey(ignore: true)
  @override
  @pragma('vm:prefer-inline')
  _$$CreateDiaryColumnEventCopyWith<_$CreateDiaryColumnEvent> get copyWith =>
      __$$CreateDiaryColumnEventCopyWithImpl<_$CreateDiaryColumnEvent>(
          this, _$identity);

  @override
  @optionalTypeArgs
  TResult when<TResult extends Object?>({
    required TResult Function() createSample,
    required TResult Function() initialLoad,
    required TResult Function(DateTime date, int delay) getDiaryList,
    required TResult Function(DiaryList diaryList, List<DiaryList> lists)
        getDiaryColumns,
    required TResult Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells,
            List<DiaryList> lists)
        getDiaryCells,
    required TResult Function(DiaryCell diaryCell) selectDiaryCell,
    required TResult Function(List<DiaryCell> diaryCells) selectDiaryCells,
    required TResult Function(CapitalCell capitalCell) selectCapitalCell,
    required TResult Function(
            DiaryCell diaryCell,
            GlobalObjectKey<State<StatefulWidget>> cellKey,
            DragUpdateDetails details,
            double scaleFactor)
        onPanUpdate,
    required TResult Function(DiaryList? selectedList) startEditingList,
    required TResult Function(
            String? newName, String? addedColumnName, int? addedColumnCount)
        returnToLoaded,
    required TResult Function() returnToCellsSelected,
    required TResult Function(DiaryList diaryList, String newName)
        updateDiaryListName,
    required TResult Function(DiaryCell diaryCell, String? textFieldText)
        changeDiaryCell,
    required TResult Function(CapitalCell capitalCell, String? textFieldText)
        changeCapitalCell,
    required TResult Function(DiaryCell diaryCell, String? textFieldText)
        updateDiaryCellInFirebase,
    required TResult Function(
            FontWeightEnum? fontWeight,
            TextDecorationEnum? textDecoration,
            FontStyleEnum? fontStyle,
            double? fontSize,
            String? color,
            HorizontalAlignmentsEnum? horizontalAlignment,
            VerticalAlignmentsEnum? verticalAlignment,
            String? backgroundColor)
        changeDiaryCellsSettings,
    required TResult Function(BordersEditingEnum bordersEditingEnum,
            BordersStyleEnum bordersStyleEnum, Color bordersColor)
        changeDiaryCellsBordersSettings,
    required TResult Function(
            FontWeightEnum? fontWeight,
            TextDecorationEnum? textDecoration,
            FontStyleEnum? fontStyle,
            double? fontSize,
            String? color,
            HorizontalAlignmentsEnum? horizontalAlignment,
            VerticalAlignmentsEnum? verticalAlignment,
            String? backgroundColor,
            BordersStyleEnum? bordersStyleEnum,
            Color? bordersColor)
        changeCapitalCellSettings,
    required TResult Function(
            DiaryCell diaryCell,
            int index,
            DiaryCellTextSettings? newTextSettings,
            DiaryCellSettings? newSettings)
        updateDiaryCellSettingsInFirebase,
    required TResult Function(DiaryColumnSettings newSettings)
        updateCapitalCellSettingsInFirebase,
    required TResult Function(PointerMoveEvent details) updateCapitalCellWidth,
    required TResult Function(PointerUpEvent details)
        updateCapitalCellWidthInFirebase,
    required TResult Function(bool isTextEditing) startEditingCells,
    required TResult Function(DiaryList diaryList, String name,
            int columnsCount, List<DiaryColumn> diaryColumns)
        createDiaryColumn,
    required TResult Function(DiaryList diaryList, String columnId)
        deleteDiaryColumn,
    required TResult Function(DiaryList diaryList, String? themeColor,
            String? themeBorderColor, String? themePanelBackgroundColor)
        updateDiaryListSettings,
    required TResult Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<DiaryCell> diaryCells,
            List<CapitalCell> capitalCells,
            String themeName,
            String description)
        shareTheme,
    required TResult Function() startEditingColor,
    required TResult Function() startEditingBorders,
    required TResult Function() startEditingBorderStyle,
    required TResult Function() turnBackEditing,
    required TResult Function() startColumnDeleting,
    required TResult Function() startColorThemeEditing,
    required TResult Function() deleteColumns,
    required TResult Function() loadThemes,
    required TResult Function(ListTheme listTheme) loadFromTheme,
    required TResult Function(ListTheme listTheme) takeTheme,
  }) {
    return createDiaryColumn(diaryList, name, columnsCount, diaryColumns);
  }

  @override
  @optionalTypeArgs
  TResult? whenOrNull<TResult extends Object?>({
    TResult? Function()? createSample,
    TResult? Function()? initialLoad,
    TResult? Function(DateTime date, int delay)? getDiaryList,
    TResult? Function(DiaryList diaryList, List<DiaryList> lists)?
        getDiaryColumns,
    TResult? Function(DiaryList diaryList, List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells, List<DiaryList> lists)?
        getDiaryCells,
    TResult? Function(DiaryCell diaryCell)? selectDiaryCell,
    TResult? Function(List<DiaryCell> diaryCells)? selectDiaryCells,
    TResult? Function(CapitalCell capitalCell)? selectCapitalCell,
    TResult? Function(
            DiaryCell diaryCell,
            GlobalObjectKey<State<StatefulWidget>> cellKey,
            DragUpdateDetails details,
            double scaleFactor)?
        onPanUpdate,
    TResult? Function(DiaryList? selectedList)? startEditingList,
    TResult? Function(
            String? newName, String? addedColumnName, int? addedColumnCount)?
        returnToLoaded,
    TResult? Function()? returnToCellsSelected,
    TResult? Function(DiaryList diaryList, String newName)? updateDiaryListName,
    TResult? Function(DiaryCell diaryCell, String? textFieldText)?
        changeDiaryCell,
    TResult? Function(CapitalCell capitalCell, String? textFieldText)?
        changeCapitalCell,
    TResult? Function(DiaryCell diaryCell, String? textFieldText)?
        updateDiaryCellInFirebase,
    TResult? Function(
            FontWeightEnum? fontWeight,
            TextDecorationEnum? textDecoration,
            FontStyleEnum? fontStyle,
            double? fontSize,
            String? color,
            HorizontalAlignmentsEnum? horizontalAlignment,
            VerticalAlignmentsEnum? verticalAlignment,
            String? backgroundColor)?
        changeDiaryCellsSettings,
    TResult? Function(BordersEditingEnum bordersEditingEnum,
            BordersStyleEnum bordersStyleEnum, Color bordersColor)?
        changeDiaryCellsBordersSettings,
    TResult? Function(
            FontWeightEnum? fontWeight,
            TextDecorationEnum? textDecoration,
            FontStyleEnum? fontStyle,
            double? fontSize,
            String? color,
            HorizontalAlignmentsEnum? horizontalAlignment,
            VerticalAlignmentsEnum? verticalAlignment,
            String? backgroundColor,
            BordersStyleEnum? bordersStyleEnum,
            Color? bordersColor)?
        changeCapitalCellSettings,
    TResult? Function(
            DiaryCell diaryCell,
            int index,
            DiaryCellTextSettings? newTextSettings,
            DiaryCellSettings? newSettings)?
        updateDiaryCellSettingsInFirebase,
    TResult? Function(DiaryColumnSettings newSettings)?
        updateCapitalCellSettingsInFirebase,
    TResult? Function(PointerMoveEvent details)? updateCapitalCellWidth,
    TResult? Function(PointerUpEvent details)? updateCapitalCellWidthInFirebase,
    TResult? Function(bool isTextEditing)? startEditingCells,
    TResult? Function(DiaryList diaryList, String name, int columnsCount,
            List<DiaryColumn> diaryColumns)?
        createDiaryColumn,
    TResult? Function(DiaryList diaryList, String columnId)? deleteDiaryColumn,
    TResult? Function(DiaryList diaryList, String? themeColor,
            String? themeBorderColor, String? themePanelBackgroundColor)?
        updateDiaryListSettings,
    TResult? Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<DiaryCell> diaryCells,
            List<CapitalCell> capitalCells,
            String themeName,
            String description)?
        shareTheme,
    TResult? Function()? startEditingColor,
    TResult? Function()? startEditingBorders,
    TResult? Function()? startEditingBorderStyle,
    TResult? Function()? turnBackEditing,
    TResult? Function()? startColumnDeleting,
    TResult? Function()? startColorThemeEditing,
    TResult? Function()? deleteColumns,
    TResult? Function()? loadThemes,
    TResult? Function(ListTheme listTheme)? loadFromTheme,
    TResult? Function(ListTheme listTheme)? takeTheme,
  }) {
    return createDiaryColumn?.call(diaryList, name, columnsCount, diaryColumns);
  }

  @override
  @optionalTypeArgs
  TResult maybeWhen<TResult extends Object?>({
    TResult Function()? createSample,
    TResult Function()? initialLoad,
    TResult Function(DateTime date, int delay)? getDiaryList,
    TResult Function(DiaryList diaryList, List<DiaryList> lists)?
        getDiaryColumns,
    TResult Function(DiaryList diaryList, List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells, List<DiaryList> lists)?
        getDiaryCells,
    TResult Function(DiaryCell diaryCell)? selectDiaryCell,
    TResult Function(List<DiaryCell> diaryCells)? selectDiaryCells,
    TResult Function(CapitalCell capitalCell)? selectCapitalCell,
    TResult Function(
            DiaryCell diaryCell,
            GlobalObjectKey<State<StatefulWidget>> cellKey,
            DragUpdateDetails details,
            double scaleFactor)?
        onPanUpdate,
    TResult Function(DiaryList? selectedList)? startEditingList,
    TResult Function(
            String? newName, String? addedColumnName, int? addedColumnCount)?
        returnToLoaded,
    TResult Function()? returnToCellsSelected,
    TResult Function(DiaryList diaryList, String newName)? updateDiaryListName,
    TResult Function(DiaryCell diaryCell, String? textFieldText)?
        changeDiaryCell,
    TResult Function(CapitalCell capitalCell, String? textFieldText)?
        changeCapitalCell,
    TResult Function(DiaryCell diaryCell, String? textFieldText)?
        updateDiaryCellInFirebase,
    TResult Function(
            FontWeightEnum? fontWeight,
            TextDecorationEnum? textDecoration,
            FontStyleEnum? fontStyle,
            double? fontSize,
            String? color,
            HorizontalAlignmentsEnum? horizontalAlignment,
            VerticalAlignmentsEnum? verticalAlignment,
            String? backgroundColor)?
        changeDiaryCellsSettings,
    TResult Function(BordersEditingEnum bordersEditingEnum,
            BordersStyleEnum bordersStyleEnum, Color bordersColor)?
        changeDiaryCellsBordersSettings,
    TResult Function(
            FontWeightEnum? fontWeight,
            TextDecorationEnum? textDecoration,
            FontStyleEnum? fontStyle,
            double? fontSize,
            String? color,
            HorizontalAlignmentsEnum? horizontalAlignment,
            VerticalAlignmentsEnum? verticalAlignment,
            String? backgroundColor,
            BordersStyleEnum? bordersStyleEnum,
            Color? bordersColor)?
        changeCapitalCellSettings,
    TResult Function(
            DiaryCell diaryCell,
            int index,
            DiaryCellTextSettings? newTextSettings,
            DiaryCellSettings? newSettings)?
        updateDiaryCellSettingsInFirebase,
    TResult Function(DiaryColumnSettings newSettings)?
        updateCapitalCellSettingsInFirebase,
    TResult Function(PointerMoveEvent details)? updateCapitalCellWidth,
    TResult Function(PointerUpEvent details)? updateCapitalCellWidthInFirebase,
    TResult Function(bool isTextEditing)? startEditingCells,
    TResult Function(DiaryList diaryList, String name, int columnsCount,
            List<DiaryColumn> diaryColumns)?
        createDiaryColumn,
    TResult Function(DiaryList diaryList, String columnId)? deleteDiaryColumn,
    TResult Function(DiaryList diaryList, String? themeColor,
            String? themeBorderColor, String? themePanelBackgroundColor)?
        updateDiaryListSettings,
    TResult Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<DiaryCell> diaryCells,
            List<CapitalCell> capitalCells,
            String themeName,
            String description)?
        shareTheme,
    TResult Function()? startEditingColor,
    TResult Function()? startEditingBorders,
    TResult Function()? startEditingBorderStyle,
    TResult Function()? turnBackEditing,
    TResult Function()? startColumnDeleting,
    TResult Function()? startColorThemeEditing,
    TResult Function()? deleteColumns,
    TResult Function()? loadThemes,
    TResult Function(ListTheme listTheme)? loadFromTheme,
    TResult Function(ListTheme listTheme)? takeTheme,
    required TResult orElse(),
  }) {
    if (createDiaryColumn != null) {
      return createDiaryColumn(diaryList, name, columnsCount, diaryColumns);
    }
    return orElse();
  }

  @override
  @optionalTypeArgs
  TResult map<TResult extends Object?>({
    required TResult Function(CreateSampleEvent value) createSample,
    required TResult Function(InitialLoadEvent value) initialLoad,
    required TResult Function(GetDiaryListEvent value) getDiaryList,
    required TResult Function(GetDiaryColumnsEvent value) getDiaryColumns,
    required TResult Function(GetDiaryCellsEvent value) getDiaryCells,
    required TResult Function(SelectDiaryCellEvent value) selectDiaryCell,
    required TResult Function(SelectDiaryCellsEvent value) selectDiaryCells,
    required TResult Function(SelectCapitalCellEvent value) selectCapitalCell,
    required TResult Function(OnPanUpdateEvent value) onPanUpdate,
    required TResult Function(StartEditingListEvent value) startEditingList,
    required TResult Function(ReturnToLoadedEvent value) returnToLoaded,
    required TResult Function(ReturnToCellsSelectedEvent value)
        returnToCellsSelected,
    required TResult Function(UpdateDiaryListNameEvent value)
        updateDiaryListName,
    required TResult Function(ChangeDiaryCellEvent value) changeDiaryCell,
    required TResult Function(ChangeCapitalCellEvent value) changeCapitalCell,
    required TResult Function(UpdateDiaryCellInFirebaseEvent value)
        updateDiaryCellInFirebase,
    required TResult Function(ChangeDiaryCellsSettingsEvent value)
        changeDiaryCellsSettings,
    required TResult Function(ChangeDiaryCellsBordersSettingsEvent value)
        changeDiaryCellsBordersSettings,
    required TResult Function(ChangeCapitalCellSettingsEvent value)
        changeCapitalCellSettings,
    required TResult Function(UpdateDiaryCellSettingsInFirebaseEvent value)
        updateDiaryCellSettingsInFirebase,
    required TResult Function(UpdateCapitalCellSettingsInFirebaseEvent value)
        updateCapitalCellSettingsInFirebase,
    required TResult Function(UpdateCapitalCellWidthEvent value)
        updateCapitalCellWidth,
    required TResult Function(UpdateCapitalCellWidthInFirebaseEvent value)
        updateCapitalCellWidthInFirebase,
    required TResult Function(StartEditingCellsEvent value) startEditingCells,
    required TResult Function(CreateDiaryColumnEvent value) createDiaryColumn,
    required TResult Function(DeleteDiaryColumnEvent value) deleteDiaryColumn,
    required TResult Function(UpdateDiaryListSettingsEvent value)
        updateDiaryListSettings,
    required TResult Function(ShareThemeEvent value) shareTheme,
    required TResult Function(StartEditingColorEvent value) startEditingColor,
    required TResult Function(StartEditingBordersEvent value)
        startEditingBorders,
    required TResult Function(StartEditingBordersStyleEvent value)
        startEditingBorderStyle,
    required TResult Function(TurnBackEditingEvent value) turnBackEditing,
    required TResult Function(StartColumnDeletingEvent value)
        startColumnDeleting,
    required TResult Function(StartColorThemeEditingEvent value)
        startColorThemeEditing,
    required TResult Function(DeleteColumnsEvent value) deleteColumns,
    required TResult Function(LoadThemesEvent value) loadThemes,
    required TResult Function(LoadFromThemeEvent value) loadFromTheme,
    required TResult Function(TakeThemeEvent value) takeTheme,
  }) {
    return createDiaryColumn(this);
  }

  @override
  @optionalTypeArgs
  TResult? mapOrNull<TResult extends Object?>({
    TResult? Function(CreateSampleEvent value)? createSample,
    TResult? Function(InitialLoadEvent value)? initialLoad,
    TResult? Function(GetDiaryListEvent value)? getDiaryList,
    TResult? Function(GetDiaryColumnsEvent value)? getDiaryColumns,
    TResult? Function(GetDiaryCellsEvent value)? getDiaryCells,
    TResult? Function(SelectDiaryCellEvent value)? selectDiaryCell,
    TResult? Function(SelectDiaryCellsEvent value)? selectDiaryCells,
    TResult? Function(SelectCapitalCellEvent value)? selectCapitalCell,
    TResult? Function(OnPanUpdateEvent value)? onPanUpdate,
    TResult? Function(StartEditingListEvent value)? startEditingList,
    TResult? Function(ReturnToLoadedEvent value)? returnToLoaded,
    TResult? Function(ReturnToCellsSelectedEvent value)? returnToCellsSelected,
    TResult? Function(UpdateDiaryListNameEvent value)? updateDiaryListName,
    TResult? Function(ChangeDiaryCellEvent value)? changeDiaryCell,
    TResult? Function(ChangeCapitalCellEvent value)? changeCapitalCell,
    TResult? Function(UpdateDiaryCellInFirebaseEvent value)?
        updateDiaryCellInFirebase,
    TResult? Function(ChangeDiaryCellsSettingsEvent value)?
        changeDiaryCellsSettings,
    TResult? Function(ChangeDiaryCellsBordersSettingsEvent value)?
        changeDiaryCellsBordersSettings,
    TResult? Function(ChangeCapitalCellSettingsEvent value)?
        changeCapitalCellSettings,
    TResult? Function(UpdateDiaryCellSettingsInFirebaseEvent value)?
        updateDiaryCellSettingsInFirebase,
    TResult? Function(UpdateCapitalCellSettingsInFirebaseEvent value)?
        updateCapitalCellSettingsInFirebase,
    TResult? Function(UpdateCapitalCellWidthEvent value)?
        updateCapitalCellWidth,
    TResult? Function(UpdateCapitalCellWidthInFirebaseEvent value)?
        updateCapitalCellWidthInFirebase,
    TResult? Function(StartEditingCellsEvent value)? startEditingCells,
    TResult? Function(CreateDiaryColumnEvent value)? createDiaryColumn,
    TResult? Function(DeleteDiaryColumnEvent value)? deleteDiaryColumn,
    TResult? Function(UpdateDiaryListSettingsEvent value)?
        updateDiaryListSettings,
    TResult? Function(ShareThemeEvent value)? shareTheme,
    TResult? Function(StartEditingColorEvent value)? startEditingColor,
    TResult? Function(StartEditingBordersEvent value)? startEditingBorders,
    TResult? Function(StartEditingBordersStyleEvent value)?
        startEditingBorderStyle,
    TResult? Function(TurnBackEditingEvent value)? turnBackEditing,
    TResult? Function(StartColumnDeletingEvent value)? startColumnDeleting,
    TResult? Function(StartColorThemeEditingEvent value)?
        startColorThemeEditing,
    TResult? Function(DeleteColumnsEvent value)? deleteColumns,
    TResult? Function(LoadThemesEvent value)? loadThemes,
    TResult? Function(LoadFromThemeEvent value)? loadFromTheme,
    TResult? Function(TakeThemeEvent value)? takeTheme,
  }) {
    return createDiaryColumn?.call(this);
  }

  @override
  @optionalTypeArgs
  TResult maybeMap<TResult extends Object?>({
    TResult Function(CreateSampleEvent value)? createSample,
    TResult Function(InitialLoadEvent value)? initialLoad,
    TResult Function(GetDiaryListEvent value)? getDiaryList,
    TResult Function(GetDiaryColumnsEvent value)? getDiaryColumns,
    TResult Function(GetDiaryCellsEvent value)? getDiaryCells,
    TResult Function(SelectDiaryCellEvent value)? selectDiaryCell,
    TResult Function(SelectDiaryCellsEvent value)? selectDiaryCells,
    TResult Function(SelectCapitalCellEvent value)? selectCapitalCell,
    TResult Function(OnPanUpdateEvent value)? onPanUpdate,
    TResult Function(StartEditingListEvent value)? startEditingList,
    TResult Function(ReturnToLoadedEvent value)? returnToLoaded,
    TResult Function(ReturnToCellsSelectedEvent value)? returnToCellsSelected,
    TResult Function(UpdateDiaryListNameEvent value)? updateDiaryListName,
    TResult Function(ChangeDiaryCellEvent value)? changeDiaryCell,
    TResult Function(ChangeCapitalCellEvent value)? changeCapitalCell,
    TResult Function(UpdateDiaryCellInFirebaseEvent value)?
        updateDiaryCellInFirebase,
    TResult Function(ChangeDiaryCellsSettingsEvent value)?
        changeDiaryCellsSettings,
    TResult Function(ChangeDiaryCellsBordersSettingsEvent value)?
        changeDiaryCellsBordersSettings,
    TResult Function(ChangeCapitalCellSettingsEvent value)?
        changeCapitalCellSettings,
    TResult Function(UpdateDiaryCellSettingsInFirebaseEvent value)?
        updateDiaryCellSettingsInFirebase,
    TResult Function(UpdateCapitalCellSettingsInFirebaseEvent value)?
        updateCapitalCellSettingsInFirebase,
    TResult Function(UpdateCapitalCellWidthEvent value)? updateCapitalCellWidth,
    TResult Function(UpdateCapitalCellWidthInFirebaseEvent value)?
        updateCapitalCellWidthInFirebase,
    TResult Function(StartEditingCellsEvent value)? startEditingCells,
    TResult Function(CreateDiaryColumnEvent value)? createDiaryColumn,
    TResult Function(DeleteDiaryColumnEvent value)? deleteDiaryColumn,
    TResult Function(UpdateDiaryListSettingsEvent value)?
        updateDiaryListSettings,
    TResult Function(ShareThemeEvent value)? shareTheme,
    TResult Function(StartEditingColorEvent value)? startEditingColor,
    TResult Function(StartEditingBordersEvent value)? startEditingBorders,
    TResult Function(StartEditingBordersStyleEvent value)?
        startEditingBorderStyle,
    TResult Function(TurnBackEditingEvent value)? turnBackEditing,
    TResult Function(StartColumnDeletingEvent value)? startColumnDeleting,
    TResult Function(StartColorThemeEditingEvent value)? startColorThemeEditing,
    TResult Function(DeleteColumnsEvent value)? deleteColumns,
    TResult Function(LoadThemesEvent value)? loadThemes,
    TResult Function(LoadFromThemeEvent value)? loadFromTheme,
    TResult Function(TakeThemeEvent value)? takeTheme,
    required TResult orElse(),
  }) {
    if (createDiaryColumn != null) {
      return createDiaryColumn(this);
    }
    return orElse();
  }
}

abstract class CreateDiaryColumnEvent implements DiaryListEvent {
  const factory CreateDiaryColumnEvent(
          {required final DiaryList diaryList,
          required final String name,
          required final int columnsCount,
          required final List<DiaryColumn> diaryColumns}) =
      _$CreateDiaryColumnEvent;

  DiaryList get diaryList;
  String get name;
  int get columnsCount;
  List<DiaryColumn> get diaryColumns;
  @JsonKey(ignore: true)
  _$$CreateDiaryColumnEventCopyWith<_$CreateDiaryColumnEvent> get copyWith =>
      throw _privateConstructorUsedError;
}

/// @nodoc
abstract class _$$DeleteDiaryColumnEventCopyWith<$Res> {
  factory _$$DeleteDiaryColumnEventCopyWith(_$DeleteDiaryColumnEvent value,
          $Res Function(_$DeleteDiaryColumnEvent) then) =
      __$$DeleteDiaryColumnEventCopyWithImpl<$Res>;
  @useResult
  $Res call({DiaryList diaryList, String columnId});
}

/// @nodoc
class __$$DeleteDiaryColumnEventCopyWithImpl<$Res>
    extends _$DiaryListEventCopyWithImpl<$Res, _$DeleteDiaryColumnEvent>
    implements _$$DeleteDiaryColumnEventCopyWith<$Res> {
  __$$DeleteDiaryColumnEventCopyWithImpl(_$DeleteDiaryColumnEvent _value,
      $Res Function(_$DeleteDiaryColumnEvent) _then)
      : super(_value, _then);

  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? diaryList = null,
    Object? columnId = null,
  }) {
    return _then(_$DeleteDiaryColumnEvent(
      diaryList: null == diaryList
          ? _value.diaryList
          : diaryList // ignore: cast_nullable_to_non_nullable
              as DiaryList,
      columnId: null == columnId
          ? _value.columnId
          : columnId // ignore: cast_nullable_to_non_nullable
              as String,
    ));
  }
}

/// @nodoc

class _$DeleteDiaryColumnEvent implements DeleteDiaryColumnEvent {
  const _$DeleteDiaryColumnEvent(
      {required this.diaryList, required this.columnId});

  @override
  final DiaryList diaryList;
  @override
  final String columnId;

  @override
  String toString() {
    return 'DiaryListEvent.deleteDiaryColumn(diaryList: $diaryList, columnId: $columnId)';
  }

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$DeleteDiaryColumnEvent &&
            (identical(other.diaryList, diaryList) ||
                other.diaryList == diaryList) &&
            (identical(other.columnId, columnId) ||
                other.columnId == columnId));
  }

  @override
  int get hashCode => Object.hash(runtimeType, diaryList, columnId);

  @JsonKey(ignore: true)
  @override
  @pragma('vm:prefer-inline')
  _$$DeleteDiaryColumnEventCopyWith<_$DeleteDiaryColumnEvent> get copyWith =>
      __$$DeleteDiaryColumnEventCopyWithImpl<_$DeleteDiaryColumnEvent>(
          this, _$identity);

  @override
  @optionalTypeArgs
  TResult when<TResult extends Object?>({
    required TResult Function() createSample,
    required TResult Function() initialLoad,
    required TResult Function(DateTime date, int delay) getDiaryList,
    required TResult Function(DiaryList diaryList, List<DiaryList> lists)
        getDiaryColumns,
    required TResult Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells,
            List<DiaryList> lists)
        getDiaryCells,
    required TResult Function(DiaryCell diaryCell) selectDiaryCell,
    required TResult Function(List<DiaryCell> diaryCells) selectDiaryCells,
    required TResult Function(CapitalCell capitalCell) selectCapitalCell,
    required TResult Function(
            DiaryCell diaryCell,
            GlobalObjectKey<State<StatefulWidget>> cellKey,
            DragUpdateDetails details,
            double scaleFactor)
        onPanUpdate,
    required TResult Function(DiaryList? selectedList) startEditingList,
    required TResult Function(
            String? newName, String? addedColumnName, int? addedColumnCount)
        returnToLoaded,
    required TResult Function() returnToCellsSelected,
    required TResult Function(DiaryList diaryList, String newName)
        updateDiaryListName,
    required TResult Function(DiaryCell diaryCell, String? textFieldText)
        changeDiaryCell,
    required TResult Function(CapitalCell capitalCell, String? textFieldText)
        changeCapitalCell,
    required TResult Function(DiaryCell diaryCell, String? textFieldText)
        updateDiaryCellInFirebase,
    required TResult Function(
            FontWeightEnum? fontWeight,
            TextDecorationEnum? textDecoration,
            FontStyleEnum? fontStyle,
            double? fontSize,
            String? color,
            HorizontalAlignmentsEnum? horizontalAlignment,
            VerticalAlignmentsEnum? verticalAlignment,
            String? backgroundColor)
        changeDiaryCellsSettings,
    required TResult Function(BordersEditingEnum bordersEditingEnum,
            BordersStyleEnum bordersStyleEnum, Color bordersColor)
        changeDiaryCellsBordersSettings,
    required TResult Function(
            FontWeightEnum? fontWeight,
            TextDecorationEnum? textDecoration,
            FontStyleEnum? fontStyle,
            double? fontSize,
            String? color,
            HorizontalAlignmentsEnum? horizontalAlignment,
            VerticalAlignmentsEnum? verticalAlignment,
            String? backgroundColor,
            BordersStyleEnum? bordersStyleEnum,
            Color? bordersColor)
        changeCapitalCellSettings,
    required TResult Function(
            DiaryCell diaryCell,
            int index,
            DiaryCellTextSettings? newTextSettings,
            DiaryCellSettings? newSettings)
        updateDiaryCellSettingsInFirebase,
    required TResult Function(DiaryColumnSettings newSettings)
        updateCapitalCellSettingsInFirebase,
    required TResult Function(PointerMoveEvent details) updateCapitalCellWidth,
    required TResult Function(PointerUpEvent details)
        updateCapitalCellWidthInFirebase,
    required TResult Function(bool isTextEditing) startEditingCells,
    required TResult Function(DiaryList diaryList, String name,
            int columnsCount, List<DiaryColumn> diaryColumns)
        createDiaryColumn,
    required TResult Function(DiaryList diaryList, String columnId)
        deleteDiaryColumn,
    required TResult Function(DiaryList diaryList, String? themeColor,
            String? themeBorderColor, String? themePanelBackgroundColor)
        updateDiaryListSettings,
    required TResult Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<DiaryCell> diaryCells,
            List<CapitalCell> capitalCells,
            String themeName,
            String description)
        shareTheme,
    required TResult Function() startEditingColor,
    required TResult Function() startEditingBorders,
    required TResult Function() startEditingBorderStyle,
    required TResult Function() turnBackEditing,
    required TResult Function() startColumnDeleting,
    required TResult Function() startColorThemeEditing,
    required TResult Function() deleteColumns,
    required TResult Function() loadThemes,
    required TResult Function(ListTheme listTheme) loadFromTheme,
    required TResult Function(ListTheme listTheme) takeTheme,
  }) {
    return deleteDiaryColumn(diaryList, columnId);
  }

  @override
  @optionalTypeArgs
  TResult? whenOrNull<TResult extends Object?>({
    TResult? Function()? createSample,
    TResult? Function()? initialLoad,
    TResult? Function(DateTime date, int delay)? getDiaryList,
    TResult? Function(DiaryList diaryList, List<DiaryList> lists)?
        getDiaryColumns,
    TResult? Function(DiaryList diaryList, List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells, List<DiaryList> lists)?
        getDiaryCells,
    TResult? Function(DiaryCell diaryCell)? selectDiaryCell,
    TResult? Function(List<DiaryCell> diaryCells)? selectDiaryCells,
    TResult? Function(CapitalCell capitalCell)? selectCapitalCell,
    TResult? Function(
            DiaryCell diaryCell,
            GlobalObjectKey<State<StatefulWidget>> cellKey,
            DragUpdateDetails details,
            double scaleFactor)?
        onPanUpdate,
    TResult? Function(DiaryList? selectedList)? startEditingList,
    TResult? Function(
            String? newName, String? addedColumnName, int? addedColumnCount)?
        returnToLoaded,
    TResult? Function()? returnToCellsSelected,
    TResult? Function(DiaryList diaryList, String newName)? updateDiaryListName,
    TResult? Function(DiaryCell diaryCell, String? textFieldText)?
        changeDiaryCell,
    TResult? Function(CapitalCell capitalCell, String? textFieldText)?
        changeCapitalCell,
    TResult? Function(DiaryCell diaryCell, String? textFieldText)?
        updateDiaryCellInFirebase,
    TResult? Function(
            FontWeightEnum? fontWeight,
            TextDecorationEnum? textDecoration,
            FontStyleEnum? fontStyle,
            double? fontSize,
            String? color,
            HorizontalAlignmentsEnum? horizontalAlignment,
            VerticalAlignmentsEnum? verticalAlignment,
            String? backgroundColor)?
        changeDiaryCellsSettings,
    TResult? Function(BordersEditingEnum bordersEditingEnum,
            BordersStyleEnum bordersStyleEnum, Color bordersColor)?
        changeDiaryCellsBordersSettings,
    TResult? Function(
            FontWeightEnum? fontWeight,
            TextDecorationEnum? textDecoration,
            FontStyleEnum? fontStyle,
            double? fontSize,
            String? color,
            HorizontalAlignmentsEnum? horizontalAlignment,
            VerticalAlignmentsEnum? verticalAlignment,
            String? backgroundColor,
            BordersStyleEnum? bordersStyleEnum,
            Color? bordersColor)?
        changeCapitalCellSettings,
    TResult? Function(
            DiaryCell diaryCell,
            int index,
            DiaryCellTextSettings? newTextSettings,
            DiaryCellSettings? newSettings)?
        updateDiaryCellSettingsInFirebase,
    TResult? Function(DiaryColumnSettings newSettings)?
        updateCapitalCellSettingsInFirebase,
    TResult? Function(PointerMoveEvent details)? updateCapitalCellWidth,
    TResult? Function(PointerUpEvent details)? updateCapitalCellWidthInFirebase,
    TResult? Function(bool isTextEditing)? startEditingCells,
    TResult? Function(DiaryList diaryList, String name, int columnsCount,
            List<DiaryColumn> diaryColumns)?
        createDiaryColumn,
    TResult? Function(DiaryList diaryList, String columnId)? deleteDiaryColumn,
    TResult? Function(DiaryList diaryList, String? themeColor,
            String? themeBorderColor, String? themePanelBackgroundColor)?
        updateDiaryListSettings,
    TResult? Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<DiaryCell> diaryCells,
            List<CapitalCell> capitalCells,
            String themeName,
            String description)?
        shareTheme,
    TResult? Function()? startEditingColor,
    TResult? Function()? startEditingBorders,
    TResult? Function()? startEditingBorderStyle,
    TResult? Function()? turnBackEditing,
    TResult? Function()? startColumnDeleting,
    TResult? Function()? startColorThemeEditing,
    TResult? Function()? deleteColumns,
    TResult? Function()? loadThemes,
    TResult? Function(ListTheme listTheme)? loadFromTheme,
    TResult? Function(ListTheme listTheme)? takeTheme,
  }) {
    return deleteDiaryColumn?.call(diaryList, columnId);
  }

  @override
  @optionalTypeArgs
  TResult maybeWhen<TResult extends Object?>({
    TResult Function()? createSample,
    TResult Function()? initialLoad,
    TResult Function(DateTime date, int delay)? getDiaryList,
    TResult Function(DiaryList diaryList, List<DiaryList> lists)?
        getDiaryColumns,
    TResult Function(DiaryList diaryList, List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells, List<DiaryList> lists)?
        getDiaryCells,
    TResult Function(DiaryCell diaryCell)? selectDiaryCell,
    TResult Function(List<DiaryCell> diaryCells)? selectDiaryCells,
    TResult Function(CapitalCell capitalCell)? selectCapitalCell,
    TResult Function(
            DiaryCell diaryCell,
            GlobalObjectKey<State<StatefulWidget>> cellKey,
            DragUpdateDetails details,
            double scaleFactor)?
        onPanUpdate,
    TResult Function(DiaryList? selectedList)? startEditingList,
    TResult Function(
            String? newName, String? addedColumnName, int? addedColumnCount)?
        returnToLoaded,
    TResult Function()? returnToCellsSelected,
    TResult Function(DiaryList diaryList, String newName)? updateDiaryListName,
    TResult Function(DiaryCell diaryCell, String? textFieldText)?
        changeDiaryCell,
    TResult Function(CapitalCell capitalCell, String? textFieldText)?
        changeCapitalCell,
    TResult Function(DiaryCell diaryCell, String? textFieldText)?
        updateDiaryCellInFirebase,
    TResult Function(
            FontWeightEnum? fontWeight,
            TextDecorationEnum? textDecoration,
            FontStyleEnum? fontStyle,
            double? fontSize,
            String? color,
            HorizontalAlignmentsEnum? horizontalAlignment,
            VerticalAlignmentsEnum? verticalAlignment,
            String? backgroundColor)?
        changeDiaryCellsSettings,
    TResult Function(BordersEditingEnum bordersEditingEnum,
            BordersStyleEnum bordersStyleEnum, Color bordersColor)?
        changeDiaryCellsBordersSettings,
    TResult Function(
            FontWeightEnum? fontWeight,
            TextDecorationEnum? textDecoration,
            FontStyleEnum? fontStyle,
            double? fontSize,
            String? color,
            HorizontalAlignmentsEnum? horizontalAlignment,
            VerticalAlignmentsEnum? verticalAlignment,
            String? backgroundColor,
            BordersStyleEnum? bordersStyleEnum,
            Color? bordersColor)?
        changeCapitalCellSettings,
    TResult Function(
            DiaryCell diaryCell,
            int index,
            DiaryCellTextSettings? newTextSettings,
            DiaryCellSettings? newSettings)?
        updateDiaryCellSettingsInFirebase,
    TResult Function(DiaryColumnSettings newSettings)?
        updateCapitalCellSettingsInFirebase,
    TResult Function(PointerMoveEvent details)? updateCapitalCellWidth,
    TResult Function(PointerUpEvent details)? updateCapitalCellWidthInFirebase,
    TResult Function(bool isTextEditing)? startEditingCells,
    TResult Function(DiaryList diaryList, String name, int columnsCount,
            List<DiaryColumn> diaryColumns)?
        createDiaryColumn,
    TResult Function(DiaryList diaryList, String columnId)? deleteDiaryColumn,
    TResult Function(DiaryList diaryList, String? themeColor,
            String? themeBorderColor, String? themePanelBackgroundColor)?
        updateDiaryListSettings,
    TResult Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<DiaryCell> diaryCells,
            List<CapitalCell> capitalCells,
            String themeName,
            String description)?
        shareTheme,
    TResult Function()? startEditingColor,
    TResult Function()? startEditingBorders,
    TResult Function()? startEditingBorderStyle,
    TResult Function()? turnBackEditing,
    TResult Function()? startColumnDeleting,
    TResult Function()? startColorThemeEditing,
    TResult Function()? deleteColumns,
    TResult Function()? loadThemes,
    TResult Function(ListTheme listTheme)? loadFromTheme,
    TResult Function(ListTheme listTheme)? takeTheme,
    required TResult orElse(),
  }) {
    if (deleteDiaryColumn != null) {
      return deleteDiaryColumn(diaryList, columnId);
    }
    return orElse();
  }

  @override
  @optionalTypeArgs
  TResult map<TResult extends Object?>({
    required TResult Function(CreateSampleEvent value) createSample,
    required TResult Function(InitialLoadEvent value) initialLoad,
    required TResult Function(GetDiaryListEvent value) getDiaryList,
    required TResult Function(GetDiaryColumnsEvent value) getDiaryColumns,
    required TResult Function(GetDiaryCellsEvent value) getDiaryCells,
    required TResult Function(SelectDiaryCellEvent value) selectDiaryCell,
    required TResult Function(SelectDiaryCellsEvent value) selectDiaryCells,
    required TResult Function(SelectCapitalCellEvent value) selectCapitalCell,
    required TResult Function(OnPanUpdateEvent value) onPanUpdate,
    required TResult Function(StartEditingListEvent value) startEditingList,
    required TResult Function(ReturnToLoadedEvent value) returnToLoaded,
    required TResult Function(ReturnToCellsSelectedEvent value)
        returnToCellsSelected,
    required TResult Function(UpdateDiaryListNameEvent value)
        updateDiaryListName,
    required TResult Function(ChangeDiaryCellEvent value) changeDiaryCell,
    required TResult Function(ChangeCapitalCellEvent value) changeCapitalCell,
    required TResult Function(UpdateDiaryCellInFirebaseEvent value)
        updateDiaryCellInFirebase,
    required TResult Function(ChangeDiaryCellsSettingsEvent value)
        changeDiaryCellsSettings,
    required TResult Function(ChangeDiaryCellsBordersSettingsEvent value)
        changeDiaryCellsBordersSettings,
    required TResult Function(ChangeCapitalCellSettingsEvent value)
        changeCapitalCellSettings,
    required TResult Function(UpdateDiaryCellSettingsInFirebaseEvent value)
        updateDiaryCellSettingsInFirebase,
    required TResult Function(UpdateCapitalCellSettingsInFirebaseEvent value)
        updateCapitalCellSettingsInFirebase,
    required TResult Function(UpdateCapitalCellWidthEvent value)
        updateCapitalCellWidth,
    required TResult Function(UpdateCapitalCellWidthInFirebaseEvent value)
        updateCapitalCellWidthInFirebase,
    required TResult Function(StartEditingCellsEvent value) startEditingCells,
    required TResult Function(CreateDiaryColumnEvent value) createDiaryColumn,
    required TResult Function(DeleteDiaryColumnEvent value) deleteDiaryColumn,
    required TResult Function(UpdateDiaryListSettingsEvent value)
        updateDiaryListSettings,
    required TResult Function(ShareThemeEvent value) shareTheme,
    required TResult Function(StartEditingColorEvent value) startEditingColor,
    required TResult Function(StartEditingBordersEvent value)
        startEditingBorders,
    required TResult Function(StartEditingBordersStyleEvent value)
        startEditingBorderStyle,
    required TResult Function(TurnBackEditingEvent value) turnBackEditing,
    required TResult Function(StartColumnDeletingEvent value)
        startColumnDeleting,
    required TResult Function(StartColorThemeEditingEvent value)
        startColorThemeEditing,
    required TResult Function(DeleteColumnsEvent value) deleteColumns,
    required TResult Function(LoadThemesEvent value) loadThemes,
    required TResult Function(LoadFromThemeEvent value) loadFromTheme,
    required TResult Function(TakeThemeEvent value) takeTheme,
  }) {
    return deleteDiaryColumn(this);
  }

  @override
  @optionalTypeArgs
  TResult? mapOrNull<TResult extends Object?>({
    TResult? Function(CreateSampleEvent value)? createSample,
    TResult? Function(InitialLoadEvent value)? initialLoad,
    TResult? Function(GetDiaryListEvent value)? getDiaryList,
    TResult? Function(GetDiaryColumnsEvent value)? getDiaryColumns,
    TResult? Function(GetDiaryCellsEvent value)? getDiaryCells,
    TResult? Function(SelectDiaryCellEvent value)? selectDiaryCell,
    TResult? Function(SelectDiaryCellsEvent value)? selectDiaryCells,
    TResult? Function(SelectCapitalCellEvent value)? selectCapitalCell,
    TResult? Function(OnPanUpdateEvent value)? onPanUpdate,
    TResult? Function(StartEditingListEvent value)? startEditingList,
    TResult? Function(ReturnToLoadedEvent value)? returnToLoaded,
    TResult? Function(ReturnToCellsSelectedEvent value)? returnToCellsSelected,
    TResult? Function(UpdateDiaryListNameEvent value)? updateDiaryListName,
    TResult? Function(ChangeDiaryCellEvent value)? changeDiaryCell,
    TResult? Function(ChangeCapitalCellEvent value)? changeCapitalCell,
    TResult? Function(UpdateDiaryCellInFirebaseEvent value)?
        updateDiaryCellInFirebase,
    TResult? Function(ChangeDiaryCellsSettingsEvent value)?
        changeDiaryCellsSettings,
    TResult? Function(ChangeDiaryCellsBordersSettingsEvent value)?
        changeDiaryCellsBordersSettings,
    TResult? Function(ChangeCapitalCellSettingsEvent value)?
        changeCapitalCellSettings,
    TResult? Function(UpdateDiaryCellSettingsInFirebaseEvent value)?
        updateDiaryCellSettingsInFirebase,
    TResult? Function(UpdateCapitalCellSettingsInFirebaseEvent value)?
        updateCapitalCellSettingsInFirebase,
    TResult? Function(UpdateCapitalCellWidthEvent value)?
        updateCapitalCellWidth,
    TResult? Function(UpdateCapitalCellWidthInFirebaseEvent value)?
        updateCapitalCellWidthInFirebase,
    TResult? Function(StartEditingCellsEvent value)? startEditingCells,
    TResult? Function(CreateDiaryColumnEvent value)? createDiaryColumn,
    TResult? Function(DeleteDiaryColumnEvent value)? deleteDiaryColumn,
    TResult? Function(UpdateDiaryListSettingsEvent value)?
        updateDiaryListSettings,
    TResult? Function(ShareThemeEvent value)? shareTheme,
    TResult? Function(StartEditingColorEvent value)? startEditingColor,
    TResult? Function(StartEditingBordersEvent value)? startEditingBorders,
    TResult? Function(StartEditingBordersStyleEvent value)?
        startEditingBorderStyle,
    TResult? Function(TurnBackEditingEvent value)? turnBackEditing,
    TResult? Function(StartColumnDeletingEvent value)? startColumnDeleting,
    TResult? Function(StartColorThemeEditingEvent value)?
        startColorThemeEditing,
    TResult? Function(DeleteColumnsEvent value)? deleteColumns,
    TResult? Function(LoadThemesEvent value)? loadThemes,
    TResult? Function(LoadFromThemeEvent value)? loadFromTheme,
    TResult? Function(TakeThemeEvent value)? takeTheme,
  }) {
    return deleteDiaryColumn?.call(this);
  }

  @override
  @optionalTypeArgs
  TResult maybeMap<TResult extends Object?>({
    TResult Function(CreateSampleEvent value)? createSample,
    TResult Function(InitialLoadEvent value)? initialLoad,
    TResult Function(GetDiaryListEvent value)? getDiaryList,
    TResult Function(GetDiaryColumnsEvent value)? getDiaryColumns,
    TResult Function(GetDiaryCellsEvent value)? getDiaryCells,
    TResult Function(SelectDiaryCellEvent value)? selectDiaryCell,
    TResult Function(SelectDiaryCellsEvent value)? selectDiaryCells,
    TResult Function(SelectCapitalCellEvent value)? selectCapitalCell,
    TResult Function(OnPanUpdateEvent value)? onPanUpdate,
    TResult Function(StartEditingListEvent value)? startEditingList,
    TResult Function(ReturnToLoadedEvent value)? returnToLoaded,
    TResult Function(ReturnToCellsSelectedEvent value)? returnToCellsSelected,
    TResult Function(UpdateDiaryListNameEvent value)? updateDiaryListName,
    TResult Function(ChangeDiaryCellEvent value)? changeDiaryCell,
    TResult Function(ChangeCapitalCellEvent value)? changeCapitalCell,
    TResult Function(UpdateDiaryCellInFirebaseEvent value)?
        updateDiaryCellInFirebase,
    TResult Function(ChangeDiaryCellsSettingsEvent value)?
        changeDiaryCellsSettings,
    TResult Function(ChangeDiaryCellsBordersSettingsEvent value)?
        changeDiaryCellsBordersSettings,
    TResult Function(ChangeCapitalCellSettingsEvent value)?
        changeCapitalCellSettings,
    TResult Function(UpdateDiaryCellSettingsInFirebaseEvent value)?
        updateDiaryCellSettingsInFirebase,
    TResult Function(UpdateCapitalCellSettingsInFirebaseEvent value)?
        updateCapitalCellSettingsInFirebase,
    TResult Function(UpdateCapitalCellWidthEvent value)? updateCapitalCellWidth,
    TResult Function(UpdateCapitalCellWidthInFirebaseEvent value)?
        updateCapitalCellWidthInFirebase,
    TResult Function(StartEditingCellsEvent value)? startEditingCells,
    TResult Function(CreateDiaryColumnEvent value)? createDiaryColumn,
    TResult Function(DeleteDiaryColumnEvent value)? deleteDiaryColumn,
    TResult Function(UpdateDiaryListSettingsEvent value)?
        updateDiaryListSettings,
    TResult Function(ShareThemeEvent value)? shareTheme,
    TResult Function(StartEditingColorEvent value)? startEditingColor,
    TResult Function(StartEditingBordersEvent value)? startEditingBorders,
    TResult Function(StartEditingBordersStyleEvent value)?
        startEditingBorderStyle,
    TResult Function(TurnBackEditingEvent value)? turnBackEditing,
    TResult Function(StartColumnDeletingEvent value)? startColumnDeleting,
    TResult Function(StartColorThemeEditingEvent value)? startColorThemeEditing,
    TResult Function(DeleteColumnsEvent value)? deleteColumns,
    TResult Function(LoadThemesEvent value)? loadThemes,
    TResult Function(LoadFromThemeEvent value)? loadFromTheme,
    TResult Function(TakeThemeEvent value)? takeTheme,
    required TResult orElse(),
  }) {
    if (deleteDiaryColumn != null) {
      return deleteDiaryColumn(this);
    }
    return orElse();
  }
}

abstract class DeleteDiaryColumnEvent implements DiaryListEvent {
  const factory DeleteDiaryColumnEvent(
      {required final DiaryList diaryList,
      required final String columnId}) = _$DeleteDiaryColumnEvent;

  DiaryList get diaryList;
  String get columnId;
  @JsonKey(ignore: true)
  _$$DeleteDiaryColumnEventCopyWith<_$DeleteDiaryColumnEvent> get copyWith =>
      throw _privateConstructorUsedError;
}

/// @nodoc
abstract class _$$UpdateDiaryListSettingsEventCopyWith<$Res> {
  factory _$$UpdateDiaryListSettingsEventCopyWith(
          _$UpdateDiaryListSettingsEvent value,
          $Res Function(_$UpdateDiaryListSettingsEvent) then) =
      __$$UpdateDiaryListSettingsEventCopyWithImpl<$Res>;
  @useResult
  $Res call(
      {DiaryList diaryList,
      String? themeColor,
      String? themeBorderColor,
      String? themePanelBackgroundColor});
}

/// @nodoc
class __$$UpdateDiaryListSettingsEventCopyWithImpl<$Res>
    extends _$DiaryListEventCopyWithImpl<$Res, _$UpdateDiaryListSettingsEvent>
    implements _$$UpdateDiaryListSettingsEventCopyWith<$Res> {
  __$$UpdateDiaryListSettingsEventCopyWithImpl(
      _$UpdateDiaryListSettingsEvent _value,
      $Res Function(_$UpdateDiaryListSettingsEvent) _then)
      : super(_value, _then);

  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? diaryList = null,
    Object? themeColor = freezed,
    Object? themeBorderColor = freezed,
    Object? themePanelBackgroundColor = freezed,
  }) {
    return _then(_$UpdateDiaryListSettingsEvent(
      diaryList: null == diaryList
          ? _value.diaryList
          : diaryList // ignore: cast_nullable_to_non_nullable
              as DiaryList,
      themeColor: freezed == themeColor
          ? _value.themeColor
          : themeColor // ignore: cast_nullable_to_non_nullable
              as String?,
      themeBorderColor: freezed == themeBorderColor
          ? _value.themeBorderColor
          : themeBorderColor // ignore: cast_nullable_to_non_nullable
              as String?,
      themePanelBackgroundColor: freezed == themePanelBackgroundColor
          ? _value.themePanelBackgroundColor
          : themePanelBackgroundColor // ignore: cast_nullable_to_non_nullable
              as String?,
    ));
  }
}

/// @nodoc

class _$UpdateDiaryListSettingsEvent implements UpdateDiaryListSettingsEvent {
  const _$UpdateDiaryListSettingsEvent(
      {required this.diaryList,
      this.themeColor,
      this.themeBorderColor,
      this.themePanelBackgroundColor});

  @override
  final DiaryList diaryList;
  @override
  final String? themeColor;
  @override
  final String? themeBorderColor;
  @override
  final String? themePanelBackgroundColor;

  @override
  String toString() {
    return 'DiaryListEvent.updateDiaryListSettings(diaryList: $diaryList, themeColor: $themeColor, themeBorderColor: $themeBorderColor, themePanelBackgroundColor: $themePanelBackgroundColor)';
  }

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$UpdateDiaryListSettingsEvent &&
            (identical(other.diaryList, diaryList) ||
                other.diaryList == diaryList) &&
            (identical(other.themeColor, themeColor) ||
                other.themeColor == themeColor) &&
            (identical(other.themeBorderColor, themeBorderColor) ||
                other.themeBorderColor == themeBorderColor) &&
            (identical(other.themePanelBackgroundColor,
                    themePanelBackgroundColor) ||
                other.themePanelBackgroundColor == themePanelBackgroundColor));
  }

  @override
  int get hashCode => Object.hash(runtimeType, diaryList, themeColor,
      themeBorderColor, themePanelBackgroundColor);

  @JsonKey(ignore: true)
  @override
  @pragma('vm:prefer-inline')
  _$$UpdateDiaryListSettingsEventCopyWith<_$UpdateDiaryListSettingsEvent>
      get copyWith => __$$UpdateDiaryListSettingsEventCopyWithImpl<
          _$UpdateDiaryListSettingsEvent>(this, _$identity);

  @override
  @optionalTypeArgs
  TResult when<TResult extends Object?>({
    required TResult Function() createSample,
    required TResult Function() initialLoad,
    required TResult Function(DateTime date, int delay) getDiaryList,
    required TResult Function(DiaryList diaryList, List<DiaryList> lists)
        getDiaryColumns,
    required TResult Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells,
            List<DiaryList> lists)
        getDiaryCells,
    required TResult Function(DiaryCell diaryCell) selectDiaryCell,
    required TResult Function(List<DiaryCell> diaryCells) selectDiaryCells,
    required TResult Function(CapitalCell capitalCell) selectCapitalCell,
    required TResult Function(
            DiaryCell diaryCell,
            GlobalObjectKey<State<StatefulWidget>> cellKey,
            DragUpdateDetails details,
            double scaleFactor)
        onPanUpdate,
    required TResult Function(DiaryList? selectedList) startEditingList,
    required TResult Function(
            String? newName, String? addedColumnName, int? addedColumnCount)
        returnToLoaded,
    required TResult Function() returnToCellsSelected,
    required TResult Function(DiaryList diaryList, String newName)
        updateDiaryListName,
    required TResult Function(DiaryCell diaryCell, String? textFieldText)
        changeDiaryCell,
    required TResult Function(CapitalCell capitalCell, String? textFieldText)
        changeCapitalCell,
    required TResult Function(DiaryCell diaryCell, String? textFieldText)
        updateDiaryCellInFirebase,
    required TResult Function(
            FontWeightEnum? fontWeight,
            TextDecorationEnum? textDecoration,
            FontStyleEnum? fontStyle,
            double? fontSize,
            String? color,
            HorizontalAlignmentsEnum? horizontalAlignment,
            VerticalAlignmentsEnum? verticalAlignment,
            String? backgroundColor)
        changeDiaryCellsSettings,
    required TResult Function(BordersEditingEnum bordersEditingEnum,
            BordersStyleEnum bordersStyleEnum, Color bordersColor)
        changeDiaryCellsBordersSettings,
    required TResult Function(
            FontWeightEnum? fontWeight,
            TextDecorationEnum? textDecoration,
            FontStyleEnum? fontStyle,
            double? fontSize,
            String? color,
            HorizontalAlignmentsEnum? horizontalAlignment,
            VerticalAlignmentsEnum? verticalAlignment,
            String? backgroundColor,
            BordersStyleEnum? bordersStyleEnum,
            Color? bordersColor)
        changeCapitalCellSettings,
    required TResult Function(
            DiaryCell diaryCell,
            int index,
            DiaryCellTextSettings? newTextSettings,
            DiaryCellSettings? newSettings)
        updateDiaryCellSettingsInFirebase,
    required TResult Function(DiaryColumnSettings newSettings)
        updateCapitalCellSettingsInFirebase,
    required TResult Function(PointerMoveEvent details) updateCapitalCellWidth,
    required TResult Function(PointerUpEvent details)
        updateCapitalCellWidthInFirebase,
    required TResult Function(bool isTextEditing) startEditingCells,
    required TResult Function(DiaryList diaryList, String name,
            int columnsCount, List<DiaryColumn> diaryColumns)
        createDiaryColumn,
    required TResult Function(DiaryList diaryList, String columnId)
        deleteDiaryColumn,
    required TResult Function(DiaryList diaryList, String? themeColor,
            String? themeBorderColor, String? themePanelBackgroundColor)
        updateDiaryListSettings,
    required TResult Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<DiaryCell> diaryCells,
            List<CapitalCell> capitalCells,
            String themeName,
            String description)
        shareTheme,
    required TResult Function() startEditingColor,
    required TResult Function() startEditingBorders,
    required TResult Function() startEditingBorderStyle,
    required TResult Function() turnBackEditing,
    required TResult Function() startColumnDeleting,
    required TResult Function() startColorThemeEditing,
    required TResult Function() deleteColumns,
    required TResult Function() loadThemes,
    required TResult Function(ListTheme listTheme) loadFromTheme,
    required TResult Function(ListTheme listTheme) takeTheme,
  }) {
    return updateDiaryListSettings(
        diaryList, themeColor, themeBorderColor, themePanelBackgroundColor);
  }

  @override
  @optionalTypeArgs
  TResult? whenOrNull<TResult extends Object?>({
    TResult? Function()? createSample,
    TResult? Function()? initialLoad,
    TResult? Function(DateTime date, int delay)? getDiaryList,
    TResult? Function(DiaryList diaryList, List<DiaryList> lists)?
        getDiaryColumns,
    TResult? Function(DiaryList diaryList, List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells, List<DiaryList> lists)?
        getDiaryCells,
    TResult? Function(DiaryCell diaryCell)? selectDiaryCell,
    TResult? Function(List<DiaryCell> diaryCells)? selectDiaryCells,
    TResult? Function(CapitalCell capitalCell)? selectCapitalCell,
    TResult? Function(
            DiaryCell diaryCell,
            GlobalObjectKey<State<StatefulWidget>> cellKey,
            DragUpdateDetails details,
            double scaleFactor)?
        onPanUpdate,
    TResult? Function(DiaryList? selectedList)? startEditingList,
    TResult? Function(
            String? newName, String? addedColumnName, int? addedColumnCount)?
        returnToLoaded,
    TResult? Function()? returnToCellsSelected,
    TResult? Function(DiaryList diaryList, String newName)? updateDiaryListName,
    TResult? Function(DiaryCell diaryCell, String? textFieldText)?
        changeDiaryCell,
    TResult? Function(CapitalCell capitalCell, String? textFieldText)?
        changeCapitalCell,
    TResult? Function(DiaryCell diaryCell, String? textFieldText)?
        updateDiaryCellInFirebase,
    TResult? Function(
            FontWeightEnum? fontWeight,
            TextDecorationEnum? textDecoration,
            FontStyleEnum? fontStyle,
            double? fontSize,
            String? color,
            HorizontalAlignmentsEnum? horizontalAlignment,
            VerticalAlignmentsEnum? verticalAlignment,
            String? backgroundColor)?
        changeDiaryCellsSettings,
    TResult? Function(BordersEditingEnum bordersEditingEnum,
            BordersStyleEnum bordersStyleEnum, Color bordersColor)?
        changeDiaryCellsBordersSettings,
    TResult? Function(
            FontWeightEnum? fontWeight,
            TextDecorationEnum? textDecoration,
            FontStyleEnum? fontStyle,
            double? fontSize,
            String? color,
            HorizontalAlignmentsEnum? horizontalAlignment,
            VerticalAlignmentsEnum? verticalAlignment,
            String? backgroundColor,
            BordersStyleEnum? bordersStyleEnum,
            Color? bordersColor)?
        changeCapitalCellSettings,
    TResult? Function(
            DiaryCell diaryCell,
            int index,
            DiaryCellTextSettings? newTextSettings,
            DiaryCellSettings? newSettings)?
        updateDiaryCellSettingsInFirebase,
    TResult? Function(DiaryColumnSettings newSettings)?
        updateCapitalCellSettingsInFirebase,
    TResult? Function(PointerMoveEvent details)? updateCapitalCellWidth,
    TResult? Function(PointerUpEvent details)? updateCapitalCellWidthInFirebase,
    TResult? Function(bool isTextEditing)? startEditingCells,
    TResult? Function(DiaryList diaryList, String name, int columnsCount,
            List<DiaryColumn> diaryColumns)?
        createDiaryColumn,
    TResult? Function(DiaryList diaryList, String columnId)? deleteDiaryColumn,
    TResult? Function(DiaryList diaryList, String? themeColor,
            String? themeBorderColor, String? themePanelBackgroundColor)?
        updateDiaryListSettings,
    TResult? Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<DiaryCell> diaryCells,
            List<CapitalCell> capitalCells,
            String themeName,
            String description)?
        shareTheme,
    TResult? Function()? startEditingColor,
    TResult? Function()? startEditingBorders,
    TResult? Function()? startEditingBorderStyle,
    TResult? Function()? turnBackEditing,
    TResult? Function()? startColumnDeleting,
    TResult? Function()? startColorThemeEditing,
    TResult? Function()? deleteColumns,
    TResult? Function()? loadThemes,
    TResult? Function(ListTheme listTheme)? loadFromTheme,
    TResult? Function(ListTheme listTheme)? takeTheme,
  }) {
    return updateDiaryListSettings?.call(
        diaryList, themeColor, themeBorderColor, themePanelBackgroundColor);
  }

  @override
  @optionalTypeArgs
  TResult maybeWhen<TResult extends Object?>({
    TResult Function()? createSample,
    TResult Function()? initialLoad,
    TResult Function(DateTime date, int delay)? getDiaryList,
    TResult Function(DiaryList diaryList, List<DiaryList> lists)?
        getDiaryColumns,
    TResult Function(DiaryList diaryList, List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells, List<DiaryList> lists)?
        getDiaryCells,
    TResult Function(DiaryCell diaryCell)? selectDiaryCell,
    TResult Function(List<DiaryCell> diaryCells)? selectDiaryCells,
    TResult Function(CapitalCell capitalCell)? selectCapitalCell,
    TResult Function(
            DiaryCell diaryCell,
            GlobalObjectKey<State<StatefulWidget>> cellKey,
            DragUpdateDetails details,
            double scaleFactor)?
        onPanUpdate,
    TResult Function(DiaryList? selectedList)? startEditingList,
    TResult Function(
            String? newName, String? addedColumnName, int? addedColumnCount)?
        returnToLoaded,
    TResult Function()? returnToCellsSelected,
    TResult Function(DiaryList diaryList, String newName)? updateDiaryListName,
    TResult Function(DiaryCell diaryCell, String? textFieldText)?
        changeDiaryCell,
    TResult Function(CapitalCell capitalCell, String? textFieldText)?
        changeCapitalCell,
    TResult Function(DiaryCell diaryCell, String? textFieldText)?
        updateDiaryCellInFirebase,
    TResult Function(
            FontWeightEnum? fontWeight,
            TextDecorationEnum? textDecoration,
            FontStyleEnum? fontStyle,
            double? fontSize,
            String? color,
            HorizontalAlignmentsEnum? horizontalAlignment,
            VerticalAlignmentsEnum? verticalAlignment,
            String? backgroundColor)?
        changeDiaryCellsSettings,
    TResult Function(BordersEditingEnum bordersEditingEnum,
            BordersStyleEnum bordersStyleEnum, Color bordersColor)?
        changeDiaryCellsBordersSettings,
    TResult Function(
            FontWeightEnum? fontWeight,
            TextDecorationEnum? textDecoration,
            FontStyleEnum? fontStyle,
            double? fontSize,
            String? color,
            HorizontalAlignmentsEnum? horizontalAlignment,
            VerticalAlignmentsEnum? verticalAlignment,
            String? backgroundColor,
            BordersStyleEnum? bordersStyleEnum,
            Color? bordersColor)?
        changeCapitalCellSettings,
    TResult Function(
            DiaryCell diaryCell,
            int index,
            DiaryCellTextSettings? newTextSettings,
            DiaryCellSettings? newSettings)?
        updateDiaryCellSettingsInFirebase,
    TResult Function(DiaryColumnSettings newSettings)?
        updateCapitalCellSettingsInFirebase,
    TResult Function(PointerMoveEvent details)? updateCapitalCellWidth,
    TResult Function(PointerUpEvent details)? updateCapitalCellWidthInFirebase,
    TResult Function(bool isTextEditing)? startEditingCells,
    TResult Function(DiaryList diaryList, String name, int columnsCount,
            List<DiaryColumn> diaryColumns)?
        createDiaryColumn,
    TResult Function(DiaryList diaryList, String columnId)? deleteDiaryColumn,
    TResult Function(DiaryList diaryList, String? themeColor,
            String? themeBorderColor, String? themePanelBackgroundColor)?
        updateDiaryListSettings,
    TResult Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<DiaryCell> diaryCells,
            List<CapitalCell> capitalCells,
            String themeName,
            String description)?
        shareTheme,
    TResult Function()? startEditingColor,
    TResult Function()? startEditingBorders,
    TResult Function()? startEditingBorderStyle,
    TResult Function()? turnBackEditing,
    TResult Function()? startColumnDeleting,
    TResult Function()? startColorThemeEditing,
    TResult Function()? deleteColumns,
    TResult Function()? loadThemes,
    TResult Function(ListTheme listTheme)? loadFromTheme,
    TResult Function(ListTheme listTheme)? takeTheme,
    required TResult orElse(),
  }) {
    if (updateDiaryListSettings != null) {
      return updateDiaryListSettings(
          diaryList, themeColor, themeBorderColor, themePanelBackgroundColor);
    }
    return orElse();
  }

  @override
  @optionalTypeArgs
  TResult map<TResult extends Object?>({
    required TResult Function(CreateSampleEvent value) createSample,
    required TResult Function(InitialLoadEvent value) initialLoad,
    required TResult Function(GetDiaryListEvent value) getDiaryList,
    required TResult Function(GetDiaryColumnsEvent value) getDiaryColumns,
    required TResult Function(GetDiaryCellsEvent value) getDiaryCells,
    required TResult Function(SelectDiaryCellEvent value) selectDiaryCell,
    required TResult Function(SelectDiaryCellsEvent value) selectDiaryCells,
    required TResult Function(SelectCapitalCellEvent value) selectCapitalCell,
    required TResult Function(OnPanUpdateEvent value) onPanUpdate,
    required TResult Function(StartEditingListEvent value) startEditingList,
    required TResult Function(ReturnToLoadedEvent value) returnToLoaded,
    required TResult Function(ReturnToCellsSelectedEvent value)
        returnToCellsSelected,
    required TResult Function(UpdateDiaryListNameEvent value)
        updateDiaryListName,
    required TResult Function(ChangeDiaryCellEvent value) changeDiaryCell,
    required TResult Function(ChangeCapitalCellEvent value) changeCapitalCell,
    required TResult Function(UpdateDiaryCellInFirebaseEvent value)
        updateDiaryCellInFirebase,
    required TResult Function(ChangeDiaryCellsSettingsEvent value)
        changeDiaryCellsSettings,
    required TResult Function(ChangeDiaryCellsBordersSettingsEvent value)
        changeDiaryCellsBordersSettings,
    required TResult Function(ChangeCapitalCellSettingsEvent value)
        changeCapitalCellSettings,
    required TResult Function(UpdateDiaryCellSettingsInFirebaseEvent value)
        updateDiaryCellSettingsInFirebase,
    required TResult Function(UpdateCapitalCellSettingsInFirebaseEvent value)
        updateCapitalCellSettingsInFirebase,
    required TResult Function(UpdateCapitalCellWidthEvent value)
        updateCapitalCellWidth,
    required TResult Function(UpdateCapitalCellWidthInFirebaseEvent value)
        updateCapitalCellWidthInFirebase,
    required TResult Function(StartEditingCellsEvent value) startEditingCells,
    required TResult Function(CreateDiaryColumnEvent value) createDiaryColumn,
    required TResult Function(DeleteDiaryColumnEvent value) deleteDiaryColumn,
    required TResult Function(UpdateDiaryListSettingsEvent value)
        updateDiaryListSettings,
    required TResult Function(ShareThemeEvent value) shareTheme,
    required TResult Function(StartEditingColorEvent value) startEditingColor,
    required TResult Function(StartEditingBordersEvent value)
        startEditingBorders,
    required TResult Function(StartEditingBordersStyleEvent value)
        startEditingBorderStyle,
    required TResult Function(TurnBackEditingEvent value) turnBackEditing,
    required TResult Function(StartColumnDeletingEvent value)
        startColumnDeleting,
    required TResult Function(StartColorThemeEditingEvent value)
        startColorThemeEditing,
    required TResult Function(DeleteColumnsEvent value) deleteColumns,
    required TResult Function(LoadThemesEvent value) loadThemes,
    required TResult Function(LoadFromThemeEvent value) loadFromTheme,
    required TResult Function(TakeThemeEvent value) takeTheme,
  }) {
    return updateDiaryListSettings(this);
  }

  @override
  @optionalTypeArgs
  TResult? mapOrNull<TResult extends Object?>({
    TResult? Function(CreateSampleEvent value)? createSample,
    TResult? Function(InitialLoadEvent value)? initialLoad,
    TResult? Function(GetDiaryListEvent value)? getDiaryList,
    TResult? Function(GetDiaryColumnsEvent value)? getDiaryColumns,
    TResult? Function(GetDiaryCellsEvent value)? getDiaryCells,
    TResult? Function(SelectDiaryCellEvent value)? selectDiaryCell,
    TResult? Function(SelectDiaryCellsEvent value)? selectDiaryCells,
    TResult? Function(SelectCapitalCellEvent value)? selectCapitalCell,
    TResult? Function(OnPanUpdateEvent value)? onPanUpdate,
    TResult? Function(StartEditingListEvent value)? startEditingList,
    TResult? Function(ReturnToLoadedEvent value)? returnToLoaded,
    TResult? Function(ReturnToCellsSelectedEvent value)? returnToCellsSelected,
    TResult? Function(UpdateDiaryListNameEvent value)? updateDiaryListName,
    TResult? Function(ChangeDiaryCellEvent value)? changeDiaryCell,
    TResult? Function(ChangeCapitalCellEvent value)? changeCapitalCell,
    TResult? Function(UpdateDiaryCellInFirebaseEvent value)?
        updateDiaryCellInFirebase,
    TResult? Function(ChangeDiaryCellsSettingsEvent value)?
        changeDiaryCellsSettings,
    TResult? Function(ChangeDiaryCellsBordersSettingsEvent value)?
        changeDiaryCellsBordersSettings,
    TResult? Function(ChangeCapitalCellSettingsEvent value)?
        changeCapitalCellSettings,
    TResult? Function(UpdateDiaryCellSettingsInFirebaseEvent value)?
        updateDiaryCellSettingsInFirebase,
    TResult? Function(UpdateCapitalCellSettingsInFirebaseEvent value)?
        updateCapitalCellSettingsInFirebase,
    TResult? Function(UpdateCapitalCellWidthEvent value)?
        updateCapitalCellWidth,
    TResult? Function(UpdateCapitalCellWidthInFirebaseEvent value)?
        updateCapitalCellWidthInFirebase,
    TResult? Function(StartEditingCellsEvent value)? startEditingCells,
    TResult? Function(CreateDiaryColumnEvent value)? createDiaryColumn,
    TResult? Function(DeleteDiaryColumnEvent value)? deleteDiaryColumn,
    TResult? Function(UpdateDiaryListSettingsEvent value)?
        updateDiaryListSettings,
    TResult? Function(ShareThemeEvent value)? shareTheme,
    TResult? Function(StartEditingColorEvent value)? startEditingColor,
    TResult? Function(StartEditingBordersEvent value)? startEditingBorders,
    TResult? Function(StartEditingBordersStyleEvent value)?
        startEditingBorderStyle,
    TResult? Function(TurnBackEditingEvent value)? turnBackEditing,
    TResult? Function(StartColumnDeletingEvent value)? startColumnDeleting,
    TResult? Function(StartColorThemeEditingEvent value)?
        startColorThemeEditing,
    TResult? Function(DeleteColumnsEvent value)? deleteColumns,
    TResult? Function(LoadThemesEvent value)? loadThemes,
    TResult? Function(LoadFromThemeEvent value)? loadFromTheme,
    TResult? Function(TakeThemeEvent value)? takeTheme,
  }) {
    return updateDiaryListSettings?.call(this);
  }

  @override
  @optionalTypeArgs
  TResult maybeMap<TResult extends Object?>({
    TResult Function(CreateSampleEvent value)? createSample,
    TResult Function(InitialLoadEvent value)? initialLoad,
    TResult Function(GetDiaryListEvent value)? getDiaryList,
    TResult Function(GetDiaryColumnsEvent value)? getDiaryColumns,
    TResult Function(GetDiaryCellsEvent value)? getDiaryCells,
    TResult Function(SelectDiaryCellEvent value)? selectDiaryCell,
    TResult Function(SelectDiaryCellsEvent value)? selectDiaryCells,
    TResult Function(SelectCapitalCellEvent value)? selectCapitalCell,
    TResult Function(OnPanUpdateEvent value)? onPanUpdate,
    TResult Function(StartEditingListEvent value)? startEditingList,
    TResult Function(ReturnToLoadedEvent value)? returnToLoaded,
    TResult Function(ReturnToCellsSelectedEvent value)? returnToCellsSelected,
    TResult Function(UpdateDiaryListNameEvent value)? updateDiaryListName,
    TResult Function(ChangeDiaryCellEvent value)? changeDiaryCell,
    TResult Function(ChangeCapitalCellEvent value)? changeCapitalCell,
    TResult Function(UpdateDiaryCellInFirebaseEvent value)?
        updateDiaryCellInFirebase,
    TResult Function(ChangeDiaryCellsSettingsEvent value)?
        changeDiaryCellsSettings,
    TResult Function(ChangeDiaryCellsBordersSettingsEvent value)?
        changeDiaryCellsBordersSettings,
    TResult Function(ChangeCapitalCellSettingsEvent value)?
        changeCapitalCellSettings,
    TResult Function(UpdateDiaryCellSettingsInFirebaseEvent value)?
        updateDiaryCellSettingsInFirebase,
    TResult Function(UpdateCapitalCellSettingsInFirebaseEvent value)?
        updateCapitalCellSettingsInFirebase,
    TResult Function(UpdateCapitalCellWidthEvent value)? updateCapitalCellWidth,
    TResult Function(UpdateCapitalCellWidthInFirebaseEvent value)?
        updateCapitalCellWidthInFirebase,
    TResult Function(StartEditingCellsEvent value)? startEditingCells,
    TResult Function(CreateDiaryColumnEvent value)? createDiaryColumn,
    TResult Function(DeleteDiaryColumnEvent value)? deleteDiaryColumn,
    TResult Function(UpdateDiaryListSettingsEvent value)?
        updateDiaryListSettings,
    TResult Function(ShareThemeEvent value)? shareTheme,
    TResult Function(StartEditingColorEvent value)? startEditingColor,
    TResult Function(StartEditingBordersEvent value)? startEditingBorders,
    TResult Function(StartEditingBordersStyleEvent value)?
        startEditingBorderStyle,
    TResult Function(TurnBackEditingEvent value)? turnBackEditing,
    TResult Function(StartColumnDeletingEvent value)? startColumnDeleting,
    TResult Function(StartColorThemeEditingEvent value)? startColorThemeEditing,
    TResult Function(DeleteColumnsEvent value)? deleteColumns,
    TResult Function(LoadThemesEvent value)? loadThemes,
    TResult Function(LoadFromThemeEvent value)? loadFromTheme,
    TResult Function(TakeThemeEvent value)? takeTheme,
    required TResult orElse(),
  }) {
    if (updateDiaryListSettings != null) {
      return updateDiaryListSettings(this);
    }
    return orElse();
  }
}

abstract class UpdateDiaryListSettingsEvent implements DiaryListEvent {
  const factory UpdateDiaryListSettingsEvent(
          {required final DiaryList diaryList,
          final String? themeColor,
          final String? themeBorderColor,
          final String? themePanelBackgroundColor}) =
      _$UpdateDiaryListSettingsEvent;

  DiaryList get diaryList;
  String? get themeColor;
  String? get themeBorderColor;
  String? get themePanelBackgroundColor;
  @JsonKey(ignore: true)
  _$$UpdateDiaryListSettingsEventCopyWith<_$UpdateDiaryListSettingsEvent>
      get copyWith => throw _privateConstructorUsedError;
}

/// @nodoc
abstract class _$$ShareThemeEventCopyWith<$Res> {
  factory _$$ShareThemeEventCopyWith(
          _$ShareThemeEvent value, $Res Function(_$ShareThemeEvent) then) =
      __$$ShareThemeEventCopyWithImpl<$Res>;
  @useResult
  $Res call(
      {DiaryList diaryList,
      List<DiaryColumn> diaryColumns,
      List<DiaryCell> diaryCells,
      List<CapitalCell> capitalCells,
      String themeName,
      String description});
}

/// @nodoc
class __$$ShareThemeEventCopyWithImpl<$Res>
    extends _$DiaryListEventCopyWithImpl<$Res, _$ShareThemeEvent>
    implements _$$ShareThemeEventCopyWith<$Res> {
  __$$ShareThemeEventCopyWithImpl(
      _$ShareThemeEvent _value, $Res Function(_$ShareThemeEvent) _then)
      : super(_value, _then);

  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? diaryList = null,
    Object? diaryColumns = null,
    Object? diaryCells = null,
    Object? capitalCells = null,
    Object? themeName = null,
    Object? description = null,
  }) {
    return _then(_$ShareThemeEvent(
      diaryList: null == diaryList
          ? _value.diaryList
          : diaryList // ignore: cast_nullable_to_non_nullable
              as DiaryList,
      diaryColumns: null == diaryColumns
          ? _value._diaryColumns
          : diaryColumns // ignore: cast_nullable_to_non_nullable
              as List<DiaryColumn>,
      diaryCells: null == diaryCells
          ? _value._diaryCells
          : diaryCells // ignore: cast_nullable_to_non_nullable
              as List<DiaryCell>,
      capitalCells: null == capitalCells
          ? _value._capitalCells
          : capitalCells // ignore: cast_nullable_to_non_nullable
              as List<CapitalCell>,
      themeName: null == themeName
          ? _value.themeName
          : themeName // ignore: cast_nullable_to_non_nullable
              as String,
      description: null == description
          ? _value.description
          : description // ignore: cast_nullable_to_non_nullable
              as String,
    ));
  }
}

/// @nodoc

class _$ShareThemeEvent implements ShareThemeEvent {
  const _$ShareThemeEvent(
      {required this.diaryList,
      required final List<DiaryColumn> diaryColumns,
      required final List<DiaryCell> diaryCells,
      required final List<CapitalCell> capitalCells,
      required this.themeName,
      required this.description})
      : _diaryColumns = diaryColumns,
        _diaryCells = diaryCells,
        _capitalCells = capitalCells;

  @override
  final DiaryList diaryList;
  final List<DiaryColumn> _diaryColumns;
  @override
  List<DiaryColumn> get diaryColumns {
    if (_diaryColumns is EqualUnmodifiableListView) return _diaryColumns;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_diaryColumns);
  }

  final List<DiaryCell> _diaryCells;
  @override
  List<DiaryCell> get diaryCells {
    if (_diaryCells is EqualUnmodifiableListView) return _diaryCells;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_diaryCells);
  }

  final List<CapitalCell> _capitalCells;
  @override
  List<CapitalCell> get capitalCells {
    if (_capitalCells is EqualUnmodifiableListView) return _capitalCells;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_capitalCells);
  }

  @override
  final String themeName;
  @override
  final String description;

  @override
  String toString() {
    return 'DiaryListEvent.shareTheme(diaryList: $diaryList, diaryColumns: $diaryColumns, diaryCells: $diaryCells, capitalCells: $capitalCells, themeName: $themeName, description: $description)';
  }

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$ShareThemeEvent &&
            (identical(other.diaryList, diaryList) ||
                other.diaryList == diaryList) &&
            const DeepCollectionEquality()
                .equals(other._diaryColumns, _diaryColumns) &&
            const DeepCollectionEquality()
                .equals(other._diaryCells, _diaryCells) &&
            const DeepCollectionEquality()
                .equals(other._capitalCells, _capitalCells) &&
            (identical(other.themeName, themeName) ||
                other.themeName == themeName) &&
            (identical(other.description, description) ||
                other.description == description));
  }

  @override
  int get hashCode => Object.hash(
      runtimeType,
      diaryList,
      const DeepCollectionEquality().hash(_diaryColumns),
      const DeepCollectionEquality().hash(_diaryCells),
      const DeepCollectionEquality().hash(_capitalCells),
      themeName,
      description);

  @JsonKey(ignore: true)
  @override
  @pragma('vm:prefer-inline')
  _$$ShareThemeEventCopyWith<_$ShareThemeEvent> get copyWith =>
      __$$ShareThemeEventCopyWithImpl<_$ShareThemeEvent>(this, _$identity);

  @override
  @optionalTypeArgs
  TResult when<TResult extends Object?>({
    required TResult Function() createSample,
    required TResult Function() initialLoad,
    required TResult Function(DateTime date, int delay) getDiaryList,
    required TResult Function(DiaryList diaryList, List<DiaryList> lists)
        getDiaryColumns,
    required TResult Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells,
            List<DiaryList> lists)
        getDiaryCells,
    required TResult Function(DiaryCell diaryCell) selectDiaryCell,
    required TResult Function(List<DiaryCell> diaryCells) selectDiaryCells,
    required TResult Function(CapitalCell capitalCell) selectCapitalCell,
    required TResult Function(
            DiaryCell diaryCell,
            GlobalObjectKey<State<StatefulWidget>> cellKey,
            DragUpdateDetails details,
            double scaleFactor)
        onPanUpdate,
    required TResult Function(DiaryList? selectedList) startEditingList,
    required TResult Function(
            String? newName, String? addedColumnName, int? addedColumnCount)
        returnToLoaded,
    required TResult Function() returnToCellsSelected,
    required TResult Function(DiaryList diaryList, String newName)
        updateDiaryListName,
    required TResult Function(DiaryCell diaryCell, String? textFieldText)
        changeDiaryCell,
    required TResult Function(CapitalCell capitalCell, String? textFieldText)
        changeCapitalCell,
    required TResult Function(DiaryCell diaryCell, String? textFieldText)
        updateDiaryCellInFirebase,
    required TResult Function(
            FontWeightEnum? fontWeight,
            TextDecorationEnum? textDecoration,
            FontStyleEnum? fontStyle,
            double? fontSize,
            String? color,
            HorizontalAlignmentsEnum? horizontalAlignment,
            VerticalAlignmentsEnum? verticalAlignment,
            String? backgroundColor)
        changeDiaryCellsSettings,
    required TResult Function(BordersEditingEnum bordersEditingEnum,
            BordersStyleEnum bordersStyleEnum, Color bordersColor)
        changeDiaryCellsBordersSettings,
    required TResult Function(
            FontWeightEnum? fontWeight,
            TextDecorationEnum? textDecoration,
            FontStyleEnum? fontStyle,
            double? fontSize,
            String? color,
            HorizontalAlignmentsEnum? horizontalAlignment,
            VerticalAlignmentsEnum? verticalAlignment,
            String? backgroundColor,
            BordersStyleEnum? bordersStyleEnum,
            Color? bordersColor)
        changeCapitalCellSettings,
    required TResult Function(
            DiaryCell diaryCell,
            int index,
            DiaryCellTextSettings? newTextSettings,
            DiaryCellSettings? newSettings)
        updateDiaryCellSettingsInFirebase,
    required TResult Function(DiaryColumnSettings newSettings)
        updateCapitalCellSettingsInFirebase,
    required TResult Function(PointerMoveEvent details) updateCapitalCellWidth,
    required TResult Function(PointerUpEvent details)
        updateCapitalCellWidthInFirebase,
    required TResult Function(bool isTextEditing) startEditingCells,
    required TResult Function(DiaryList diaryList, String name,
            int columnsCount, List<DiaryColumn> diaryColumns)
        createDiaryColumn,
    required TResult Function(DiaryList diaryList, String columnId)
        deleteDiaryColumn,
    required TResult Function(DiaryList diaryList, String? themeColor,
            String? themeBorderColor, String? themePanelBackgroundColor)
        updateDiaryListSettings,
    required TResult Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<DiaryCell> diaryCells,
            List<CapitalCell> capitalCells,
            String themeName,
            String description)
        shareTheme,
    required TResult Function() startEditingColor,
    required TResult Function() startEditingBorders,
    required TResult Function() startEditingBorderStyle,
    required TResult Function() turnBackEditing,
    required TResult Function() startColumnDeleting,
    required TResult Function() startColorThemeEditing,
    required TResult Function() deleteColumns,
    required TResult Function() loadThemes,
    required TResult Function(ListTheme listTheme) loadFromTheme,
    required TResult Function(ListTheme listTheme) takeTheme,
  }) {
    return shareTheme(diaryList, diaryColumns, diaryCells, capitalCells,
        themeName, description);
  }

  @override
  @optionalTypeArgs
  TResult? whenOrNull<TResult extends Object?>({
    TResult? Function()? createSample,
    TResult? Function()? initialLoad,
    TResult? Function(DateTime date, int delay)? getDiaryList,
    TResult? Function(DiaryList diaryList, List<DiaryList> lists)?
        getDiaryColumns,
    TResult? Function(DiaryList diaryList, List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells, List<DiaryList> lists)?
        getDiaryCells,
    TResult? Function(DiaryCell diaryCell)? selectDiaryCell,
    TResult? Function(List<DiaryCell> diaryCells)? selectDiaryCells,
    TResult? Function(CapitalCell capitalCell)? selectCapitalCell,
    TResult? Function(
            DiaryCell diaryCell,
            GlobalObjectKey<State<StatefulWidget>> cellKey,
            DragUpdateDetails details,
            double scaleFactor)?
        onPanUpdate,
    TResult? Function(DiaryList? selectedList)? startEditingList,
    TResult? Function(
            String? newName, String? addedColumnName, int? addedColumnCount)?
        returnToLoaded,
    TResult? Function()? returnToCellsSelected,
    TResult? Function(DiaryList diaryList, String newName)? updateDiaryListName,
    TResult? Function(DiaryCell diaryCell, String? textFieldText)?
        changeDiaryCell,
    TResult? Function(CapitalCell capitalCell, String? textFieldText)?
        changeCapitalCell,
    TResult? Function(DiaryCell diaryCell, String? textFieldText)?
        updateDiaryCellInFirebase,
    TResult? Function(
            FontWeightEnum? fontWeight,
            TextDecorationEnum? textDecoration,
            FontStyleEnum? fontStyle,
            double? fontSize,
            String? color,
            HorizontalAlignmentsEnum? horizontalAlignment,
            VerticalAlignmentsEnum? verticalAlignment,
            String? backgroundColor)?
        changeDiaryCellsSettings,
    TResult? Function(BordersEditingEnum bordersEditingEnum,
            BordersStyleEnum bordersStyleEnum, Color bordersColor)?
        changeDiaryCellsBordersSettings,
    TResult? Function(
            FontWeightEnum? fontWeight,
            TextDecorationEnum? textDecoration,
            FontStyleEnum? fontStyle,
            double? fontSize,
            String? color,
            HorizontalAlignmentsEnum? horizontalAlignment,
            VerticalAlignmentsEnum? verticalAlignment,
            String? backgroundColor,
            BordersStyleEnum? bordersStyleEnum,
            Color? bordersColor)?
        changeCapitalCellSettings,
    TResult? Function(
            DiaryCell diaryCell,
            int index,
            DiaryCellTextSettings? newTextSettings,
            DiaryCellSettings? newSettings)?
        updateDiaryCellSettingsInFirebase,
    TResult? Function(DiaryColumnSettings newSettings)?
        updateCapitalCellSettingsInFirebase,
    TResult? Function(PointerMoveEvent details)? updateCapitalCellWidth,
    TResult? Function(PointerUpEvent details)? updateCapitalCellWidthInFirebase,
    TResult? Function(bool isTextEditing)? startEditingCells,
    TResult? Function(DiaryList diaryList, String name, int columnsCount,
            List<DiaryColumn> diaryColumns)?
        createDiaryColumn,
    TResult? Function(DiaryList diaryList, String columnId)? deleteDiaryColumn,
    TResult? Function(DiaryList diaryList, String? themeColor,
            String? themeBorderColor, String? themePanelBackgroundColor)?
        updateDiaryListSettings,
    TResult? Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<DiaryCell> diaryCells,
            List<CapitalCell> capitalCells,
            String themeName,
            String description)?
        shareTheme,
    TResult? Function()? startEditingColor,
    TResult? Function()? startEditingBorders,
    TResult? Function()? startEditingBorderStyle,
    TResult? Function()? turnBackEditing,
    TResult? Function()? startColumnDeleting,
    TResult? Function()? startColorThemeEditing,
    TResult? Function()? deleteColumns,
    TResult? Function()? loadThemes,
    TResult? Function(ListTheme listTheme)? loadFromTheme,
    TResult? Function(ListTheme listTheme)? takeTheme,
  }) {
    return shareTheme?.call(diaryList, diaryColumns, diaryCells, capitalCells,
        themeName, description);
  }

  @override
  @optionalTypeArgs
  TResult maybeWhen<TResult extends Object?>({
    TResult Function()? createSample,
    TResult Function()? initialLoad,
    TResult Function(DateTime date, int delay)? getDiaryList,
    TResult Function(DiaryList diaryList, List<DiaryList> lists)?
        getDiaryColumns,
    TResult Function(DiaryList diaryList, List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells, List<DiaryList> lists)?
        getDiaryCells,
    TResult Function(DiaryCell diaryCell)? selectDiaryCell,
    TResult Function(List<DiaryCell> diaryCells)? selectDiaryCells,
    TResult Function(CapitalCell capitalCell)? selectCapitalCell,
    TResult Function(
            DiaryCell diaryCell,
            GlobalObjectKey<State<StatefulWidget>> cellKey,
            DragUpdateDetails details,
            double scaleFactor)?
        onPanUpdate,
    TResult Function(DiaryList? selectedList)? startEditingList,
    TResult Function(
            String? newName, String? addedColumnName, int? addedColumnCount)?
        returnToLoaded,
    TResult Function()? returnToCellsSelected,
    TResult Function(DiaryList diaryList, String newName)? updateDiaryListName,
    TResult Function(DiaryCell diaryCell, String? textFieldText)?
        changeDiaryCell,
    TResult Function(CapitalCell capitalCell, String? textFieldText)?
        changeCapitalCell,
    TResult Function(DiaryCell diaryCell, String? textFieldText)?
        updateDiaryCellInFirebase,
    TResult Function(
            FontWeightEnum? fontWeight,
            TextDecorationEnum? textDecoration,
            FontStyleEnum? fontStyle,
            double? fontSize,
            String? color,
            HorizontalAlignmentsEnum? horizontalAlignment,
            VerticalAlignmentsEnum? verticalAlignment,
            String? backgroundColor)?
        changeDiaryCellsSettings,
    TResult Function(BordersEditingEnum bordersEditingEnum,
            BordersStyleEnum bordersStyleEnum, Color bordersColor)?
        changeDiaryCellsBordersSettings,
    TResult Function(
            FontWeightEnum? fontWeight,
            TextDecorationEnum? textDecoration,
            FontStyleEnum? fontStyle,
            double? fontSize,
            String? color,
            HorizontalAlignmentsEnum? horizontalAlignment,
            VerticalAlignmentsEnum? verticalAlignment,
            String? backgroundColor,
            BordersStyleEnum? bordersStyleEnum,
            Color? bordersColor)?
        changeCapitalCellSettings,
    TResult Function(
            DiaryCell diaryCell,
            int index,
            DiaryCellTextSettings? newTextSettings,
            DiaryCellSettings? newSettings)?
        updateDiaryCellSettingsInFirebase,
    TResult Function(DiaryColumnSettings newSettings)?
        updateCapitalCellSettingsInFirebase,
    TResult Function(PointerMoveEvent details)? updateCapitalCellWidth,
    TResult Function(PointerUpEvent details)? updateCapitalCellWidthInFirebase,
    TResult Function(bool isTextEditing)? startEditingCells,
    TResult Function(DiaryList diaryList, String name, int columnsCount,
            List<DiaryColumn> diaryColumns)?
        createDiaryColumn,
    TResult Function(DiaryList diaryList, String columnId)? deleteDiaryColumn,
    TResult Function(DiaryList diaryList, String? themeColor,
            String? themeBorderColor, String? themePanelBackgroundColor)?
        updateDiaryListSettings,
    TResult Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<DiaryCell> diaryCells,
            List<CapitalCell> capitalCells,
            String themeName,
            String description)?
        shareTheme,
    TResult Function()? startEditingColor,
    TResult Function()? startEditingBorders,
    TResult Function()? startEditingBorderStyle,
    TResult Function()? turnBackEditing,
    TResult Function()? startColumnDeleting,
    TResult Function()? startColorThemeEditing,
    TResult Function()? deleteColumns,
    TResult Function()? loadThemes,
    TResult Function(ListTheme listTheme)? loadFromTheme,
    TResult Function(ListTheme listTheme)? takeTheme,
    required TResult orElse(),
  }) {
    if (shareTheme != null) {
      return shareTheme(diaryList, diaryColumns, diaryCells, capitalCells,
          themeName, description);
    }
    return orElse();
  }

  @override
  @optionalTypeArgs
  TResult map<TResult extends Object?>({
    required TResult Function(CreateSampleEvent value) createSample,
    required TResult Function(InitialLoadEvent value) initialLoad,
    required TResult Function(GetDiaryListEvent value) getDiaryList,
    required TResult Function(GetDiaryColumnsEvent value) getDiaryColumns,
    required TResult Function(GetDiaryCellsEvent value) getDiaryCells,
    required TResult Function(SelectDiaryCellEvent value) selectDiaryCell,
    required TResult Function(SelectDiaryCellsEvent value) selectDiaryCells,
    required TResult Function(SelectCapitalCellEvent value) selectCapitalCell,
    required TResult Function(OnPanUpdateEvent value) onPanUpdate,
    required TResult Function(StartEditingListEvent value) startEditingList,
    required TResult Function(ReturnToLoadedEvent value) returnToLoaded,
    required TResult Function(ReturnToCellsSelectedEvent value)
        returnToCellsSelected,
    required TResult Function(UpdateDiaryListNameEvent value)
        updateDiaryListName,
    required TResult Function(ChangeDiaryCellEvent value) changeDiaryCell,
    required TResult Function(ChangeCapitalCellEvent value) changeCapitalCell,
    required TResult Function(UpdateDiaryCellInFirebaseEvent value)
        updateDiaryCellInFirebase,
    required TResult Function(ChangeDiaryCellsSettingsEvent value)
        changeDiaryCellsSettings,
    required TResult Function(ChangeDiaryCellsBordersSettingsEvent value)
        changeDiaryCellsBordersSettings,
    required TResult Function(ChangeCapitalCellSettingsEvent value)
        changeCapitalCellSettings,
    required TResult Function(UpdateDiaryCellSettingsInFirebaseEvent value)
        updateDiaryCellSettingsInFirebase,
    required TResult Function(UpdateCapitalCellSettingsInFirebaseEvent value)
        updateCapitalCellSettingsInFirebase,
    required TResult Function(UpdateCapitalCellWidthEvent value)
        updateCapitalCellWidth,
    required TResult Function(UpdateCapitalCellWidthInFirebaseEvent value)
        updateCapitalCellWidthInFirebase,
    required TResult Function(StartEditingCellsEvent value) startEditingCells,
    required TResult Function(CreateDiaryColumnEvent value) createDiaryColumn,
    required TResult Function(DeleteDiaryColumnEvent value) deleteDiaryColumn,
    required TResult Function(UpdateDiaryListSettingsEvent value)
        updateDiaryListSettings,
    required TResult Function(ShareThemeEvent value) shareTheme,
    required TResult Function(StartEditingColorEvent value) startEditingColor,
    required TResult Function(StartEditingBordersEvent value)
        startEditingBorders,
    required TResult Function(StartEditingBordersStyleEvent value)
        startEditingBorderStyle,
    required TResult Function(TurnBackEditingEvent value) turnBackEditing,
    required TResult Function(StartColumnDeletingEvent value)
        startColumnDeleting,
    required TResult Function(StartColorThemeEditingEvent value)
        startColorThemeEditing,
    required TResult Function(DeleteColumnsEvent value) deleteColumns,
    required TResult Function(LoadThemesEvent value) loadThemes,
    required TResult Function(LoadFromThemeEvent value) loadFromTheme,
    required TResult Function(TakeThemeEvent value) takeTheme,
  }) {
    return shareTheme(this);
  }

  @override
  @optionalTypeArgs
  TResult? mapOrNull<TResult extends Object?>({
    TResult? Function(CreateSampleEvent value)? createSample,
    TResult? Function(InitialLoadEvent value)? initialLoad,
    TResult? Function(GetDiaryListEvent value)? getDiaryList,
    TResult? Function(GetDiaryColumnsEvent value)? getDiaryColumns,
    TResult? Function(GetDiaryCellsEvent value)? getDiaryCells,
    TResult? Function(SelectDiaryCellEvent value)? selectDiaryCell,
    TResult? Function(SelectDiaryCellsEvent value)? selectDiaryCells,
    TResult? Function(SelectCapitalCellEvent value)? selectCapitalCell,
    TResult? Function(OnPanUpdateEvent value)? onPanUpdate,
    TResult? Function(StartEditingListEvent value)? startEditingList,
    TResult? Function(ReturnToLoadedEvent value)? returnToLoaded,
    TResult? Function(ReturnToCellsSelectedEvent value)? returnToCellsSelected,
    TResult? Function(UpdateDiaryListNameEvent value)? updateDiaryListName,
    TResult? Function(ChangeDiaryCellEvent value)? changeDiaryCell,
    TResult? Function(ChangeCapitalCellEvent value)? changeCapitalCell,
    TResult? Function(UpdateDiaryCellInFirebaseEvent value)?
        updateDiaryCellInFirebase,
    TResult? Function(ChangeDiaryCellsSettingsEvent value)?
        changeDiaryCellsSettings,
    TResult? Function(ChangeDiaryCellsBordersSettingsEvent value)?
        changeDiaryCellsBordersSettings,
    TResult? Function(ChangeCapitalCellSettingsEvent value)?
        changeCapitalCellSettings,
    TResult? Function(UpdateDiaryCellSettingsInFirebaseEvent value)?
        updateDiaryCellSettingsInFirebase,
    TResult? Function(UpdateCapitalCellSettingsInFirebaseEvent value)?
        updateCapitalCellSettingsInFirebase,
    TResult? Function(UpdateCapitalCellWidthEvent value)?
        updateCapitalCellWidth,
    TResult? Function(UpdateCapitalCellWidthInFirebaseEvent value)?
        updateCapitalCellWidthInFirebase,
    TResult? Function(StartEditingCellsEvent value)? startEditingCells,
    TResult? Function(CreateDiaryColumnEvent value)? createDiaryColumn,
    TResult? Function(DeleteDiaryColumnEvent value)? deleteDiaryColumn,
    TResult? Function(UpdateDiaryListSettingsEvent value)?
        updateDiaryListSettings,
    TResult? Function(ShareThemeEvent value)? shareTheme,
    TResult? Function(StartEditingColorEvent value)? startEditingColor,
    TResult? Function(StartEditingBordersEvent value)? startEditingBorders,
    TResult? Function(StartEditingBordersStyleEvent value)?
        startEditingBorderStyle,
    TResult? Function(TurnBackEditingEvent value)? turnBackEditing,
    TResult? Function(StartColumnDeletingEvent value)? startColumnDeleting,
    TResult? Function(StartColorThemeEditingEvent value)?
        startColorThemeEditing,
    TResult? Function(DeleteColumnsEvent value)? deleteColumns,
    TResult? Function(LoadThemesEvent value)? loadThemes,
    TResult? Function(LoadFromThemeEvent value)? loadFromTheme,
    TResult? Function(TakeThemeEvent value)? takeTheme,
  }) {
    return shareTheme?.call(this);
  }

  @override
  @optionalTypeArgs
  TResult maybeMap<TResult extends Object?>({
    TResult Function(CreateSampleEvent value)? createSample,
    TResult Function(InitialLoadEvent value)? initialLoad,
    TResult Function(GetDiaryListEvent value)? getDiaryList,
    TResult Function(GetDiaryColumnsEvent value)? getDiaryColumns,
    TResult Function(GetDiaryCellsEvent value)? getDiaryCells,
    TResult Function(SelectDiaryCellEvent value)? selectDiaryCell,
    TResult Function(SelectDiaryCellsEvent value)? selectDiaryCells,
    TResult Function(SelectCapitalCellEvent value)? selectCapitalCell,
    TResult Function(OnPanUpdateEvent value)? onPanUpdate,
    TResult Function(StartEditingListEvent value)? startEditingList,
    TResult Function(ReturnToLoadedEvent value)? returnToLoaded,
    TResult Function(ReturnToCellsSelectedEvent value)? returnToCellsSelected,
    TResult Function(UpdateDiaryListNameEvent value)? updateDiaryListName,
    TResult Function(ChangeDiaryCellEvent value)? changeDiaryCell,
    TResult Function(ChangeCapitalCellEvent value)? changeCapitalCell,
    TResult Function(UpdateDiaryCellInFirebaseEvent value)?
        updateDiaryCellInFirebase,
    TResult Function(ChangeDiaryCellsSettingsEvent value)?
        changeDiaryCellsSettings,
    TResult Function(ChangeDiaryCellsBordersSettingsEvent value)?
        changeDiaryCellsBordersSettings,
    TResult Function(ChangeCapitalCellSettingsEvent value)?
        changeCapitalCellSettings,
    TResult Function(UpdateDiaryCellSettingsInFirebaseEvent value)?
        updateDiaryCellSettingsInFirebase,
    TResult Function(UpdateCapitalCellSettingsInFirebaseEvent value)?
        updateCapitalCellSettingsInFirebase,
    TResult Function(UpdateCapitalCellWidthEvent value)? updateCapitalCellWidth,
    TResult Function(UpdateCapitalCellWidthInFirebaseEvent value)?
        updateCapitalCellWidthInFirebase,
    TResult Function(StartEditingCellsEvent value)? startEditingCells,
    TResult Function(CreateDiaryColumnEvent value)? createDiaryColumn,
    TResult Function(DeleteDiaryColumnEvent value)? deleteDiaryColumn,
    TResult Function(UpdateDiaryListSettingsEvent value)?
        updateDiaryListSettings,
    TResult Function(ShareThemeEvent value)? shareTheme,
    TResult Function(StartEditingColorEvent value)? startEditingColor,
    TResult Function(StartEditingBordersEvent value)? startEditingBorders,
    TResult Function(StartEditingBordersStyleEvent value)?
        startEditingBorderStyle,
    TResult Function(TurnBackEditingEvent value)? turnBackEditing,
    TResult Function(StartColumnDeletingEvent value)? startColumnDeleting,
    TResult Function(StartColorThemeEditingEvent value)? startColorThemeEditing,
    TResult Function(DeleteColumnsEvent value)? deleteColumns,
    TResult Function(LoadThemesEvent value)? loadThemes,
    TResult Function(LoadFromThemeEvent value)? loadFromTheme,
    TResult Function(TakeThemeEvent value)? takeTheme,
    required TResult orElse(),
  }) {
    if (shareTheme != null) {
      return shareTheme(this);
    }
    return orElse();
  }
}

abstract class ShareThemeEvent implements DiaryListEvent {
  const factory ShareThemeEvent(
      {required final DiaryList diaryList,
      required final List<DiaryColumn> diaryColumns,
      required final List<DiaryCell> diaryCells,
      required final List<CapitalCell> capitalCells,
      required final String themeName,
      required final String description}) = _$ShareThemeEvent;

  DiaryList get diaryList;
  List<DiaryColumn> get diaryColumns;
  List<DiaryCell> get diaryCells;
  List<CapitalCell> get capitalCells;
  String get themeName;
  String get description;
  @JsonKey(ignore: true)
  _$$ShareThemeEventCopyWith<_$ShareThemeEvent> get copyWith =>
      throw _privateConstructorUsedError;
}

/// @nodoc
abstract class _$$StartEditingColorEventCopyWith<$Res> {
  factory _$$StartEditingColorEventCopyWith(_$StartEditingColorEvent value,
          $Res Function(_$StartEditingColorEvent) then) =
      __$$StartEditingColorEventCopyWithImpl<$Res>;
}

/// @nodoc
class __$$StartEditingColorEventCopyWithImpl<$Res>
    extends _$DiaryListEventCopyWithImpl<$Res, _$StartEditingColorEvent>
    implements _$$StartEditingColorEventCopyWith<$Res> {
  __$$StartEditingColorEventCopyWithImpl(_$StartEditingColorEvent _value,
      $Res Function(_$StartEditingColorEvent) _then)
      : super(_value, _then);
}

/// @nodoc

class _$StartEditingColorEvent implements StartEditingColorEvent {
  const _$StartEditingColorEvent();

  @override
  String toString() {
    return 'DiaryListEvent.startEditingColor()';
  }

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType && other is _$StartEditingColorEvent);
  }

  @override
  int get hashCode => runtimeType.hashCode;

  @override
  @optionalTypeArgs
  TResult when<TResult extends Object?>({
    required TResult Function() createSample,
    required TResult Function() initialLoad,
    required TResult Function(DateTime date, int delay) getDiaryList,
    required TResult Function(DiaryList diaryList, List<DiaryList> lists)
        getDiaryColumns,
    required TResult Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells,
            List<DiaryList> lists)
        getDiaryCells,
    required TResult Function(DiaryCell diaryCell) selectDiaryCell,
    required TResult Function(List<DiaryCell> diaryCells) selectDiaryCells,
    required TResult Function(CapitalCell capitalCell) selectCapitalCell,
    required TResult Function(
            DiaryCell diaryCell,
            GlobalObjectKey<State<StatefulWidget>> cellKey,
            DragUpdateDetails details,
            double scaleFactor)
        onPanUpdate,
    required TResult Function(DiaryList? selectedList) startEditingList,
    required TResult Function(
            String? newName, String? addedColumnName, int? addedColumnCount)
        returnToLoaded,
    required TResult Function() returnToCellsSelected,
    required TResult Function(DiaryList diaryList, String newName)
        updateDiaryListName,
    required TResult Function(DiaryCell diaryCell, String? textFieldText)
        changeDiaryCell,
    required TResult Function(CapitalCell capitalCell, String? textFieldText)
        changeCapitalCell,
    required TResult Function(DiaryCell diaryCell, String? textFieldText)
        updateDiaryCellInFirebase,
    required TResult Function(
            FontWeightEnum? fontWeight,
            TextDecorationEnum? textDecoration,
            FontStyleEnum? fontStyle,
            double? fontSize,
            String? color,
            HorizontalAlignmentsEnum? horizontalAlignment,
            VerticalAlignmentsEnum? verticalAlignment,
            String? backgroundColor)
        changeDiaryCellsSettings,
    required TResult Function(BordersEditingEnum bordersEditingEnum,
            BordersStyleEnum bordersStyleEnum, Color bordersColor)
        changeDiaryCellsBordersSettings,
    required TResult Function(
            FontWeightEnum? fontWeight,
            TextDecorationEnum? textDecoration,
            FontStyleEnum? fontStyle,
            double? fontSize,
            String? color,
            HorizontalAlignmentsEnum? horizontalAlignment,
            VerticalAlignmentsEnum? verticalAlignment,
            String? backgroundColor,
            BordersStyleEnum? bordersStyleEnum,
            Color? bordersColor)
        changeCapitalCellSettings,
    required TResult Function(
            DiaryCell diaryCell,
            int index,
            DiaryCellTextSettings? newTextSettings,
            DiaryCellSettings? newSettings)
        updateDiaryCellSettingsInFirebase,
    required TResult Function(DiaryColumnSettings newSettings)
        updateCapitalCellSettingsInFirebase,
    required TResult Function(PointerMoveEvent details) updateCapitalCellWidth,
    required TResult Function(PointerUpEvent details)
        updateCapitalCellWidthInFirebase,
    required TResult Function(bool isTextEditing) startEditingCells,
    required TResult Function(DiaryList diaryList, String name,
            int columnsCount, List<DiaryColumn> diaryColumns)
        createDiaryColumn,
    required TResult Function(DiaryList diaryList, String columnId)
        deleteDiaryColumn,
    required TResult Function(DiaryList diaryList, String? themeColor,
            String? themeBorderColor, String? themePanelBackgroundColor)
        updateDiaryListSettings,
    required TResult Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<DiaryCell> diaryCells,
            List<CapitalCell> capitalCells,
            String themeName,
            String description)
        shareTheme,
    required TResult Function() startEditingColor,
    required TResult Function() startEditingBorders,
    required TResult Function() startEditingBorderStyle,
    required TResult Function() turnBackEditing,
    required TResult Function() startColumnDeleting,
    required TResult Function() startColorThemeEditing,
    required TResult Function() deleteColumns,
    required TResult Function() loadThemes,
    required TResult Function(ListTheme listTheme) loadFromTheme,
    required TResult Function(ListTheme listTheme) takeTheme,
  }) {
    return startEditingColor();
  }

  @override
  @optionalTypeArgs
  TResult? whenOrNull<TResult extends Object?>({
    TResult? Function()? createSample,
    TResult? Function()? initialLoad,
    TResult? Function(DateTime date, int delay)? getDiaryList,
    TResult? Function(DiaryList diaryList, List<DiaryList> lists)?
        getDiaryColumns,
    TResult? Function(DiaryList diaryList, List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells, List<DiaryList> lists)?
        getDiaryCells,
    TResult? Function(DiaryCell diaryCell)? selectDiaryCell,
    TResult? Function(List<DiaryCell> diaryCells)? selectDiaryCells,
    TResult? Function(CapitalCell capitalCell)? selectCapitalCell,
    TResult? Function(
            DiaryCell diaryCell,
            GlobalObjectKey<State<StatefulWidget>> cellKey,
            DragUpdateDetails details,
            double scaleFactor)?
        onPanUpdate,
    TResult? Function(DiaryList? selectedList)? startEditingList,
    TResult? Function(
            String? newName, String? addedColumnName, int? addedColumnCount)?
        returnToLoaded,
    TResult? Function()? returnToCellsSelected,
    TResult? Function(DiaryList diaryList, String newName)? updateDiaryListName,
    TResult? Function(DiaryCell diaryCell, String? textFieldText)?
        changeDiaryCell,
    TResult? Function(CapitalCell capitalCell, String? textFieldText)?
        changeCapitalCell,
    TResult? Function(DiaryCell diaryCell, String? textFieldText)?
        updateDiaryCellInFirebase,
    TResult? Function(
            FontWeightEnum? fontWeight,
            TextDecorationEnum? textDecoration,
            FontStyleEnum? fontStyle,
            double? fontSize,
            String? color,
            HorizontalAlignmentsEnum? horizontalAlignment,
            VerticalAlignmentsEnum? verticalAlignment,
            String? backgroundColor)?
        changeDiaryCellsSettings,
    TResult? Function(BordersEditingEnum bordersEditingEnum,
            BordersStyleEnum bordersStyleEnum, Color bordersColor)?
        changeDiaryCellsBordersSettings,
    TResult? Function(
            FontWeightEnum? fontWeight,
            TextDecorationEnum? textDecoration,
            FontStyleEnum? fontStyle,
            double? fontSize,
            String? color,
            HorizontalAlignmentsEnum? horizontalAlignment,
            VerticalAlignmentsEnum? verticalAlignment,
            String? backgroundColor,
            BordersStyleEnum? bordersStyleEnum,
            Color? bordersColor)?
        changeCapitalCellSettings,
    TResult? Function(
            DiaryCell diaryCell,
            int index,
            DiaryCellTextSettings? newTextSettings,
            DiaryCellSettings? newSettings)?
        updateDiaryCellSettingsInFirebase,
    TResult? Function(DiaryColumnSettings newSettings)?
        updateCapitalCellSettingsInFirebase,
    TResult? Function(PointerMoveEvent details)? updateCapitalCellWidth,
    TResult? Function(PointerUpEvent details)? updateCapitalCellWidthInFirebase,
    TResult? Function(bool isTextEditing)? startEditingCells,
    TResult? Function(DiaryList diaryList, String name, int columnsCount,
            List<DiaryColumn> diaryColumns)?
        createDiaryColumn,
    TResult? Function(DiaryList diaryList, String columnId)? deleteDiaryColumn,
    TResult? Function(DiaryList diaryList, String? themeColor,
            String? themeBorderColor, String? themePanelBackgroundColor)?
        updateDiaryListSettings,
    TResult? Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<DiaryCell> diaryCells,
            List<CapitalCell> capitalCells,
            String themeName,
            String description)?
        shareTheme,
    TResult? Function()? startEditingColor,
    TResult? Function()? startEditingBorders,
    TResult? Function()? startEditingBorderStyle,
    TResult? Function()? turnBackEditing,
    TResult? Function()? startColumnDeleting,
    TResult? Function()? startColorThemeEditing,
    TResult? Function()? deleteColumns,
    TResult? Function()? loadThemes,
    TResult? Function(ListTheme listTheme)? loadFromTheme,
    TResult? Function(ListTheme listTheme)? takeTheme,
  }) {
    return startEditingColor?.call();
  }

  @override
  @optionalTypeArgs
  TResult maybeWhen<TResult extends Object?>({
    TResult Function()? createSample,
    TResult Function()? initialLoad,
    TResult Function(DateTime date, int delay)? getDiaryList,
    TResult Function(DiaryList diaryList, List<DiaryList> lists)?
        getDiaryColumns,
    TResult Function(DiaryList diaryList, List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells, List<DiaryList> lists)?
        getDiaryCells,
    TResult Function(DiaryCell diaryCell)? selectDiaryCell,
    TResult Function(List<DiaryCell> diaryCells)? selectDiaryCells,
    TResult Function(CapitalCell capitalCell)? selectCapitalCell,
    TResult Function(
            DiaryCell diaryCell,
            GlobalObjectKey<State<StatefulWidget>> cellKey,
            DragUpdateDetails details,
            double scaleFactor)?
        onPanUpdate,
    TResult Function(DiaryList? selectedList)? startEditingList,
    TResult Function(
            String? newName, String? addedColumnName, int? addedColumnCount)?
        returnToLoaded,
    TResult Function()? returnToCellsSelected,
    TResult Function(DiaryList diaryList, String newName)? updateDiaryListName,
    TResult Function(DiaryCell diaryCell, String? textFieldText)?
        changeDiaryCell,
    TResult Function(CapitalCell capitalCell, String? textFieldText)?
        changeCapitalCell,
    TResult Function(DiaryCell diaryCell, String? textFieldText)?
        updateDiaryCellInFirebase,
    TResult Function(
            FontWeightEnum? fontWeight,
            TextDecorationEnum? textDecoration,
            FontStyleEnum? fontStyle,
            double? fontSize,
            String? color,
            HorizontalAlignmentsEnum? horizontalAlignment,
            VerticalAlignmentsEnum? verticalAlignment,
            String? backgroundColor)?
        changeDiaryCellsSettings,
    TResult Function(BordersEditingEnum bordersEditingEnum,
            BordersStyleEnum bordersStyleEnum, Color bordersColor)?
        changeDiaryCellsBordersSettings,
    TResult Function(
            FontWeightEnum? fontWeight,
            TextDecorationEnum? textDecoration,
            FontStyleEnum? fontStyle,
            double? fontSize,
            String? color,
            HorizontalAlignmentsEnum? horizontalAlignment,
            VerticalAlignmentsEnum? verticalAlignment,
            String? backgroundColor,
            BordersStyleEnum? bordersStyleEnum,
            Color? bordersColor)?
        changeCapitalCellSettings,
    TResult Function(
            DiaryCell diaryCell,
            int index,
            DiaryCellTextSettings? newTextSettings,
            DiaryCellSettings? newSettings)?
        updateDiaryCellSettingsInFirebase,
    TResult Function(DiaryColumnSettings newSettings)?
        updateCapitalCellSettingsInFirebase,
    TResult Function(PointerMoveEvent details)? updateCapitalCellWidth,
    TResult Function(PointerUpEvent details)? updateCapitalCellWidthInFirebase,
    TResult Function(bool isTextEditing)? startEditingCells,
    TResult Function(DiaryList diaryList, String name, int columnsCount,
            List<DiaryColumn> diaryColumns)?
        createDiaryColumn,
    TResult Function(DiaryList diaryList, String columnId)? deleteDiaryColumn,
    TResult Function(DiaryList diaryList, String? themeColor,
            String? themeBorderColor, String? themePanelBackgroundColor)?
        updateDiaryListSettings,
    TResult Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<DiaryCell> diaryCells,
            List<CapitalCell> capitalCells,
            String themeName,
            String description)?
        shareTheme,
    TResult Function()? startEditingColor,
    TResult Function()? startEditingBorders,
    TResult Function()? startEditingBorderStyle,
    TResult Function()? turnBackEditing,
    TResult Function()? startColumnDeleting,
    TResult Function()? startColorThemeEditing,
    TResult Function()? deleteColumns,
    TResult Function()? loadThemes,
    TResult Function(ListTheme listTheme)? loadFromTheme,
    TResult Function(ListTheme listTheme)? takeTheme,
    required TResult orElse(),
  }) {
    if (startEditingColor != null) {
      return startEditingColor();
    }
    return orElse();
  }

  @override
  @optionalTypeArgs
  TResult map<TResult extends Object?>({
    required TResult Function(CreateSampleEvent value) createSample,
    required TResult Function(InitialLoadEvent value) initialLoad,
    required TResult Function(GetDiaryListEvent value) getDiaryList,
    required TResult Function(GetDiaryColumnsEvent value) getDiaryColumns,
    required TResult Function(GetDiaryCellsEvent value) getDiaryCells,
    required TResult Function(SelectDiaryCellEvent value) selectDiaryCell,
    required TResult Function(SelectDiaryCellsEvent value) selectDiaryCells,
    required TResult Function(SelectCapitalCellEvent value) selectCapitalCell,
    required TResult Function(OnPanUpdateEvent value) onPanUpdate,
    required TResult Function(StartEditingListEvent value) startEditingList,
    required TResult Function(ReturnToLoadedEvent value) returnToLoaded,
    required TResult Function(ReturnToCellsSelectedEvent value)
        returnToCellsSelected,
    required TResult Function(UpdateDiaryListNameEvent value)
        updateDiaryListName,
    required TResult Function(ChangeDiaryCellEvent value) changeDiaryCell,
    required TResult Function(ChangeCapitalCellEvent value) changeCapitalCell,
    required TResult Function(UpdateDiaryCellInFirebaseEvent value)
        updateDiaryCellInFirebase,
    required TResult Function(ChangeDiaryCellsSettingsEvent value)
        changeDiaryCellsSettings,
    required TResult Function(ChangeDiaryCellsBordersSettingsEvent value)
        changeDiaryCellsBordersSettings,
    required TResult Function(ChangeCapitalCellSettingsEvent value)
        changeCapitalCellSettings,
    required TResult Function(UpdateDiaryCellSettingsInFirebaseEvent value)
        updateDiaryCellSettingsInFirebase,
    required TResult Function(UpdateCapitalCellSettingsInFirebaseEvent value)
        updateCapitalCellSettingsInFirebase,
    required TResult Function(UpdateCapitalCellWidthEvent value)
        updateCapitalCellWidth,
    required TResult Function(UpdateCapitalCellWidthInFirebaseEvent value)
        updateCapitalCellWidthInFirebase,
    required TResult Function(StartEditingCellsEvent value) startEditingCells,
    required TResult Function(CreateDiaryColumnEvent value) createDiaryColumn,
    required TResult Function(DeleteDiaryColumnEvent value) deleteDiaryColumn,
    required TResult Function(UpdateDiaryListSettingsEvent value)
        updateDiaryListSettings,
    required TResult Function(ShareThemeEvent value) shareTheme,
    required TResult Function(StartEditingColorEvent value) startEditingColor,
    required TResult Function(StartEditingBordersEvent value)
        startEditingBorders,
    required TResult Function(StartEditingBordersStyleEvent value)
        startEditingBorderStyle,
    required TResult Function(TurnBackEditingEvent value) turnBackEditing,
    required TResult Function(StartColumnDeletingEvent value)
        startColumnDeleting,
    required TResult Function(StartColorThemeEditingEvent value)
        startColorThemeEditing,
    required TResult Function(DeleteColumnsEvent value) deleteColumns,
    required TResult Function(LoadThemesEvent value) loadThemes,
    required TResult Function(LoadFromThemeEvent value) loadFromTheme,
    required TResult Function(TakeThemeEvent value) takeTheme,
  }) {
    return startEditingColor(this);
  }

  @override
  @optionalTypeArgs
  TResult? mapOrNull<TResult extends Object?>({
    TResult? Function(CreateSampleEvent value)? createSample,
    TResult? Function(InitialLoadEvent value)? initialLoad,
    TResult? Function(GetDiaryListEvent value)? getDiaryList,
    TResult? Function(GetDiaryColumnsEvent value)? getDiaryColumns,
    TResult? Function(GetDiaryCellsEvent value)? getDiaryCells,
    TResult? Function(SelectDiaryCellEvent value)? selectDiaryCell,
    TResult? Function(SelectDiaryCellsEvent value)? selectDiaryCells,
    TResult? Function(SelectCapitalCellEvent value)? selectCapitalCell,
    TResult? Function(OnPanUpdateEvent value)? onPanUpdate,
    TResult? Function(StartEditingListEvent value)? startEditingList,
    TResult? Function(ReturnToLoadedEvent value)? returnToLoaded,
    TResult? Function(ReturnToCellsSelectedEvent value)? returnToCellsSelected,
    TResult? Function(UpdateDiaryListNameEvent value)? updateDiaryListName,
    TResult? Function(ChangeDiaryCellEvent value)? changeDiaryCell,
    TResult? Function(ChangeCapitalCellEvent value)? changeCapitalCell,
    TResult? Function(UpdateDiaryCellInFirebaseEvent value)?
        updateDiaryCellInFirebase,
    TResult? Function(ChangeDiaryCellsSettingsEvent value)?
        changeDiaryCellsSettings,
    TResult? Function(ChangeDiaryCellsBordersSettingsEvent value)?
        changeDiaryCellsBordersSettings,
    TResult? Function(ChangeCapitalCellSettingsEvent value)?
        changeCapitalCellSettings,
    TResult? Function(UpdateDiaryCellSettingsInFirebaseEvent value)?
        updateDiaryCellSettingsInFirebase,
    TResult? Function(UpdateCapitalCellSettingsInFirebaseEvent value)?
        updateCapitalCellSettingsInFirebase,
    TResult? Function(UpdateCapitalCellWidthEvent value)?
        updateCapitalCellWidth,
    TResult? Function(UpdateCapitalCellWidthInFirebaseEvent value)?
        updateCapitalCellWidthInFirebase,
    TResult? Function(StartEditingCellsEvent value)? startEditingCells,
    TResult? Function(CreateDiaryColumnEvent value)? createDiaryColumn,
    TResult? Function(DeleteDiaryColumnEvent value)? deleteDiaryColumn,
    TResult? Function(UpdateDiaryListSettingsEvent value)?
        updateDiaryListSettings,
    TResult? Function(ShareThemeEvent value)? shareTheme,
    TResult? Function(StartEditingColorEvent value)? startEditingColor,
    TResult? Function(StartEditingBordersEvent value)? startEditingBorders,
    TResult? Function(StartEditingBordersStyleEvent value)?
        startEditingBorderStyle,
    TResult? Function(TurnBackEditingEvent value)? turnBackEditing,
    TResult? Function(StartColumnDeletingEvent value)? startColumnDeleting,
    TResult? Function(StartColorThemeEditingEvent value)?
        startColorThemeEditing,
    TResult? Function(DeleteColumnsEvent value)? deleteColumns,
    TResult? Function(LoadThemesEvent value)? loadThemes,
    TResult? Function(LoadFromThemeEvent value)? loadFromTheme,
    TResult? Function(TakeThemeEvent value)? takeTheme,
  }) {
    return startEditingColor?.call(this);
  }

  @override
  @optionalTypeArgs
  TResult maybeMap<TResult extends Object?>({
    TResult Function(CreateSampleEvent value)? createSample,
    TResult Function(InitialLoadEvent value)? initialLoad,
    TResult Function(GetDiaryListEvent value)? getDiaryList,
    TResult Function(GetDiaryColumnsEvent value)? getDiaryColumns,
    TResult Function(GetDiaryCellsEvent value)? getDiaryCells,
    TResult Function(SelectDiaryCellEvent value)? selectDiaryCell,
    TResult Function(SelectDiaryCellsEvent value)? selectDiaryCells,
    TResult Function(SelectCapitalCellEvent value)? selectCapitalCell,
    TResult Function(OnPanUpdateEvent value)? onPanUpdate,
    TResult Function(StartEditingListEvent value)? startEditingList,
    TResult Function(ReturnToLoadedEvent value)? returnToLoaded,
    TResult Function(ReturnToCellsSelectedEvent value)? returnToCellsSelected,
    TResult Function(UpdateDiaryListNameEvent value)? updateDiaryListName,
    TResult Function(ChangeDiaryCellEvent value)? changeDiaryCell,
    TResult Function(ChangeCapitalCellEvent value)? changeCapitalCell,
    TResult Function(UpdateDiaryCellInFirebaseEvent value)?
        updateDiaryCellInFirebase,
    TResult Function(ChangeDiaryCellsSettingsEvent value)?
        changeDiaryCellsSettings,
    TResult Function(ChangeDiaryCellsBordersSettingsEvent value)?
        changeDiaryCellsBordersSettings,
    TResult Function(ChangeCapitalCellSettingsEvent value)?
        changeCapitalCellSettings,
    TResult Function(UpdateDiaryCellSettingsInFirebaseEvent value)?
        updateDiaryCellSettingsInFirebase,
    TResult Function(UpdateCapitalCellSettingsInFirebaseEvent value)?
        updateCapitalCellSettingsInFirebase,
    TResult Function(UpdateCapitalCellWidthEvent value)? updateCapitalCellWidth,
    TResult Function(UpdateCapitalCellWidthInFirebaseEvent value)?
        updateCapitalCellWidthInFirebase,
    TResult Function(StartEditingCellsEvent value)? startEditingCells,
    TResult Function(CreateDiaryColumnEvent value)? createDiaryColumn,
    TResult Function(DeleteDiaryColumnEvent value)? deleteDiaryColumn,
    TResult Function(UpdateDiaryListSettingsEvent value)?
        updateDiaryListSettings,
    TResult Function(ShareThemeEvent value)? shareTheme,
    TResult Function(StartEditingColorEvent value)? startEditingColor,
    TResult Function(StartEditingBordersEvent value)? startEditingBorders,
    TResult Function(StartEditingBordersStyleEvent value)?
        startEditingBorderStyle,
    TResult Function(TurnBackEditingEvent value)? turnBackEditing,
    TResult Function(StartColumnDeletingEvent value)? startColumnDeleting,
    TResult Function(StartColorThemeEditingEvent value)? startColorThemeEditing,
    TResult Function(DeleteColumnsEvent value)? deleteColumns,
    TResult Function(LoadThemesEvent value)? loadThemes,
    TResult Function(LoadFromThemeEvent value)? loadFromTheme,
    TResult Function(TakeThemeEvent value)? takeTheme,
    required TResult orElse(),
  }) {
    if (startEditingColor != null) {
      return startEditingColor(this);
    }
    return orElse();
  }
}

abstract class StartEditingColorEvent implements DiaryListEvent {
  const factory StartEditingColorEvent() = _$StartEditingColorEvent;
}

/// @nodoc
abstract class _$$StartEditingBordersEventCopyWith<$Res> {
  factory _$$StartEditingBordersEventCopyWith(_$StartEditingBordersEvent value,
          $Res Function(_$StartEditingBordersEvent) then) =
      __$$StartEditingBordersEventCopyWithImpl<$Res>;
}

/// @nodoc
class __$$StartEditingBordersEventCopyWithImpl<$Res>
    extends _$DiaryListEventCopyWithImpl<$Res, _$StartEditingBordersEvent>
    implements _$$StartEditingBordersEventCopyWith<$Res> {
  __$$StartEditingBordersEventCopyWithImpl(_$StartEditingBordersEvent _value,
      $Res Function(_$StartEditingBordersEvent) _then)
      : super(_value, _then);
}

/// @nodoc

class _$StartEditingBordersEvent implements StartEditingBordersEvent {
  const _$StartEditingBordersEvent();

  @override
  String toString() {
    return 'DiaryListEvent.startEditingBorders()';
  }

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$StartEditingBordersEvent);
  }

  @override
  int get hashCode => runtimeType.hashCode;

  @override
  @optionalTypeArgs
  TResult when<TResult extends Object?>({
    required TResult Function() createSample,
    required TResult Function() initialLoad,
    required TResult Function(DateTime date, int delay) getDiaryList,
    required TResult Function(DiaryList diaryList, List<DiaryList> lists)
        getDiaryColumns,
    required TResult Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells,
            List<DiaryList> lists)
        getDiaryCells,
    required TResult Function(DiaryCell diaryCell) selectDiaryCell,
    required TResult Function(List<DiaryCell> diaryCells) selectDiaryCells,
    required TResult Function(CapitalCell capitalCell) selectCapitalCell,
    required TResult Function(
            DiaryCell diaryCell,
            GlobalObjectKey<State<StatefulWidget>> cellKey,
            DragUpdateDetails details,
            double scaleFactor)
        onPanUpdate,
    required TResult Function(DiaryList? selectedList) startEditingList,
    required TResult Function(
            String? newName, String? addedColumnName, int? addedColumnCount)
        returnToLoaded,
    required TResult Function() returnToCellsSelected,
    required TResult Function(DiaryList diaryList, String newName)
        updateDiaryListName,
    required TResult Function(DiaryCell diaryCell, String? textFieldText)
        changeDiaryCell,
    required TResult Function(CapitalCell capitalCell, String? textFieldText)
        changeCapitalCell,
    required TResult Function(DiaryCell diaryCell, String? textFieldText)
        updateDiaryCellInFirebase,
    required TResult Function(
            FontWeightEnum? fontWeight,
            TextDecorationEnum? textDecoration,
            FontStyleEnum? fontStyle,
            double? fontSize,
            String? color,
            HorizontalAlignmentsEnum? horizontalAlignment,
            VerticalAlignmentsEnum? verticalAlignment,
            String? backgroundColor)
        changeDiaryCellsSettings,
    required TResult Function(BordersEditingEnum bordersEditingEnum,
            BordersStyleEnum bordersStyleEnum, Color bordersColor)
        changeDiaryCellsBordersSettings,
    required TResult Function(
            FontWeightEnum? fontWeight,
            TextDecorationEnum? textDecoration,
            FontStyleEnum? fontStyle,
            double? fontSize,
            String? color,
            HorizontalAlignmentsEnum? horizontalAlignment,
            VerticalAlignmentsEnum? verticalAlignment,
            String? backgroundColor,
            BordersStyleEnum? bordersStyleEnum,
            Color? bordersColor)
        changeCapitalCellSettings,
    required TResult Function(
            DiaryCell diaryCell,
            int index,
            DiaryCellTextSettings? newTextSettings,
            DiaryCellSettings? newSettings)
        updateDiaryCellSettingsInFirebase,
    required TResult Function(DiaryColumnSettings newSettings)
        updateCapitalCellSettingsInFirebase,
    required TResult Function(PointerMoveEvent details) updateCapitalCellWidth,
    required TResult Function(PointerUpEvent details)
        updateCapitalCellWidthInFirebase,
    required TResult Function(bool isTextEditing) startEditingCells,
    required TResult Function(DiaryList diaryList, String name,
            int columnsCount, List<DiaryColumn> diaryColumns)
        createDiaryColumn,
    required TResult Function(DiaryList diaryList, String columnId)
        deleteDiaryColumn,
    required TResult Function(DiaryList diaryList, String? themeColor,
            String? themeBorderColor, String? themePanelBackgroundColor)
        updateDiaryListSettings,
    required TResult Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<DiaryCell> diaryCells,
            List<CapitalCell> capitalCells,
            String themeName,
            String description)
        shareTheme,
    required TResult Function() startEditingColor,
    required TResult Function() startEditingBorders,
    required TResult Function() startEditingBorderStyle,
    required TResult Function() turnBackEditing,
    required TResult Function() startColumnDeleting,
    required TResult Function() startColorThemeEditing,
    required TResult Function() deleteColumns,
    required TResult Function() loadThemes,
    required TResult Function(ListTheme listTheme) loadFromTheme,
    required TResult Function(ListTheme listTheme) takeTheme,
  }) {
    return startEditingBorders();
  }

  @override
  @optionalTypeArgs
  TResult? whenOrNull<TResult extends Object?>({
    TResult? Function()? createSample,
    TResult? Function()? initialLoad,
    TResult? Function(DateTime date, int delay)? getDiaryList,
    TResult? Function(DiaryList diaryList, List<DiaryList> lists)?
        getDiaryColumns,
    TResult? Function(DiaryList diaryList, List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells, List<DiaryList> lists)?
        getDiaryCells,
    TResult? Function(DiaryCell diaryCell)? selectDiaryCell,
    TResult? Function(List<DiaryCell> diaryCells)? selectDiaryCells,
    TResult? Function(CapitalCell capitalCell)? selectCapitalCell,
    TResult? Function(
            DiaryCell diaryCell,
            GlobalObjectKey<State<StatefulWidget>> cellKey,
            DragUpdateDetails details,
            double scaleFactor)?
        onPanUpdate,
    TResult? Function(DiaryList? selectedList)? startEditingList,
    TResult? Function(
            String? newName, String? addedColumnName, int? addedColumnCount)?
        returnToLoaded,
    TResult? Function()? returnToCellsSelected,
    TResult? Function(DiaryList diaryList, String newName)? updateDiaryListName,
    TResult? Function(DiaryCell diaryCell, String? textFieldText)?
        changeDiaryCell,
    TResult? Function(CapitalCell capitalCell, String? textFieldText)?
        changeCapitalCell,
    TResult? Function(DiaryCell diaryCell, String? textFieldText)?
        updateDiaryCellInFirebase,
    TResult? Function(
            FontWeightEnum? fontWeight,
            TextDecorationEnum? textDecoration,
            FontStyleEnum? fontStyle,
            double? fontSize,
            String? color,
            HorizontalAlignmentsEnum? horizontalAlignment,
            VerticalAlignmentsEnum? verticalAlignment,
            String? backgroundColor)?
        changeDiaryCellsSettings,
    TResult? Function(BordersEditingEnum bordersEditingEnum,
            BordersStyleEnum bordersStyleEnum, Color bordersColor)?
        changeDiaryCellsBordersSettings,
    TResult? Function(
            FontWeightEnum? fontWeight,
            TextDecorationEnum? textDecoration,
            FontStyleEnum? fontStyle,
            double? fontSize,
            String? color,
            HorizontalAlignmentsEnum? horizontalAlignment,
            VerticalAlignmentsEnum? verticalAlignment,
            String? backgroundColor,
            BordersStyleEnum? bordersStyleEnum,
            Color? bordersColor)?
        changeCapitalCellSettings,
    TResult? Function(
            DiaryCell diaryCell,
            int index,
            DiaryCellTextSettings? newTextSettings,
            DiaryCellSettings? newSettings)?
        updateDiaryCellSettingsInFirebase,
    TResult? Function(DiaryColumnSettings newSettings)?
        updateCapitalCellSettingsInFirebase,
    TResult? Function(PointerMoveEvent details)? updateCapitalCellWidth,
    TResult? Function(PointerUpEvent details)? updateCapitalCellWidthInFirebase,
    TResult? Function(bool isTextEditing)? startEditingCells,
    TResult? Function(DiaryList diaryList, String name, int columnsCount,
            List<DiaryColumn> diaryColumns)?
        createDiaryColumn,
    TResult? Function(DiaryList diaryList, String columnId)? deleteDiaryColumn,
    TResult? Function(DiaryList diaryList, String? themeColor,
            String? themeBorderColor, String? themePanelBackgroundColor)?
        updateDiaryListSettings,
    TResult? Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<DiaryCell> diaryCells,
            List<CapitalCell> capitalCells,
            String themeName,
            String description)?
        shareTheme,
    TResult? Function()? startEditingColor,
    TResult? Function()? startEditingBorders,
    TResult? Function()? startEditingBorderStyle,
    TResult? Function()? turnBackEditing,
    TResult? Function()? startColumnDeleting,
    TResult? Function()? startColorThemeEditing,
    TResult? Function()? deleteColumns,
    TResult? Function()? loadThemes,
    TResult? Function(ListTheme listTheme)? loadFromTheme,
    TResult? Function(ListTheme listTheme)? takeTheme,
  }) {
    return startEditingBorders?.call();
  }

  @override
  @optionalTypeArgs
  TResult maybeWhen<TResult extends Object?>({
    TResult Function()? createSample,
    TResult Function()? initialLoad,
    TResult Function(DateTime date, int delay)? getDiaryList,
    TResult Function(DiaryList diaryList, List<DiaryList> lists)?
        getDiaryColumns,
    TResult Function(DiaryList diaryList, List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells, List<DiaryList> lists)?
        getDiaryCells,
    TResult Function(DiaryCell diaryCell)? selectDiaryCell,
    TResult Function(List<DiaryCell> diaryCells)? selectDiaryCells,
    TResult Function(CapitalCell capitalCell)? selectCapitalCell,
    TResult Function(
            DiaryCell diaryCell,
            GlobalObjectKey<State<StatefulWidget>> cellKey,
            DragUpdateDetails details,
            double scaleFactor)?
        onPanUpdate,
    TResult Function(DiaryList? selectedList)? startEditingList,
    TResult Function(
            String? newName, String? addedColumnName, int? addedColumnCount)?
        returnToLoaded,
    TResult Function()? returnToCellsSelected,
    TResult Function(DiaryList diaryList, String newName)? updateDiaryListName,
    TResult Function(DiaryCell diaryCell, String? textFieldText)?
        changeDiaryCell,
    TResult Function(CapitalCell capitalCell, String? textFieldText)?
        changeCapitalCell,
    TResult Function(DiaryCell diaryCell, String? textFieldText)?
        updateDiaryCellInFirebase,
    TResult Function(
            FontWeightEnum? fontWeight,
            TextDecorationEnum? textDecoration,
            FontStyleEnum? fontStyle,
            double? fontSize,
            String? color,
            HorizontalAlignmentsEnum? horizontalAlignment,
            VerticalAlignmentsEnum? verticalAlignment,
            String? backgroundColor)?
        changeDiaryCellsSettings,
    TResult Function(BordersEditingEnum bordersEditingEnum,
            BordersStyleEnum bordersStyleEnum, Color bordersColor)?
        changeDiaryCellsBordersSettings,
    TResult Function(
            FontWeightEnum? fontWeight,
            TextDecorationEnum? textDecoration,
            FontStyleEnum? fontStyle,
            double? fontSize,
            String? color,
            HorizontalAlignmentsEnum? horizontalAlignment,
            VerticalAlignmentsEnum? verticalAlignment,
            String? backgroundColor,
            BordersStyleEnum? bordersStyleEnum,
            Color? bordersColor)?
        changeCapitalCellSettings,
    TResult Function(
            DiaryCell diaryCell,
            int index,
            DiaryCellTextSettings? newTextSettings,
            DiaryCellSettings? newSettings)?
        updateDiaryCellSettingsInFirebase,
    TResult Function(DiaryColumnSettings newSettings)?
        updateCapitalCellSettingsInFirebase,
    TResult Function(PointerMoveEvent details)? updateCapitalCellWidth,
    TResult Function(PointerUpEvent details)? updateCapitalCellWidthInFirebase,
    TResult Function(bool isTextEditing)? startEditingCells,
    TResult Function(DiaryList diaryList, String name, int columnsCount,
            List<DiaryColumn> diaryColumns)?
        createDiaryColumn,
    TResult Function(DiaryList diaryList, String columnId)? deleteDiaryColumn,
    TResult Function(DiaryList diaryList, String? themeColor,
            String? themeBorderColor, String? themePanelBackgroundColor)?
        updateDiaryListSettings,
    TResult Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<DiaryCell> diaryCells,
            List<CapitalCell> capitalCells,
            String themeName,
            String description)?
        shareTheme,
    TResult Function()? startEditingColor,
    TResult Function()? startEditingBorders,
    TResult Function()? startEditingBorderStyle,
    TResult Function()? turnBackEditing,
    TResult Function()? startColumnDeleting,
    TResult Function()? startColorThemeEditing,
    TResult Function()? deleteColumns,
    TResult Function()? loadThemes,
    TResult Function(ListTheme listTheme)? loadFromTheme,
    TResult Function(ListTheme listTheme)? takeTheme,
    required TResult orElse(),
  }) {
    if (startEditingBorders != null) {
      return startEditingBorders();
    }
    return orElse();
  }

  @override
  @optionalTypeArgs
  TResult map<TResult extends Object?>({
    required TResult Function(CreateSampleEvent value) createSample,
    required TResult Function(InitialLoadEvent value) initialLoad,
    required TResult Function(GetDiaryListEvent value) getDiaryList,
    required TResult Function(GetDiaryColumnsEvent value) getDiaryColumns,
    required TResult Function(GetDiaryCellsEvent value) getDiaryCells,
    required TResult Function(SelectDiaryCellEvent value) selectDiaryCell,
    required TResult Function(SelectDiaryCellsEvent value) selectDiaryCells,
    required TResult Function(SelectCapitalCellEvent value) selectCapitalCell,
    required TResult Function(OnPanUpdateEvent value) onPanUpdate,
    required TResult Function(StartEditingListEvent value) startEditingList,
    required TResult Function(ReturnToLoadedEvent value) returnToLoaded,
    required TResult Function(ReturnToCellsSelectedEvent value)
        returnToCellsSelected,
    required TResult Function(UpdateDiaryListNameEvent value)
        updateDiaryListName,
    required TResult Function(ChangeDiaryCellEvent value) changeDiaryCell,
    required TResult Function(ChangeCapitalCellEvent value) changeCapitalCell,
    required TResult Function(UpdateDiaryCellInFirebaseEvent value)
        updateDiaryCellInFirebase,
    required TResult Function(ChangeDiaryCellsSettingsEvent value)
        changeDiaryCellsSettings,
    required TResult Function(ChangeDiaryCellsBordersSettingsEvent value)
        changeDiaryCellsBordersSettings,
    required TResult Function(ChangeCapitalCellSettingsEvent value)
        changeCapitalCellSettings,
    required TResult Function(UpdateDiaryCellSettingsInFirebaseEvent value)
        updateDiaryCellSettingsInFirebase,
    required TResult Function(UpdateCapitalCellSettingsInFirebaseEvent value)
        updateCapitalCellSettingsInFirebase,
    required TResult Function(UpdateCapitalCellWidthEvent value)
        updateCapitalCellWidth,
    required TResult Function(UpdateCapitalCellWidthInFirebaseEvent value)
        updateCapitalCellWidthInFirebase,
    required TResult Function(StartEditingCellsEvent value) startEditingCells,
    required TResult Function(CreateDiaryColumnEvent value) createDiaryColumn,
    required TResult Function(DeleteDiaryColumnEvent value) deleteDiaryColumn,
    required TResult Function(UpdateDiaryListSettingsEvent value)
        updateDiaryListSettings,
    required TResult Function(ShareThemeEvent value) shareTheme,
    required TResult Function(StartEditingColorEvent value) startEditingColor,
    required TResult Function(StartEditingBordersEvent value)
        startEditingBorders,
    required TResult Function(StartEditingBordersStyleEvent value)
        startEditingBorderStyle,
    required TResult Function(TurnBackEditingEvent value) turnBackEditing,
    required TResult Function(StartColumnDeletingEvent value)
        startColumnDeleting,
    required TResult Function(StartColorThemeEditingEvent value)
        startColorThemeEditing,
    required TResult Function(DeleteColumnsEvent value) deleteColumns,
    required TResult Function(LoadThemesEvent value) loadThemes,
    required TResult Function(LoadFromThemeEvent value) loadFromTheme,
    required TResult Function(TakeThemeEvent value) takeTheme,
  }) {
    return startEditingBorders(this);
  }

  @override
  @optionalTypeArgs
  TResult? mapOrNull<TResult extends Object?>({
    TResult? Function(CreateSampleEvent value)? createSample,
    TResult? Function(InitialLoadEvent value)? initialLoad,
    TResult? Function(GetDiaryListEvent value)? getDiaryList,
    TResult? Function(GetDiaryColumnsEvent value)? getDiaryColumns,
    TResult? Function(GetDiaryCellsEvent value)? getDiaryCells,
    TResult? Function(SelectDiaryCellEvent value)? selectDiaryCell,
    TResult? Function(SelectDiaryCellsEvent value)? selectDiaryCells,
    TResult? Function(SelectCapitalCellEvent value)? selectCapitalCell,
    TResult? Function(OnPanUpdateEvent value)? onPanUpdate,
    TResult? Function(StartEditingListEvent value)? startEditingList,
    TResult? Function(ReturnToLoadedEvent value)? returnToLoaded,
    TResult? Function(ReturnToCellsSelectedEvent value)? returnToCellsSelected,
    TResult? Function(UpdateDiaryListNameEvent value)? updateDiaryListName,
    TResult? Function(ChangeDiaryCellEvent value)? changeDiaryCell,
    TResult? Function(ChangeCapitalCellEvent value)? changeCapitalCell,
    TResult? Function(UpdateDiaryCellInFirebaseEvent value)?
        updateDiaryCellInFirebase,
    TResult? Function(ChangeDiaryCellsSettingsEvent value)?
        changeDiaryCellsSettings,
    TResult? Function(ChangeDiaryCellsBordersSettingsEvent value)?
        changeDiaryCellsBordersSettings,
    TResult? Function(ChangeCapitalCellSettingsEvent value)?
        changeCapitalCellSettings,
    TResult? Function(UpdateDiaryCellSettingsInFirebaseEvent value)?
        updateDiaryCellSettingsInFirebase,
    TResult? Function(UpdateCapitalCellSettingsInFirebaseEvent value)?
        updateCapitalCellSettingsInFirebase,
    TResult? Function(UpdateCapitalCellWidthEvent value)?
        updateCapitalCellWidth,
    TResult? Function(UpdateCapitalCellWidthInFirebaseEvent value)?
        updateCapitalCellWidthInFirebase,
    TResult? Function(StartEditingCellsEvent value)? startEditingCells,
    TResult? Function(CreateDiaryColumnEvent value)? createDiaryColumn,
    TResult? Function(DeleteDiaryColumnEvent value)? deleteDiaryColumn,
    TResult? Function(UpdateDiaryListSettingsEvent value)?
        updateDiaryListSettings,
    TResult? Function(ShareThemeEvent value)? shareTheme,
    TResult? Function(StartEditingColorEvent value)? startEditingColor,
    TResult? Function(StartEditingBordersEvent value)? startEditingBorders,
    TResult? Function(StartEditingBordersStyleEvent value)?
        startEditingBorderStyle,
    TResult? Function(TurnBackEditingEvent value)? turnBackEditing,
    TResult? Function(StartColumnDeletingEvent value)? startColumnDeleting,
    TResult? Function(StartColorThemeEditingEvent value)?
        startColorThemeEditing,
    TResult? Function(DeleteColumnsEvent value)? deleteColumns,
    TResult? Function(LoadThemesEvent value)? loadThemes,
    TResult? Function(LoadFromThemeEvent value)? loadFromTheme,
    TResult? Function(TakeThemeEvent value)? takeTheme,
  }) {
    return startEditingBorders?.call(this);
  }

  @override
  @optionalTypeArgs
  TResult maybeMap<TResult extends Object?>({
    TResult Function(CreateSampleEvent value)? createSample,
    TResult Function(InitialLoadEvent value)? initialLoad,
    TResult Function(GetDiaryListEvent value)? getDiaryList,
    TResult Function(GetDiaryColumnsEvent value)? getDiaryColumns,
    TResult Function(GetDiaryCellsEvent value)? getDiaryCells,
    TResult Function(SelectDiaryCellEvent value)? selectDiaryCell,
    TResult Function(SelectDiaryCellsEvent value)? selectDiaryCells,
    TResult Function(SelectCapitalCellEvent value)? selectCapitalCell,
    TResult Function(OnPanUpdateEvent value)? onPanUpdate,
    TResult Function(StartEditingListEvent value)? startEditingList,
    TResult Function(ReturnToLoadedEvent value)? returnToLoaded,
    TResult Function(ReturnToCellsSelectedEvent value)? returnToCellsSelected,
    TResult Function(UpdateDiaryListNameEvent value)? updateDiaryListName,
    TResult Function(ChangeDiaryCellEvent value)? changeDiaryCell,
    TResult Function(ChangeCapitalCellEvent value)? changeCapitalCell,
    TResult Function(UpdateDiaryCellInFirebaseEvent value)?
        updateDiaryCellInFirebase,
    TResult Function(ChangeDiaryCellsSettingsEvent value)?
        changeDiaryCellsSettings,
    TResult Function(ChangeDiaryCellsBordersSettingsEvent value)?
        changeDiaryCellsBordersSettings,
    TResult Function(ChangeCapitalCellSettingsEvent value)?
        changeCapitalCellSettings,
    TResult Function(UpdateDiaryCellSettingsInFirebaseEvent value)?
        updateDiaryCellSettingsInFirebase,
    TResult Function(UpdateCapitalCellSettingsInFirebaseEvent value)?
        updateCapitalCellSettingsInFirebase,
    TResult Function(UpdateCapitalCellWidthEvent value)? updateCapitalCellWidth,
    TResult Function(UpdateCapitalCellWidthInFirebaseEvent value)?
        updateCapitalCellWidthInFirebase,
    TResult Function(StartEditingCellsEvent value)? startEditingCells,
    TResult Function(CreateDiaryColumnEvent value)? createDiaryColumn,
    TResult Function(DeleteDiaryColumnEvent value)? deleteDiaryColumn,
    TResult Function(UpdateDiaryListSettingsEvent value)?
        updateDiaryListSettings,
    TResult Function(ShareThemeEvent value)? shareTheme,
    TResult Function(StartEditingColorEvent value)? startEditingColor,
    TResult Function(StartEditingBordersEvent value)? startEditingBorders,
    TResult Function(StartEditingBordersStyleEvent value)?
        startEditingBorderStyle,
    TResult Function(TurnBackEditingEvent value)? turnBackEditing,
    TResult Function(StartColumnDeletingEvent value)? startColumnDeleting,
    TResult Function(StartColorThemeEditingEvent value)? startColorThemeEditing,
    TResult Function(DeleteColumnsEvent value)? deleteColumns,
    TResult Function(LoadThemesEvent value)? loadThemes,
    TResult Function(LoadFromThemeEvent value)? loadFromTheme,
    TResult Function(TakeThemeEvent value)? takeTheme,
    required TResult orElse(),
  }) {
    if (startEditingBorders != null) {
      return startEditingBorders(this);
    }
    return orElse();
  }
}

abstract class StartEditingBordersEvent implements DiaryListEvent {
  const factory StartEditingBordersEvent() = _$StartEditingBordersEvent;
}

/// @nodoc
abstract class _$$StartEditingBordersStyleEventCopyWith<$Res> {
  factory _$$StartEditingBordersStyleEventCopyWith(
          _$StartEditingBordersStyleEvent value,
          $Res Function(_$StartEditingBordersStyleEvent) then) =
      __$$StartEditingBordersStyleEventCopyWithImpl<$Res>;
}

/// @nodoc
class __$$StartEditingBordersStyleEventCopyWithImpl<$Res>
    extends _$DiaryListEventCopyWithImpl<$Res, _$StartEditingBordersStyleEvent>
    implements _$$StartEditingBordersStyleEventCopyWith<$Res> {
  __$$StartEditingBordersStyleEventCopyWithImpl(
      _$StartEditingBordersStyleEvent _value,
      $Res Function(_$StartEditingBordersStyleEvent) _then)
      : super(_value, _then);
}

/// @nodoc

class _$StartEditingBordersStyleEvent implements StartEditingBordersStyleEvent {
  const _$StartEditingBordersStyleEvent();

  @override
  String toString() {
    return 'DiaryListEvent.startEditingBorderStyle()';
  }

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$StartEditingBordersStyleEvent);
  }

  @override
  int get hashCode => runtimeType.hashCode;

  @override
  @optionalTypeArgs
  TResult when<TResult extends Object?>({
    required TResult Function() createSample,
    required TResult Function() initialLoad,
    required TResult Function(DateTime date, int delay) getDiaryList,
    required TResult Function(DiaryList diaryList, List<DiaryList> lists)
        getDiaryColumns,
    required TResult Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells,
            List<DiaryList> lists)
        getDiaryCells,
    required TResult Function(DiaryCell diaryCell) selectDiaryCell,
    required TResult Function(List<DiaryCell> diaryCells) selectDiaryCells,
    required TResult Function(CapitalCell capitalCell) selectCapitalCell,
    required TResult Function(
            DiaryCell diaryCell,
            GlobalObjectKey<State<StatefulWidget>> cellKey,
            DragUpdateDetails details,
            double scaleFactor)
        onPanUpdate,
    required TResult Function(DiaryList? selectedList) startEditingList,
    required TResult Function(
            String? newName, String? addedColumnName, int? addedColumnCount)
        returnToLoaded,
    required TResult Function() returnToCellsSelected,
    required TResult Function(DiaryList diaryList, String newName)
        updateDiaryListName,
    required TResult Function(DiaryCell diaryCell, String? textFieldText)
        changeDiaryCell,
    required TResult Function(CapitalCell capitalCell, String? textFieldText)
        changeCapitalCell,
    required TResult Function(DiaryCell diaryCell, String? textFieldText)
        updateDiaryCellInFirebase,
    required TResult Function(
            FontWeightEnum? fontWeight,
            TextDecorationEnum? textDecoration,
            FontStyleEnum? fontStyle,
            double? fontSize,
            String? color,
            HorizontalAlignmentsEnum? horizontalAlignment,
            VerticalAlignmentsEnum? verticalAlignment,
            String? backgroundColor)
        changeDiaryCellsSettings,
    required TResult Function(BordersEditingEnum bordersEditingEnum,
            BordersStyleEnum bordersStyleEnum, Color bordersColor)
        changeDiaryCellsBordersSettings,
    required TResult Function(
            FontWeightEnum? fontWeight,
            TextDecorationEnum? textDecoration,
            FontStyleEnum? fontStyle,
            double? fontSize,
            String? color,
            HorizontalAlignmentsEnum? horizontalAlignment,
            VerticalAlignmentsEnum? verticalAlignment,
            String? backgroundColor,
            BordersStyleEnum? bordersStyleEnum,
            Color? bordersColor)
        changeCapitalCellSettings,
    required TResult Function(
            DiaryCell diaryCell,
            int index,
            DiaryCellTextSettings? newTextSettings,
            DiaryCellSettings? newSettings)
        updateDiaryCellSettingsInFirebase,
    required TResult Function(DiaryColumnSettings newSettings)
        updateCapitalCellSettingsInFirebase,
    required TResult Function(PointerMoveEvent details) updateCapitalCellWidth,
    required TResult Function(PointerUpEvent details)
        updateCapitalCellWidthInFirebase,
    required TResult Function(bool isTextEditing) startEditingCells,
    required TResult Function(DiaryList diaryList, String name,
            int columnsCount, List<DiaryColumn> diaryColumns)
        createDiaryColumn,
    required TResult Function(DiaryList diaryList, String columnId)
        deleteDiaryColumn,
    required TResult Function(DiaryList diaryList, String? themeColor,
            String? themeBorderColor, String? themePanelBackgroundColor)
        updateDiaryListSettings,
    required TResult Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<DiaryCell> diaryCells,
            List<CapitalCell> capitalCells,
            String themeName,
            String description)
        shareTheme,
    required TResult Function() startEditingColor,
    required TResult Function() startEditingBorders,
    required TResult Function() startEditingBorderStyle,
    required TResult Function() turnBackEditing,
    required TResult Function() startColumnDeleting,
    required TResult Function() startColorThemeEditing,
    required TResult Function() deleteColumns,
    required TResult Function() loadThemes,
    required TResult Function(ListTheme listTheme) loadFromTheme,
    required TResult Function(ListTheme listTheme) takeTheme,
  }) {
    return startEditingBorderStyle();
  }

  @override
  @optionalTypeArgs
  TResult? whenOrNull<TResult extends Object?>({
    TResult? Function()? createSample,
    TResult? Function()? initialLoad,
    TResult? Function(DateTime date, int delay)? getDiaryList,
    TResult? Function(DiaryList diaryList, List<DiaryList> lists)?
        getDiaryColumns,
    TResult? Function(DiaryList diaryList, List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells, List<DiaryList> lists)?
        getDiaryCells,
    TResult? Function(DiaryCell diaryCell)? selectDiaryCell,
    TResult? Function(List<DiaryCell> diaryCells)? selectDiaryCells,
    TResult? Function(CapitalCell capitalCell)? selectCapitalCell,
    TResult? Function(
            DiaryCell diaryCell,
            GlobalObjectKey<State<StatefulWidget>> cellKey,
            DragUpdateDetails details,
            double scaleFactor)?
        onPanUpdate,
    TResult? Function(DiaryList? selectedList)? startEditingList,
    TResult? Function(
            String? newName, String? addedColumnName, int? addedColumnCount)?
        returnToLoaded,
    TResult? Function()? returnToCellsSelected,
    TResult? Function(DiaryList diaryList, String newName)? updateDiaryListName,
    TResult? Function(DiaryCell diaryCell, String? textFieldText)?
        changeDiaryCell,
    TResult? Function(CapitalCell capitalCell, String? textFieldText)?
        changeCapitalCell,
    TResult? Function(DiaryCell diaryCell, String? textFieldText)?
        updateDiaryCellInFirebase,
    TResult? Function(
            FontWeightEnum? fontWeight,
            TextDecorationEnum? textDecoration,
            FontStyleEnum? fontStyle,
            double? fontSize,
            String? color,
            HorizontalAlignmentsEnum? horizontalAlignment,
            VerticalAlignmentsEnum? verticalAlignment,
            String? backgroundColor)?
        changeDiaryCellsSettings,
    TResult? Function(BordersEditingEnum bordersEditingEnum,
            BordersStyleEnum bordersStyleEnum, Color bordersColor)?
        changeDiaryCellsBordersSettings,
    TResult? Function(
            FontWeightEnum? fontWeight,
            TextDecorationEnum? textDecoration,
            FontStyleEnum? fontStyle,
            double? fontSize,
            String? color,
            HorizontalAlignmentsEnum? horizontalAlignment,
            VerticalAlignmentsEnum? verticalAlignment,
            String? backgroundColor,
            BordersStyleEnum? bordersStyleEnum,
            Color? bordersColor)?
        changeCapitalCellSettings,
    TResult? Function(
            DiaryCell diaryCell,
            int index,
            DiaryCellTextSettings? newTextSettings,
            DiaryCellSettings? newSettings)?
        updateDiaryCellSettingsInFirebase,
    TResult? Function(DiaryColumnSettings newSettings)?
        updateCapitalCellSettingsInFirebase,
    TResult? Function(PointerMoveEvent details)? updateCapitalCellWidth,
    TResult? Function(PointerUpEvent details)? updateCapitalCellWidthInFirebase,
    TResult? Function(bool isTextEditing)? startEditingCells,
    TResult? Function(DiaryList diaryList, String name, int columnsCount,
            List<DiaryColumn> diaryColumns)?
        createDiaryColumn,
    TResult? Function(DiaryList diaryList, String columnId)? deleteDiaryColumn,
    TResult? Function(DiaryList diaryList, String? themeColor,
            String? themeBorderColor, String? themePanelBackgroundColor)?
        updateDiaryListSettings,
    TResult? Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<DiaryCell> diaryCells,
            List<CapitalCell> capitalCells,
            String themeName,
            String description)?
        shareTheme,
    TResult? Function()? startEditingColor,
    TResult? Function()? startEditingBorders,
    TResult? Function()? startEditingBorderStyle,
    TResult? Function()? turnBackEditing,
    TResult? Function()? startColumnDeleting,
    TResult? Function()? startColorThemeEditing,
    TResult? Function()? deleteColumns,
    TResult? Function()? loadThemes,
    TResult? Function(ListTheme listTheme)? loadFromTheme,
    TResult? Function(ListTheme listTheme)? takeTheme,
  }) {
    return startEditingBorderStyle?.call();
  }

  @override
  @optionalTypeArgs
  TResult maybeWhen<TResult extends Object?>({
    TResult Function()? createSample,
    TResult Function()? initialLoad,
    TResult Function(DateTime date, int delay)? getDiaryList,
    TResult Function(DiaryList diaryList, List<DiaryList> lists)?
        getDiaryColumns,
    TResult Function(DiaryList diaryList, List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells, List<DiaryList> lists)?
        getDiaryCells,
    TResult Function(DiaryCell diaryCell)? selectDiaryCell,
    TResult Function(List<DiaryCell> diaryCells)? selectDiaryCells,
    TResult Function(CapitalCell capitalCell)? selectCapitalCell,
    TResult Function(
            DiaryCell diaryCell,
            GlobalObjectKey<State<StatefulWidget>> cellKey,
            DragUpdateDetails details,
            double scaleFactor)?
        onPanUpdate,
    TResult Function(DiaryList? selectedList)? startEditingList,
    TResult Function(
            String? newName, String? addedColumnName, int? addedColumnCount)?
        returnToLoaded,
    TResult Function()? returnToCellsSelected,
    TResult Function(DiaryList diaryList, String newName)? updateDiaryListName,
    TResult Function(DiaryCell diaryCell, String? textFieldText)?
        changeDiaryCell,
    TResult Function(CapitalCell capitalCell, String? textFieldText)?
        changeCapitalCell,
    TResult Function(DiaryCell diaryCell, String? textFieldText)?
        updateDiaryCellInFirebase,
    TResult Function(
            FontWeightEnum? fontWeight,
            TextDecorationEnum? textDecoration,
            FontStyleEnum? fontStyle,
            double? fontSize,
            String? color,
            HorizontalAlignmentsEnum? horizontalAlignment,
            VerticalAlignmentsEnum? verticalAlignment,
            String? backgroundColor)?
        changeDiaryCellsSettings,
    TResult Function(BordersEditingEnum bordersEditingEnum,
            BordersStyleEnum bordersStyleEnum, Color bordersColor)?
        changeDiaryCellsBordersSettings,
    TResult Function(
            FontWeightEnum? fontWeight,
            TextDecorationEnum? textDecoration,
            FontStyleEnum? fontStyle,
            double? fontSize,
            String? color,
            HorizontalAlignmentsEnum? horizontalAlignment,
            VerticalAlignmentsEnum? verticalAlignment,
            String? backgroundColor,
            BordersStyleEnum? bordersStyleEnum,
            Color? bordersColor)?
        changeCapitalCellSettings,
    TResult Function(
            DiaryCell diaryCell,
            int index,
            DiaryCellTextSettings? newTextSettings,
            DiaryCellSettings? newSettings)?
        updateDiaryCellSettingsInFirebase,
    TResult Function(DiaryColumnSettings newSettings)?
        updateCapitalCellSettingsInFirebase,
    TResult Function(PointerMoveEvent details)? updateCapitalCellWidth,
    TResult Function(PointerUpEvent details)? updateCapitalCellWidthInFirebase,
    TResult Function(bool isTextEditing)? startEditingCells,
    TResult Function(DiaryList diaryList, String name, int columnsCount,
            List<DiaryColumn> diaryColumns)?
        createDiaryColumn,
    TResult Function(DiaryList diaryList, String columnId)? deleteDiaryColumn,
    TResult Function(DiaryList diaryList, String? themeColor,
            String? themeBorderColor, String? themePanelBackgroundColor)?
        updateDiaryListSettings,
    TResult Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<DiaryCell> diaryCells,
            List<CapitalCell> capitalCells,
            String themeName,
            String description)?
        shareTheme,
    TResult Function()? startEditingColor,
    TResult Function()? startEditingBorders,
    TResult Function()? startEditingBorderStyle,
    TResult Function()? turnBackEditing,
    TResult Function()? startColumnDeleting,
    TResult Function()? startColorThemeEditing,
    TResult Function()? deleteColumns,
    TResult Function()? loadThemes,
    TResult Function(ListTheme listTheme)? loadFromTheme,
    TResult Function(ListTheme listTheme)? takeTheme,
    required TResult orElse(),
  }) {
    if (startEditingBorderStyle != null) {
      return startEditingBorderStyle();
    }
    return orElse();
  }

  @override
  @optionalTypeArgs
  TResult map<TResult extends Object?>({
    required TResult Function(CreateSampleEvent value) createSample,
    required TResult Function(InitialLoadEvent value) initialLoad,
    required TResult Function(GetDiaryListEvent value) getDiaryList,
    required TResult Function(GetDiaryColumnsEvent value) getDiaryColumns,
    required TResult Function(GetDiaryCellsEvent value) getDiaryCells,
    required TResult Function(SelectDiaryCellEvent value) selectDiaryCell,
    required TResult Function(SelectDiaryCellsEvent value) selectDiaryCells,
    required TResult Function(SelectCapitalCellEvent value) selectCapitalCell,
    required TResult Function(OnPanUpdateEvent value) onPanUpdate,
    required TResult Function(StartEditingListEvent value) startEditingList,
    required TResult Function(ReturnToLoadedEvent value) returnToLoaded,
    required TResult Function(ReturnToCellsSelectedEvent value)
        returnToCellsSelected,
    required TResult Function(UpdateDiaryListNameEvent value)
        updateDiaryListName,
    required TResult Function(ChangeDiaryCellEvent value) changeDiaryCell,
    required TResult Function(ChangeCapitalCellEvent value) changeCapitalCell,
    required TResult Function(UpdateDiaryCellInFirebaseEvent value)
        updateDiaryCellInFirebase,
    required TResult Function(ChangeDiaryCellsSettingsEvent value)
        changeDiaryCellsSettings,
    required TResult Function(ChangeDiaryCellsBordersSettingsEvent value)
        changeDiaryCellsBordersSettings,
    required TResult Function(ChangeCapitalCellSettingsEvent value)
        changeCapitalCellSettings,
    required TResult Function(UpdateDiaryCellSettingsInFirebaseEvent value)
        updateDiaryCellSettingsInFirebase,
    required TResult Function(UpdateCapitalCellSettingsInFirebaseEvent value)
        updateCapitalCellSettingsInFirebase,
    required TResult Function(UpdateCapitalCellWidthEvent value)
        updateCapitalCellWidth,
    required TResult Function(UpdateCapitalCellWidthInFirebaseEvent value)
        updateCapitalCellWidthInFirebase,
    required TResult Function(StartEditingCellsEvent value) startEditingCells,
    required TResult Function(CreateDiaryColumnEvent value) createDiaryColumn,
    required TResult Function(DeleteDiaryColumnEvent value) deleteDiaryColumn,
    required TResult Function(UpdateDiaryListSettingsEvent value)
        updateDiaryListSettings,
    required TResult Function(ShareThemeEvent value) shareTheme,
    required TResult Function(StartEditingColorEvent value) startEditingColor,
    required TResult Function(StartEditingBordersEvent value)
        startEditingBorders,
    required TResult Function(StartEditingBordersStyleEvent value)
        startEditingBorderStyle,
    required TResult Function(TurnBackEditingEvent value) turnBackEditing,
    required TResult Function(StartColumnDeletingEvent value)
        startColumnDeleting,
    required TResult Function(StartColorThemeEditingEvent value)
        startColorThemeEditing,
    required TResult Function(DeleteColumnsEvent value) deleteColumns,
    required TResult Function(LoadThemesEvent value) loadThemes,
    required TResult Function(LoadFromThemeEvent value) loadFromTheme,
    required TResult Function(TakeThemeEvent value) takeTheme,
  }) {
    return startEditingBorderStyle(this);
  }

  @override
  @optionalTypeArgs
  TResult? mapOrNull<TResult extends Object?>({
    TResult? Function(CreateSampleEvent value)? createSample,
    TResult? Function(InitialLoadEvent value)? initialLoad,
    TResult? Function(GetDiaryListEvent value)? getDiaryList,
    TResult? Function(GetDiaryColumnsEvent value)? getDiaryColumns,
    TResult? Function(GetDiaryCellsEvent value)? getDiaryCells,
    TResult? Function(SelectDiaryCellEvent value)? selectDiaryCell,
    TResult? Function(SelectDiaryCellsEvent value)? selectDiaryCells,
    TResult? Function(SelectCapitalCellEvent value)? selectCapitalCell,
    TResult? Function(OnPanUpdateEvent value)? onPanUpdate,
    TResult? Function(StartEditingListEvent value)? startEditingList,
    TResult? Function(ReturnToLoadedEvent value)? returnToLoaded,
    TResult? Function(ReturnToCellsSelectedEvent value)? returnToCellsSelected,
    TResult? Function(UpdateDiaryListNameEvent value)? updateDiaryListName,
    TResult? Function(ChangeDiaryCellEvent value)? changeDiaryCell,
    TResult? Function(ChangeCapitalCellEvent value)? changeCapitalCell,
    TResult? Function(UpdateDiaryCellInFirebaseEvent value)?
        updateDiaryCellInFirebase,
    TResult? Function(ChangeDiaryCellsSettingsEvent value)?
        changeDiaryCellsSettings,
    TResult? Function(ChangeDiaryCellsBordersSettingsEvent value)?
        changeDiaryCellsBordersSettings,
    TResult? Function(ChangeCapitalCellSettingsEvent value)?
        changeCapitalCellSettings,
    TResult? Function(UpdateDiaryCellSettingsInFirebaseEvent value)?
        updateDiaryCellSettingsInFirebase,
    TResult? Function(UpdateCapitalCellSettingsInFirebaseEvent value)?
        updateCapitalCellSettingsInFirebase,
    TResult? Function(UpdateCapitalCellWidthEvent value)?
        updateCapitalCellWidth,
    TResult? Function(UpdateCapitalCellWidthInFirebaseEvent value)?
        updateCapitalCellWidthInFirebase,
    TResult? Function(StartEditingCellsEvent value)? startEditingCells,
    TResult? Function(CreateDiaryColumnEvent value)? createDiaryColumn,
    TResult? Function(DeleteDiaryColumnEvent value)? deleteDiaryColumn,
    TResult? Function(UpdateDiaryListSettingsEvent value)?
        updateDiaryListSettings,
    TResult? Function(ShareThemeEvent value)? shareTheme,
    TResult? Function(StartEditingColorEvent value)? startEditingColor,
    TResult? Function(StartEditingBordersEvent value)? startEditingBorders,
    TResult? Function(StartEditingBordersStyleEvent value)?
        startEditingBorderStyle,
    TResult? Function(TurnBackEditingEvent value)? turnBackEditing,
    TResult? Function(StartColumnDeletingEvent value)? startColumnDeleting,
    TResult? Function(StartColorThemeEditingEvent value)?
        startColorThemeEditing,
    TResult? Function(DeleteColumnsEvent value)? deleteColumns,
    TResult? Function(LoadThemesEvent value)? loadThemes,
    TResult? Function(LoadFromThemeEvent value)? loadFromTheme,
    TResult? Function(TakeThemeEvent value)? takeTheme,
  }) {
    return startEditingBorderStyle?.call(this);
  }

  @override
  @optionalTypeArgs
  TResult maybeMap<TResult extends Object?>({
    TResult Function(CreateSampleEvent value)? createSample,
    TResult Function(InitialLoadEvent value)? initialLoad,
    TResult Function(GetDiaryListEvent value)? getDiaryList,
    TResult Function(GetDiaryColumnsEvent value)? getDiaryColumns,
    TResult Function(GetDiaryCellsEvent value)? getDiaryCells,
    TResult Function(SelectDiaryCellEvent value)? selectDiaryCell,
    TResult Function(SelectDiaryCellsEvent value)? selectDiaryCells,
    TResult Function(SelectCapitalCellEvent value)? selectCapitalCell,
    TResult Function(OnPanUpdateEvent value)? onPanUpdate,
    TResult Function(StartEditingListEvent value)? startEditingList,
    TResult Function(ReturnToLoadedEvent value)? returnToLoaded,
    TResult Function(ReturnToCellsSelectedEvent value)? returnToCellsSelected,
    TResult Function(UpdateDiaryListNameEvent value)? updateDiaryListName,
    TResult Function(ChangeDiaryCellEvent value)? changeDiaryCell,
    TResult Function(ChangeCapitalCellEvent value)? changeCapitalCell,
    TResult Function(UpdateDiaryCellInFirebaseEvent value)?
        updateDiaryCellInFirebase,
    TResult Function(ChangeDiaryCellsSettingsEvent value)?
        changeDiaryCellsSettings,
    TResult Function(ChangeDiaryCellsBordersSettingsEvent value)?
        changeDiaryCellsBordersSettings,
    TResult Function(ChangeCapitalCellSettingsEvent value)?
        changeCapitalCellSettings,
    TResult Function(UpdateDiaryCellSettingsInFirebaseEvent value)?
        updateDiaryCellSettingsInFirebase,
    TResult Function(UpdateCapitalCellSettingsInFirebaseEvent value)?
        updateCapitalCellSettingsInFirebase,
    TResult Function(UpdateCapitalCellWidthEvent value)? updateCapitalCellWidth,
    TResult Function(UpdateCapitalCellWidthInFirebaseEvent value)?
        updateCapitalCellWidthInFirebase,
    TResult Function(StartEditingCellsEvent value)? startEditingCells,
    TResult Function(CreateDiaryColumnEvent value)? createDiaryColumn,
    TResult Function(DeleteDiaryColumnEvent value)? deleteDiaryColumn,
    TResult Function(UpdateDiaryListSettingsEvent value)?
        updateDiaryListSettings,
    TResult Function(ShareThemeEvent value)? shareTheme,
    TResult Function(StartEditingColorEvent value)? startEditingColor,
    TResult Function(StartEditingBordersEvent value)? startEditingBorders,
    TResult Function(StartEditingBordersStyleEvent value)?
        startEditingBorderStyle,
    TResult Function(TurnBackEditingEvent value)? turnBackEditing,
    TResult Function(StartColumnDeletingEvent value)? startColumnDeleting,
    TResult Function(StartColorThemeEditingEvent value)? startColorThemeEditing,
    TResult Function(DeleteColumnsEvent value)? deleteColumns,
    TResult Function(LoadThemesEvent value)? loadThemes,
    TResult Function(LoadFromThemeEvent value)? loadFromTheme,
    TResult Function(TakeThemeEvent value)? takeTheme,
    required TResult orElse(),
  }) {
    if (startEditingBorderStyle != null) {
      return startEditingBorderStyle(this);
    }
    return orElse();
  }
}

abstract class StartEditingBordersStyleEvent implements DiaryListEvent {
  const factory StartEditingBordersStyleEvent() =
      _$StartEditingBordersStyleEvent;
}

/// @nodoc
abstract class _$$TurnBackEditingEventCopyWith<$Res> {
  factory _$$TurnBackEditingEventCopyWith(_$TurnBackEditingEvent value,
          $Res Function(_$TurnBackEditingEvent) then) =
      __$$TurnBackEditingEventCopyWithImpl<$Res>;
}

/// @nodoc
class __$$TurnBackEditingEventCopyWithImpl<$Res>
    extends _$DiaryListEventCopyWithImpl<$Res, _$TurnBackEditingEvent>
    implements _$$TurnBackEditingEventCopyWith<$Res> {
  __$$TurnBackEditingEventCopyWithImpl(_$TurnBackEditingEvent _value,
      $Res Function(_$TurnBackEditingEvent) _then)
      : super(_value, _then);
}

/// @nodoc

class _$TurnBackEditingEvent implements TurnBackEditingEvent {
  const _$TurnBackEditingEvent();

  @override
  String toString() {
    return 'DiaryListEvent.turnBackEditing()';
  }

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType && other is _$TurnBackEditingEvent);
  }

  @override
  int get hashCode => runtimeType.hashCode;

  @override
  @optionalTypeArgs
  TResult when<TResult extends Object?>({
    required TResult Function() createSample,
    required TResult Function() initialLoad,
    required TResult Function(DateTime date, int delay) getDiaryList,
    required TResult Function(DiaryList diaryList, List<DiaryList> lists)
        getDiaryColumns,
    required TResult Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells,
            List<DiaryList> lists)
        getDiaryCells,
    required TResult Function(DiaryCell diaryCell) selectDiaryCell,
    required TResult Function(List<DiaryCell> diaryCells) selectDiaryCells,
    required TResult Function(CapitalCell capitalCell) selectCapitalCell,
    required TResult Function(
            DiaryCell diaryCell,
            GlobalObjectKey<State<StatefulWidget>> cellKey,
            DragUpdateDetails details,
            double scaleFactor)
        onPanUpdate,
    required TResult Function(DiaryList? selectedList) startEditingList,
    required TResult Function(
            String? newName, String? addedColumnName, int? addedColumnCount)
        returnToLoaded,
    required TResult Function() returnToCellsSelected,
    required TResult Function(DiaryList diaryList, String newName)
        updateDiaryListName,
    required TResult Function(DiaryCell diaryCell, String? textFieldText)
        changeDiaryCell,
    required TResult Function(CapitalCell capitalCell, String? textFieldText)
        changeCapitalCell,
    required TResult Function(DiaryCell diaryCell, String? textFieldText)
        updateDiaryCellInFirebase,
    required TResult Function(
            FontWeightEnum? fontWeight,
            TextDecorationEnum? textDecoration,
            FontStyleEnum? fontStyle,
            double? fontSize,
            String? color,
            HorizontalAlignmentsEnum? horizontalAlignment,
            VerticalAlignmentsEnum? verticalAlignment,
            String? backgroundColor)
        changeDiaryCellsSettings,
    required TResult Function(BordersEditingEnum bordersEditingEnum,
            BordersStyleEnum bordersStyleEnum, Color bordersColor)
        changeDiaryCellsBordersSettings,
    required TResult Function(
            FontWeightEnum? fontWeight,
            TextDecorationEnum? textDecoration,
            FontStyleEnum? fontStyle,
            double? fontSize,
            String? color,
            HorizontalAlignmentsEnum? horizontalAlignment,
            VerticalAlignmentsEnum? verticalAlignment,
            String? backgroundColor,
            BordersStyleEnum? bordersStyleEnum,
            Color? bordersColor)
        changeCapitalCellSettings,
    required TResult Function(
            DiaryCell diaryCell,
            int index,
            DiaryCellTextSettings? newTextSettings,
            DiaryCellSettings? newSettings)
        updateDiaryCellSettingsInFirebase,
    required TResult Function(DiaryColumnSettings newSettings)
        updateCapitalCellSettingsInFirebase,
    required TResult Function(PointerMoveEvent details) updateCapitalCellWidth,
    required TResult Function(PointerUpEvent details)
        updateCapitalCellWidthInFirebase,
    required TResult Function(bool isTextEditing) startEditingCells,
    required TResult Function(DiaryList diaryList, String name,
            int columnsCount, List<DiaryColumn> diaryColumns)
        createDiaryColumn,
    required TResult Function(DiaryList diaryList, String columnId)
        deleteDiaryColumn,
    required TResult Function(DiaryList diaryList, String? themeColor,
            String? themeBorderColor, String? themePanelBackgroundColor)
        updateDiaryListSettings,
    required TResult Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<DiaryCell> diaryCells,
            List<CapitalCell> capitalCells,
            String themeName,
            String description)
        shareTheme,
    required TResult Function() startEditingColor,
    required TResult Function() startEditingBorders,
    required TResult Function() startEditingBorderStyle,
    required TResult Function() turnBackEditing,
    required TResult Function() startColumnDeleting,
    required TResult Function() startColorThemeEditing,
    required TResult Function() deleteColumns,
    required TResult Function() loadThemes,
    required TResult Function(ListTheme listTheme) loadFromTheme,
    required TResult Function(ListTheme listTheme) takeTheme,
  }) {
    return turnBackEditing();
  }

  @override
  @optionalTypeArgs
  TResult? whenOrNull<TResult extends Object?>({
    TResult? Function()? createSample,
    TResult? Function()? initialLoad,
    TResult? Function(DateTime date, int delay)? getDiaryList,
    TResult? Function(DiaryList diaryList, List<DiaryList> lists)?
        getDiaryColumns,
    TResult? Function(DiaryList diaryList, List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells, List<DiaryList> lists)?
        getDiaryCells,
    TResult? Function(DiaryCell diaryCell)? selectDiaryCell,
    TResult? Function(List<DiaryCell> diaryCells)? selectDiaryCells,
    TResult? Function(CapitalCell capitalCell)? selectCapitalCell,
    TResult? Function(
            DiaryCell diaryCell,
            GlobalObjectKey<State<StatefulWidget>> cellKey,
            DragUpdateDetails details,
            double scaleFactor)?
        onPanUpdate,
    TResult? Function(DiaryList? selectedList)? startEditingList,
    TResult? Function(
            String? newName, String? addedColumnName, int? addedColumnCount)?
        returnToLoaded,
    TResult? Function()? returnToCellsSelected,
    TResult? Function(DiaryList diaryList, String newName)? updateDiaryListName,
    TResult? Function(DiaryCell diaryCell, String? textFieldText)?
        changeDiaryCell,
    TResult? Function(CapitalCell capitalCell, String? textFieldText)?
        changeCapitalCell,
    TResult? Function(DiaryCell diaryCell, String? textFieldText)?
        updateDiaryCellInFirebase,
    TResult? Function(
            FontWeightEnum? fontWeight,
            TextDecorationEnum? textDecoration,
            FontStyleEnum? fontStyle,
            double? fontSize,
            String? color,
            HorizontalAlignmentsEnum? horizontalAlignment,
            VerticalAlignmentsEnum? verticalAlignment,
            String? backgroundColor)?
        changeDiaryCellsSettings,
    TResult? Function(BordersEditingEnum bordersEditingEnum,
            BordersStyleEnum bordersStyleEnum, Color bordersColor)?
        changeDiaryCellsBordersSettings,
    TResult? Function(
            FontWeightEnum? fontWeight,
            TextDecorationEnum? textDecoration,
            FontStyleEnum? fontStyle,
            double? fontSize,
            String? color,
            HorizontalAlignmentsEnum? horizontalAlignment,
            VerticalAlignmentsEnum? verticalAlignment,
            String? backgroundColor,
            BordersStyleEnum? bordersStyleEnum,
            Color? bordersColor)?
        changeCapitalCellSettings,
    TResult? Function(
            DiaryCell diaryCell,
            int index,
            DiaryCellTextSettings? newTextSettings,
            DiaryCellSettings? newSettings)?
        updateDiaryCellSettingsInFirebase,
    TResult? Function(DiaryColumnSettings newSettings)?
        updateCapitalCellSettingsInFirebase,
    TResult? Function(PointerMoveEvent details)? updateCapitalCellWidth,
    TResult? Function(PointerUpEvent details)? updateCapitalCellWidthInFirebase,
    TResult? Function(bool isTextEditing)? startEditingCells,
    TResult? Function(DiaryList diaryList, String name, int columnsCount,
            List<DiaryColumn> diaryColumns)?
        createDiaryColumn,
    TResult? Function(DiaryList diaryList, String columnId)? deleteDiaryColumn,
    TResult? Function(DiaryList diaryList, String? themeColor,
            String? themeBorderColor, String? themePanelBackgroundColor)?
        updateDiaryListSettings,
    TResult? Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<DiaryCell> diaryCells,
            List<CapitalCell> capitalCells,
            String themeName,
            String description)?
        shareTheme,
    TResult? Function()? startEditingColor,
    TResult? Function()? startEditingBorders,
    TResult? Function()? startEditingBorderStyle,
    TResult? Function()? turnBackEditing,
    TResult? Function()? startColumnDeleting,
    TResult? Function()? startColorThemeEditing,
    TResult? Function()? deleteColumns,
    TResult? Function()? loadThemes,
    TResult? Function(ListTheme listTheme)? loadFromTheme,
    TResult? Function(ListTheme listTheme)? takeTheme,
  }) {
    return turnBackEditing?.call();
  }

  @override
  @optionalTypeArgs
  TResult maybeWhen<TResult extends Object?>({
    TResult Function()? createSample,
    TResult Function()? initialLoad,
    TResult Function(DateTime date, int delay)? getDiaryList,
    TResult Function(DiaryList diaryList, List<DiaryList> lists)?
        getDiaryColumns,
    TResult Function(DiaryList diaryList, List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells, List<DiaryList> lists)?
        getDiaryCells,
    TResult Function(DiaryCell diaryCell)? selectDiaryCell,
    TResult Function(List<DiaryCell> diaryCells)? selectDiaryCells,
    TResult Function(CapitalCell capitalCell)? selectCapitalCell,
    TResult Function(
            DiaryCell diaryCell,
            GlobalObjectKey<State<StatefulWidget>> cellKey,
            DragUpdateDetails details,
            double scaleFactor)?
        onPanUpdate,
    TResult Function(DiaryList? selectedList)? startEditingList,
    TResult Function(
            String? newName, String? addedColumnName, int? addedColumnCount)?
        returnToLoaded,
    TResult Function()? returnToCellsSelected,
    TResult Function(DiaryList diaryList, String newName)? updateDiaryListName,
    TResult Function(DiaryCell diaryCell, String? textFieldText)?
        changeDiaryCell,
    TResult Function(CapitalCell capitalCell, String? textFieldText)?
        changeCapitalCell,
    TResult Function(DiaryCell diaryCell, String? textFieldText)?
        updateDiaryCellInFirebase,
    TResult Function(
            FontWeightEnum? fontWeight,
            TextDecorationEnum? textDecoration,
            FontStyleEnum? fontStyle,
            double? fontSize,
            String? color,
            HorizontalAlignmentsEnum? horizontalAlignment,
            VerticalAlignmentsEnum? verticalAlignment,
            String? backgroundColor)?
        changeDiaryCellsSettings,
    TResult Function(BordersEditingEnum bordersEditingEnum,
            BordersStyleEnum bordersStyleEnum, Color bordersColor)?
        changeDiaryCellsBordersSettings,
    TResult Function(
            FontWeightEnum? fontWeight,
            TextDecorationEnum? textDecoration,
            FontStyleEnum? fontStyle,
            double? fontSize,
            String? color,
            HorizontalAlignmentsEnum? horizontalAlignment,
            VerticalAlignmentsEnum? verticalAlignment,
            String? backgroundColor,
            BordersStyleEnum? bordersStyleEnum,
            Color? bordersColor)?
        changeCapitalCellSettings,
    TResult Function(
            DiaryCell diaryCell,
            int index,
            DiaryCellTextSettings? newTextSettings,
            DiaryCellSettings? newSettings)?
        updateDiaryCellSettingsInFirebase,
    TResult Function(DiaryColumnSettings newSettings)?
        updateCapitalCellSettingsInFirebase,
    TResult Function(PointerMoveEvent details)? updateCapitalCellWidth,
    TResult Function(PointerUpEvent details)? updateCapitalCellWidthInFirebase,
    TResult Function(bool isTextEditing)? startEditingCells,
    TResult Function(DiaryList diaryList, String name, int columnsCount,
            List<DiaryColumn> diaryColumns)?
        createDiaryColumn,
    TResult Function(DiaryList diaryList, String columnId)? deleteDiaryColumn,
    TResult Function(DiaryList diaryList, String? themeColor,
            String? themeBorderColor, String? themePanelBackgroundColor)?
        updateDiaryListSettings,
    TResult Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<DiaryCell> diaryCells,
            List<CapitalCell> capitalCells,
            String themeName,
            String description)?
        shareTheme,
    TResult Function()? startEditingColor,
    TResult Function()? startEditingBorders,
    TResult Function()? startEditingBorderStyle,
    TResult Function()? turnBackEditing,
    TResult Function()? startColumnDeleting,
    TResult Function()? startColorThemeEditing,
    TResult Function()? deleteColumns,
    TResult Function()? loadThemes,
    TResult Function(ListTheme listTheme)? loadFromTheme,
    TResult Function(ListTheme listTheme)? takeTheme,
    required TResult orElse(),
  }) {
    if (turnBackEditing != null) {
      return turnBackEditing();
    }
    return orElse();
  }

  @override
  @optionalTypeArgs
  TResult map<TResult extends Object?>({
    required TResult Function(CreateSampleEvent value) createSample,
    required TResult Function(InitialLoadEvent value) initialLoad,
    required TResult Function(GetDiaryListEvent value) getDiaryList,
    required TResult Function(GetDiaryColumnsEvent value) getDiaryColumns,
    required TResult Function(GetDiaryCellsEvent value) getDiaryCells,
    required TResult Function(SelectDiaryCellEvent value) selectDiaryCell,
    required TResult Function(SelectDiaryCellsEvent value) selectDiaryCells,
    required TResult Function(SelectCapitalCellEvent value) selectCapitalCell,
    required TResult Function(OnPanUpdateEvent value) onPanUpdate,
    required TResult Function(StartEditingListEvent value) startEditingList,
    required TResult Function(ReturnToLoadedEvent value) returnToLoaded,
    required TResult Function(ReturnToCellsSelectedEvent value)
        returnToCellsSelected,
    required TResult Function(UpdateDiaryListNameEvent value)
        updateDiaryListName,
    required TResult Function(ChangeDiaryCellEvent value) changeDiaryCell,
    required TResult Function(ChangeCapitalCellEvent value) changeCapitalCell,
    required TResult Function(UpdateDiaryCellInFirebaseEvent value)
        updateDiaryCellInFirebase,
    required TResult Function(ChangeDiaryCellsSettingsEvent value)
        changeDiaryCellsSettings,
    required TResult Function(ChangeDiaryCellsBordersSettingsEvent value)
        changeDiaryCellsBordersSettings,
    required TResult Function(ChangeCapitalCellSettingsEvent value)
        changeCapitalCellSettings,
    required TResult Function(UpdateDiaryCellSettingsInFirebaseEvent value)
        updateDiaryCellSettingsInFirebase,
    required TResult Function(UpdateCapitalCellSettingsInFirebaseEvent value)
        updateCapitalCellSettingsInFirebase,
    required TResult Function(UpdateCapitalCellWidthEvent value)
        updateCapitalCellWidth,
    required TResult Function(UpdateCapitalCellWidthInFirebaseEvent value)
        updateCapitalCellWidthInFirebase,
    required TResult Function(StartEditingCellsEvent value) startEditingCells,
    required TResult Function(CreateDiaryColumnEvent value) createDiaryColumn,
    required TResult Function(DeleteDiaryColumnEvent value) deleteDiaryColumn,
    required TResult Function(UpdateDiaryListSettingsEvent value)
        updateDiaryListSettings,
    required TResult Function(ShareThemeEvent value) shareTheme,
    required TResult Function(StartEditingColorEvent value) startEditingColor,
    required TResult Function(StartEditingBordersEvent value)
        startEditingBorders,
    required TResult Function(StartEditingBordersStyleEvent value)
        startEditingBorderStyle,
    required TResult Function(TurnBackEditingEvent value) turnBackEditing,
    required TResult Function(StartColumnDeletingEvent value)
        startColumnDeleting,
    required TResult Function(StartColorThemeEditingEvent value)
        startColorThemeEditing,
    required TResult Function(DeleteColumnsEvent value) deleteColumns,
    required TResult Function(LoadThemesEvent value) loadThemes,
    required TResult Function(LoadFromThemeEvent value) loadFromTheme,
    required TResult Function(TakeThemeEvent value) takeTheme,
  }) {
    return turnBackEditing(this);
  }

  @override
  @optionalTypeArgs
  TResult? mapOrNull<TResult extends Object?>({
    TResult? Function(CreateSampleEvent value)? createSample,
    TResult? Function(InitialLoadEvent value)? initialLoad,
    TResult? Function(GetDiaryListEvent value)? getDiaryList,
    TResult? Function(GetDiaryColumnsEvent value)? getDiaryColumns,
    TResult? Function(GetDiaryCellsEvent value)? getDiaryCells,
    TResult? Function(SelectDiaryCellEvent value)? selectDiaryCell,
    TResult? Function(SelectDiaryCellsEvent value)? selectDiaryCells,
    TResult? Function(SelectCapitalCellEvent value)? selectCapitalCell,
    TResult? Function(OnPanUpdateEvent value)? onPanUpdate,
    TResult? Function(StartEditingListEvent value)? startEditingList,
    TResult? Function(ReturnToLoadedEvent value)? returnToLoaded,
    TResult? Function(ReturnToCellsSelectedEvent value)? returnToCellsSelected,
    TResult? Function(UpdateDiaryListNameEvent value)? updateDiaryListName,
    TResult? Function(ChangeDiaryCellEvent value)? changeDiaryCell,
    TResult? Function(ChangeCapitalCellEvent value)? changeCapitalCell,
    TResult? Function(UpdateDiaryCellInFirebaseEvent value)?
        updateDiaryCellInFirebase,
    TResult? Function(ChangeDiaryCellsSettingsEvent value)?
        changeDiaryCellsSettings,
    TResult? Function(ChangeDiaryCellsBordersSettingsEvent value)?
        changeDiaryCellsBordersSettings,
    TResult? Function(ChangeCapitalCellSettingsEvent value)?
        changeCapitalCellSettings,
    TResult? Function(UpdateDiaryCellSettingsInFirebaseEvent value)?
        updateDiaryCellSettingsInFirebase,
    TResult? Function(UpdateCapitalCellSettingsInFirebaseEvent value)?
        updateCapitalCellSettingsInFirebase,
    TResult? Function(UpdateCapitalCellWidthEvent value)?
        updateCapitalCellWidth,
    TResult? Function(UpdateCapitalCellWidthInFirebaseEvent value)?
        updateCapitalCellWidthInFirebase,
    TResult? Function(StartEditingCellsEvent value)? startEditingCells,
    TResult? Function(CreateDiaryColumnEvent value)? createDiaryColumn,
    TResult? Function(DeleteDiaryColumnEvent value)? deleteDiaryColumn,
    TResult? Function(UpdateDiaryListSettingsEvent value)?
        updateDiaryListSettings,
    TResult? Function(ShareThemeEvent value)? shareTheme,
    TResult? Function(StartEditingColorEvent value)? startEditingColor,
    TResult? Function(StartEditingBordersEvent value)? startEditingBorders,
    TResult? Function(StartEditingBordersStyleEvent value)?
        startEditingBorderStyle,
    TResult? Function(TurnBackEditingEvent value)? turnBackEditing,
    TResult? Function(StartColumnDeletingEvent value)? startColumnDeleting,
    TResult? Function(StartColorThemeEditingEvent value)?
        startColorThemeEditing,
    TResult? Function(DeleteColumnsEvent value)? deleteColumns,
    TResult? Function(LoadThemesEvent value)? loadThemes,
    TResult? Function(LoadFromThemeEvent value)? loadFromTheme,
    TResult? Function(TakeThemeEvent value)? takeTheme,
  }) {
    return turnBackEditing?.call(this);
  }

  @override
  @optionalTypeArgs
  TResult maybeMap<TResult extends Object?>({
    TResult Function(CreateSampleEvent value)? createSample,
    TResult Function(InitialLoadEvent value)? initialLoad,
    TResult Function(GetDiaryListEvent value)? getDiaryList,
    TResult Function(GetDiaryColumnsEvent value)? getDiaryColumns,
    TResult Function(GetDiaryCellsEvent value)? getDiaryCells,
    TResult Function(SelectDiaryCellEvent value)? selectDiaryCell,
    TResult Function(SelectDiaryCellsEvent value)? selectDiaryCells,
    TResult Function(SelectCapitalCellEvent value)? selectCapitalCell,
    TResult Function(OnPanUpdateEvent value)? onPanUpdate,
    TResult Function(StartEditingListEvent value)? startEditingList,
    TResult Function(ReturnToLoadedEvent value)? returnToLoaded,
    TResult Function(ReturnToCellsSelectedEvent value)? returnToCellsSelected,
    TResult Function(UpdateDiaryListNameEvent value)? updateDiaryListName,
    TResult Function(ChangeDiaryCellEvent value)? changeDiaryCell,
    TResult Function(ChangeCapitalCellEvent value)? changeCapitalCell,
    TResult Function(UpdateDiaryCellInFirebaseEvent value)?
        updateDiaryCellInFirebase,
    TResult Function(ChangeDiaryCellsSettingsEvent value)?
        changeDiaryCellsSettings,
    TResult Function(ChangeDiaryCellsBordersSettingsEvent value)?
        changeDiaryCellsBordersSettings,
    TResult Function(ChangeCapitalCellSettingsEvent value)?
        changeCapitalCellSettings,
    TResult Function(UpdateDiaryCellSettingsInFirebaseEvent value)?
        updateDiaryCellSettingsInFirebase,
    TResult Function(UpdateCapitalCellSettingsInFirebaseEvent value)?
        updateCapitalCellSettingsInFirebase,
    TResult Function(UpdateCapitalCellWidthEvent value)? updateCapitalCellWidth,
    TResult Function(UpdateCapitalCellWidthInFirebaseEvent value)?
        updateCapitalCellWidthInFirebase,
    TResult Function(StartEditingCellsEvent value)? startEditingCells,
    TResult Function(CreateDiaryColumnEvent value)? createDiaryColumn,
    TResult Function(DeleteDiaryColumnEvent value)? deleteDiaryColumn,
    TResult Function(UpdateDiaryListSettingsEvent value)?
        updateDiaryListSettings,
    TResult Function(ShareThemeEvent value)? shareTheme,
    TResult Function(StartEditingColorEvent value)? startEditingColor,
    TResult Function(StartEditingBordersEvent value)? startEditingBorders,
    TResult Function(StartEditingBordersStyleEvent value)?
        startEditingBorderStyle,
    TResult Function(TurnBackEditingEvent value)? turnBackEditing,
    TResult Function(StartColumnDeletingEvent value)? startColumnDeleting,
    TResult Function(StartColorThemeEditingEvent value)? startColorThemeEditing,
    TResult Function(DeleteColumnsEvent value)? deleteColumns,
    TResult Function(LoadThemesEvent value)? loadThemes,
    TResult Function(LoadFromThemeEvent value)? loadFromTheme,
    TResult Function(TakeThemeEvent value)? takeTheme,
    required TResult orElse(),
  }) {
    if (turnBackEditing != null) {
      return turnBackEditing(this);
    }
    return orElse();
  }
}

abstract class TurnBackEditingEvent implements DiaryListEvent {
  const factory TurnBackEditingEvent() = _$TurnBackEditingEvent;
}

/// @nodoc
abstract class _$$StartColumnDeletingEventCopyWith<$Res> {
  factory _$$StartColumnDeletingEventCopyWith(_$StartColumnDeletingEvent value,
          $Res Function(_$StartColumnDeletingEvent) then) =
      __$$StartColumnDeletingEventCopyWithImpl<$Res>;
}

/// @nodoc
class __$$StartColumnDeletingEventCopyWithImpl<$Res>
    extends _$DiaryListEventCopyWithImpl<$Res, _$StartColumnDeletingEvent>
    implements _$$StartColumnDeletingEventCopyWith<$Res> {
  __$$StartColumnDeletingEventCopyWithImpl(_$StartColumnDeletingEvent _value,
      $Res Function(_$StartColumnDeletingEvent) _then)
      : super(_value, _then);
}

/// @nodoc

class _$StartColumnDeletingEvent implements StartColumnDeletingEvent {
  const _$StartColumnDeletingEvent();

  @override
  String toString() {
    return 'DiaryListEvent.startColumnDeleting()';
  }

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$StartColumnDeletingEvent);
  }

  @override
  int get hashCode => runtimeType.hashCode;

  @override
  @optionalTypeArgs
  TResult when<TResult extends Object?>({
    required TResult Function() createSample,
    required TResult Function() initialLoad,
    required TResult Function(DateTime date, int delay) getDiaryList,
    required TResult Function(DiaryList diaryList, List<DiaryList> lists)
        getDiaryColumns,
    required TResult Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells,
            List<DiaryList> lists)
        getDiaryCells,
    required TResult Function(DiaryCell diaryCell) selectDiaryCell,
    required TResult Function(List<DiaryCell> diaryCells) selectDiaryCells,
    required TResult Function(CapitalCell capitalCell) selectCapitalCell,
    required TResult Function(
            DiaryCell diaryCell,
            GlobalObjectKey<State<StatefulWidget>> cellKey,
            DragUpdateDetails details,
            double scaleFactor)
        onPanUpdate,
    required TResult Function(DiaryList? selectedList) startEditingList,
    required TResult Function(
            String? newName, String? addedColumnName, int? addedColumnCount)
        returnToLoaded,
    required TResult Function() returnToCellsSelected,
    required TResult Function(DiaryList diaryList, String newName)
        updateDiaryListName,
    required TResult Function(DiaryCell diaryCell, String? textFieldText)
        changeDiaryCell,
    required TResult Function(CapitalCell capitalCell, String? textFieldText)
        changeCapitalCell,
    required TResult Function(DiaryCell diaryCell, String? textFieldText)
        updateDiaryCellInFirebase,
    required TResult Function(
            FontWeightEnum? fontWeight,
            TextDecorationEnum? textDecoration,
            FontStyleEnum? fontStyle,
            double? fontSize,
            String? color,
            HorizontalAlignmentsEnum? horizontalAlignment,
            VerticalAlignmentsEnum? verticalAlignment,
            String? backgroundColor)
        changeDiaryCellsSettings,
    required TResult Function(BordersEditingEnum bordersEditingEnum,
            BordersStyleEnum bordersStyleEnum, Color bordersColor)
        changeDiaryCellsBordersSettings,
    required TResult Function(
            FontWeightEnum? fontWeight,
            TextDecorationEnum? textDecoration,
            FontStyleEnum? fontStyle,
            double? fontSize,
            String? color,
            HorizontalAlignmentsEnum? horizontalAlignment,
            VerticalAlignmentsEnum? verticalAlignment,
            String? backgroundColor,
            BordersStyleEnum? bordersStyleEnum,
            Color? bordersColor)
        changeCapitalCellSettings,
    required TResult Function(
            DiaryCell diaryCell,
            int index,
            DiaryCellTextSettings? newTextSettings,
            DiaryCellSettings? newSettings)
        updateDiaryCellSettingsInFirebase,
    required TResult Function(DiaryColumnSettings newSettings)
        updateCapitalCellSettingsInFirebase,
    required TResult Function(PointerMoveEvent details) updateCapitalCellWidth,
    required TResult Function(PointerUpEvent details)
        updateCapitalCellWidthInFirebase,
    required TResult Function(bool isTextEditing) startEditingCells,
    required TResult Function(DiaryList diaryList, String name,
            int columnsCount, List<DiaryColumn> diaryColumns)
        createDiaryColumn,
    required TResult Function(DiaryList diaryList, String columnId)
        deleteDiaryColumn,
    required TResult Function(DiaryList diaryList, String? themeColor,
            String? themeBorderColor, String? themePanelBackgroundColor)
        updateDiaryListSettings,
    required TResult Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<DiaryCell> diaryCells,
            List<CapitalCell> capitalCells,
            String themeName,
            String description)
        shareTheme,
    required TResult Function() startEditingColor,
    required TResult Function() startEditingBorders,
    required TResult Function() startEditingBorderStyle,
    required TResult Function() turnBackEditing,
    required TResult Function() startColumnDeleting,
    required TResult Function() startColorThemeEditing,
    required TResult Function() deleteColumns,
    required TResult Function() loadThemes,
    required TResult Function(ListTheme listTheme) loadFromTheme,
    required TResult Function(ListTheme listTheme) takeTheme,
  }) {
    return startColumnDeleting();
  }

  @override
  @optionalTypeArgs
  TResult? whenOrNull<TResult extends Object?>({
    TResult? Function()? createSample,
    TResult? Function()? initialLoad,
    TResult? Function(DateTime date, int delay)? getDiaryList,
    TResult? Function(DiaryList diaryList, List<DiaryList> lists)?
        getDiaryColumns,
    TResult? Function(DiaryList diaryList, List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells, List<DiaryList> lists)?
        getDiaryCells,
    TResult? Function(DiaryCell diaryCell)? selectDiaryCell,
    TResult? Function(List<DiaryCell> diaryCells)? selectDiaryCells,
    TResult? Function(CapitalCell capitalCell)? selectCapitalCell,
    TResult? Function(
            DiaryCell diaryCell,
            GlobalObjectKey<State<StatefulWidget>> cellKey,
            DragUpdateDetails details,
            double scaleFactor)?
        onPanUpdate,
    TResult? Function(DiaryList? selectedList)? startEditingList,
    TResult? Function(
            String? newName, String? addedColumnName, int? addedColumnCount)?
        returnToLoaded,
    TResult? Function()? returnToCellsSelected,
    TResult? Function(DiaryList diaryList, String newName)? updateDiaryListName,
    TResult? Function(DiaryCell diaryCell, String? textFieldText)?
        changeDiaryCell,
    TResult? Function(CapitalCell capitalCell, String? textFieldText)?
        changeCapitalCell,
    TResult? Function(DiaryCell diaryCell, String? textFieldText)?
        updateDiaryCellInFirebase,
    TResult? Function(
            FontWeightEnum? fontWeight,
            TextDecorationEnum? textDecoration,
            FontStyleEnum? fontStyle,
            double? fontSize,
            String? color,
            HorizontalAlignmentsEnum? horizontalAlignment,
            VerticalAlignmentsEnum? verticalAlignment,
            String? backgroundColor)?
        changeDiaryCellsSettings,
    TResult? Function(BordersEditingEnum bordersEditingEnum,
            BordersStyleEnum bordersStyleEnum, Color bordersColor)?
        changeDiaryCellsBordersSettings,
    TResult? Function(
            FontWeightEnum? fontWeight,
            TextDecorationEnum? textDecoration,
            FontStyleEnum? fontStyle,
            double? fontSize,
            String? color,
            HorizontalAlignmentsEnum? horizontalAlignment,
            VerticalAlignmentsEnum? verticalAlignment,
            String? backgroundColor,
            BordersStyleEnum? bordersStyleEnum,
            Color? bordersColor)?
        changeCapitalCellSettings,
    TResult? Function(
            DiaryCell diaryCell,
            int index,
            DiaryCellTextSettings? newTextSettings,
            DiaryCellSettings? newSettings)?
        updateDiaryCellSettingsInFirebase,
    TResult? Function(DiaryColumnSettings newSettings)?
        updateCapitalCellSettingsInFirebase,
    TResult? Function(PointerMoveEvent details)? updateCapitalCellWidth,
    TResult? Function(PointerUpEvent details)? updateCapitalCellWidthInFirebase,
    TResult? Function(bool isTextEditing)? startEditingCells,
    TResult? Function(DiaryList diaryList, String name, int columnsCount,
            List<DiaryColumn> diaryColumns)?
        createDiaryColumn,
    TResult? Function(DiaryList diaryList, String columnId)? deleteDiaryColumn,
    TResult? Function(DiaryList diaryList, String? themeColor,
            String? themeBorderColor, String? themePanelBackgroundColor)?
        updateDiaryListSettings,
    TResult? Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<DiaryCell> diaryCells,
            List<CapitalCell> capitalCells,
            String themeName,
            String description)?
        shareTheme,
    TResult? Function()? startEditingColor,
    TResult? Function()? startEditingBorders,
    TResult? Function()? startEditingBorderStyle,
    TResult? Function()? turnBackEditing,
    TResult? Function()? startColumnDeleting,
    TResult? Function()? startColorThemeEditing,
    TResult? Function()? deleteColumns,
    TResult? Function()? loadThemes,
    TResult? Function(ListTheme listTheme)? loadFromTheme,
    TResult? Function(ListTheme listTheme)? takeTheme,
  }) {
    return startColumnDeleting?.call();
  }

  @override
  @optionalTypeArgs
  TResult maybeWhen<TResult extends Object?>({
    TResult Function()? createSample,
    TResult Function()? initialLoad,
    TResult Function(DateTime date, int delay)? getDiaryList,
    TResult Function(DiaryList diaryList, List<DiaryList> lists)?
        getDiaryColumns,
    TResult Function(DiaryList diaryList, List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells, List<DiaryList> lists)?
        getDiaryCells,
    TResult Function(DiaryCell diaryCell)? selectDiaryCell,
    TResult Function(List<DiaryCell> diaryCells)? selectDiaryCells,
    TResult Function(CapitalCell capitalCell)? selectCapitalCell,
    TResult Function(
            DiaryCell diaryCell,
            GlobalObjectKey<State<StatefulWidget>> cellKey,
            DragUpdateDetails details,
            double scaleFactor)?
        onPanUpdate,
    TResult Function(DiaryList? selectedList)? startEditingList,
    TResult Function(
            String? newName, String? addedColumnName, int? addedColumnCount)?
        returnToLoaded,
    TResult Function()? returnToCellsSelected,
    TResult Function(DiaryList diaryList, String newName)? updateDiaryListName,
    TResult Function(DiaryCell diaryCell, String? textFieldText)?
        changeDiaryCell,
    TResult Function(CapitalCell capitalCell, String? textFieldText)?
        changeCapitalCell,
    TResult Function(DiaryCell diaryCell, String? textFieldText)?
        updateDiaryCellInFirebase,
    TResult Function(
            FontWeightEnum? fontWeight,
            TextDecorationEnum? textDecoration,
            FontStyleEnum? fontStyle,
            double? fontSize,
            String? color,
            HorizontalAlignmentsEnum? horizontalAlignment,
            VerticalAlignmentsEnum? verticalAlignment,
            String? backgroundColor)?
        changeDiaryCellsSettings,
    TResult Function(BordersEditingEnum bordersEditingEnum,
            BordersStyleEnum bordersStyleEnum, Color bordersColor)?
        changeDiaryCellsBordersSettings,
    TResult Function(
            FontWeightEnum? fontWeight,
            TextDecorationEnum? textDecoration,
            FontStyleEnum? fontStyle,
            double? fontSize,
            String? color,
            HorizontalAlignmentsEnum? horizontalAlignment,
            VerticalAlignmentsEnum? verticalAlignment,
            String? backgroundColor,
            BordersStyleEnum? bordersStyleEnum,
            Color? bordersColor)?
        changeCapitalCellSettings,
    TResult Function(
            DiaryCell diaryCell,
            int index,
            DiaryCellTextSettings? newTextSettings,
            DiaryCellSettings? newSettings)?
        updateDiaryCellSettingsInFirebase,
    TResult Function(DiaryColumnSettings newSettings)?
        updateCapitalCellSettingsInFirebase,
    TResult Function(PointerMoveEvent details)? updateCapitalCellWidth,
    TResult Function(PointerUpEvent details)? updateCapitalCellWidthInFirebase,
    TResult Function(bool isTextEditing)? startEditingCells,
    TResult Function(DiaryList diaryList, String name, int columnsCount,
            List<DiaryColumn> diaryColumns)?
        createDiaryColumn,
    TResult Function(DiaryList diaryList, String columnId)? deleteDiaryColumn,
    TResult Function(DiaryList diaryList, String? themeColor,
            String? themeBorderColor, String? themePanelBackgroundColor)?
        updateDiaryListSettings,
    TResult Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<DiaryCell> diaryCells,
            List<CapitalCell> capitalCells,
            String themeName,
            String description)?
        shareTheme,
    TResult Function()? startEditingColor,
    TResult Function()? startEditingBorders,
    TResult Function()? startEditingBorderStyle,
    TResult Function()? turnBackEditing,
    TResult Function()? startColumnDeleting,
    TResult Function()? startColorThemeEditing,
    TResult Function()? deleteColumns,
    TResult Function()? loadThemes,
    TResult Function(ListTheme listTheme)? loadFromTheme,
    TResult Function(ListTheme listTheme)? takeTheme,
    required TResult orElse(),
  }) {
    if (startColumnDeleting != null) {
      return startColumnDeleting();
    }
    return orElse();
  }

  @override
  @optionalTypeArgs
  TResult map<TResult extends Object?>({
    required TResult Function(CreateSampleEvent value) createSample,
    required TResult Function(InitialLoadEvent value) initialLoad,
    required TResult Function(GetDiaryListEvent value) getDiaryList,
    required TResult Function(GetDiaryColumnsEvent value) getDiaryColumns,
    required TResult Function(GetDiaryCellsEvent value) getDiaryCells,
    required TResult Function(SelectDiaryCellEvent value) selectDiaryCell,
    required TResult Function(SelectDiaryCellsEvent value) selectDiaryCells,
    required TResult Function(SelectCapitalCellEvent value) selectCapitalCell,
    required TResult Function(OnPanUpdateEvent value) onPanUpdate,
    required TResult Function(StartEditingListEvent value) startEditingList,
    required TResult Function(ReturnToLoadedEvent value) returnToLoaded,
    required TResult Function(ReturnToCellsSelectedEvent value)
        returnToCellsSelected,
    required TResult Function(UpdateDiaryListNameEvent value)
        updateDiaryListName,
    required TResult Function(ChangeDiaryCellEvent value) changeDiaryCell,
    required TResult Function(ChangeCapitalCellEvent value) changeCapitalCell,
    required TResult Function(UpdateDiaryCellInFirebaseEvent value)
        updateDiaryCellInFirebase,
    required TResult Function(ChangeDiaryCellsSettingsEvent value)
        changeDiaryCellsSettings,
    required TResult Function(ChangeDiaryCellsBordersSettingsEvent value)
        changeDiaryCellsBordersSettings,
    required TResult Function(ChangeCapitalCellSettingsEvent value)
        changeCapitalCellSettings,
    required TResult Function(UpdateDiaryCellSettingsInFirebaseEvent value)
        updateDiaryCellSettingsInFirebase,
    required TResult Function(UpdateCapitalCellSettingsInFirebaseEvent value)
        updateCapitalCellSettingsInFirebase,
    required TResult Function(UpdateCapitalCellWidthEvent value)
        updateCapitalCellWidth,
    required TResult Function(UpdateCapitalCellWidthInFirebaseEvent value)
        updateCapitalCellWidthInFirebase,
    required TResult Function(StartEditingCellsEvent value) startEditingCells,
    required TResult Function(CreateDiaryColumnEvent value) createDiaryColumn,
    required TResult Function(DeleteDiaryColumnEvent value) deleteDiaryColumn,
    required TResult Function(UpdateDiaryListSettingsEvent value)
        updateDiaryListSettings,
    required TResult Function(ShareThemeEvent value) shareTheme,
    required TResult Function(StartEditingColorEvent value) startEditingColor,
    required TResult Function(StartEditingBordersEvent value)
        startEditingBorders,
    required TResult Function(StartEditingBordersStyleEvent value)
        startEditingBorderStyle,
    required TResult Function(TurnBackEditingEvent value) turnBackEditing,
    required TResult Function(StartColumnDeletingEvent value)
        startColumnDeleting,
    required TResult Function(StartColorThemeEditingEvent value)
        startColorThemeEditing,
    required TResult Function(DeleteColumnsEvent value) deleteColumns,
    required TResult Function(LoadThemesEvent value) loadThemes,
    required TResult Function(LoadFromThemeEvent value) loadFromTheme,
    required TResult Function(TakeThemeEvent value) takeTheme,
  }) {
    return startColumnDeleting(this);
  }

  @override
  @optionalTypeArgs
  TResult? mapOrNull<TResult extends Object?>({
    TResult? Function(CreateSampleEvent value)? createSample,
    TResult? Function(InitialLoadEvent value)? initialLoad,
    TResult? Function(GetDiaryListEvent value)? getDiaryList,
    TResult? Function(GetDiaryColumnsEvent value)? getDiaryColumns,
    TResult? Function(GetDiaryCellsEvent value)? getDiaryCells,
    TResult? Function(SelectDiaryCellEvent value)? selectDiaryCell,
    TResult? Function(SelectDiaryCellsEvent value)? selectDiaryCells,
    TResult? Function(SelectCapitalCellEvent value)? selectCapitalCell,
    TResult? Function(OnPanUpdateEvent value)? onPanUpdate,
    TResult? Function(StartEditingListEvent value)? startEditingList,
    TResult? Function(ReturnToLoadedEvent value)? returnToLoaded,
    TResult? Function(ReturnToCellsSelectedEvent value)? returnToCellsSelected,
    TResult? Function(UpdateDiaryListNameEvent value)? updateDiaryListName,
    TResult? Function(ChangeDiaryCellEvent value)? changeDiaryCell,
    TResult? Function(ChangeCapitalCellEvent value)? changeCapitalCell,
    TResult? Function(UpdateDiaryCellInFirebaseEvent value)?
        updateDiaryCellInFirebase,
    TResult? Function(ChangeDiaryCellsSettingsEvent value)?
        changeDiaryCellsSettings,
    TResult? Function(ChangeDiaryCellsBordersSettingsEvent value)?
        changeDiaryCellsBordersSettings,
    TResult? Function(ChangeCapitalCellSettingsEvent value)?
        changeCapitalCellSettings,
    TResult? Function(UpdateDiaryCellSettingsInFirebaseEvent value)?
        updateDiaryCellSettingsInFirebase,
    TResult? Function(UpdateCapitalCellSettingsInFirebaseEvent value)?
        updateCapitalCellSettingsInFirebase,
    TResult? Function(UpdateCapitalCellWidthEvent value)?
        updateCapitalCellWidth,
    TResult? Function(UpdateCapitalCellWidthInFirebaseEvent value)?
        updateCapitalCellWidthInFirebase,
    TResult? Function(StartEditingCellsEvent value)? startEditingCells,
    TResult? Function(CreateDiaryColumnEvent value)? createDiaryColumn,
    TResult? Function(DeleteDiaryColumnEvent value)? deleteDiaryColumn,
    TResult? Function(UpdateDiaryListSettingsEvent value)?
        updateDiaryListSettings,
    TResult? Function(ShareThemeEvent value)? shareTheme,
    TResult? Function(StartEditingColorEvent value)? startEditingColor,
    TResult? Function(StartEditingBordersEvent value)? startEditingBorders,
    TResult? Function(StartEditingBordersStyleEvent value)?
        startEditingBorderStyle,
    TResult? Function(TurnBackEditingEvent value)? turnBackEditing,
    TResult? Function(StartColumnDeletingEvent value)? startColumnDeleting,
    TResult? Function(StartColorThemeEditingEvent value)?
        startColorThemeEditing,
    TResult? Function(DeleteColumnsEvent value)? deleteColumns,
    TResult? Function(LoadThemesEvent value)? loadThemes,
    TResult? Function(LoadFromThemeEvent value)? loadFromTheme,
    TResult? Function(TakeThemeEvent value)? takeTheme,
  }) {
    return startColumnDeleting?.call(this);
  }

  @override
  @optionalTypeArgs
  TResult maybeMap<TResult extends Object?>({
    TResult Function(CreateSampleEvent value)? createSample,
    TResult Function(InitialLoadEvent value)? initialLoad,
    TResult Function(GetDiaryListEvent value)? getDiaryList,
    TResult Function(GetDiaryColumnsEvent value)? getDiaryColumns,
    TResult Function(GetDiaryCellsEvent value)? getDiaryCells,
    TResult Function(SelectDiaryCellEvent value)? selectDiaryCell,
    TResult Function(SelectDiaryCellsEvent value)? selectDiaryCells,
    TResult Function(SelectCapitalCellEvent value)? selectCapitalCell,
    TResult Function(OnPanUpdateEvent value)? onPanUpdate,
    TResult Function(StartEditingListEvent value)? startEditingList,
    TResult Function(ReturnToLoadedEvent value)? returnToLoaded,
    TResult Function(ReturnToCellsSelectedEvent value)? returnToCellsSelected,
    TResult Function(UpdateDiaryListNameEvent value)? updateDiaryListName,
    TResult Function(ChangeDiaryCellEvent value)? changeDiaryCell,
    TResult Function(ChangeCapitalCellEvent value)? changeCapitalCell,
    TResult Function(UpdateDiaryCellInFirebaseEvent value)?
        updateDiaryCellInFirebase,
    TResult Function(ChangeDiaryCellsSettingsEvent value)?
        changeDiaryCellsSettings,
    TResult Function(ChangeDiaryCellsBordersSettingsEvent value)?
        changeDiaryCellsBordersSettings,
    TResult Function(ChangeCapitalCellSettingsEvent value)?
        changeCapitalCellSettings,
    TResult Function(UpdateDiaryCellSettingsInFirebaseEvent value)?
        updateDiaryCellSettingsInFirebase,
    TResult Function(UpdateCapitalCellSettingsInFirebaseEvent value)?
        updateCapitalCellSettingsInFirebase,
    TResult Function(UpdateCapitalCellWidthEvent value)? updateCapitalCellWidth,
    TResult Function(UpdateCapitalCellWidthInFirebaseEvent value)?
        updateCapitalCellWidthInFirebase,
    TResult Function(StartEditingCellsEvent value)? startEditingCells,
    TResult Function(CreateDiaryColumnEvent value)? createDiaryColumn,
    TResult Function(DeleteDiaryColumnEvent value)? deleteDiaryColumn,
    TResult Function(UpdateDiaryListSettingsEvent value)?
        updateDiaryListSettings,
    TResult Function(ShareThemeEvent value)? shareTheme,
    TResult Function(StartEditingColorEvent value)? startEditingColor,
    TResult Function(StartEditingBordersEvent value)? startEditingBorders,
    TResult Function(StartEditingBordersStyleEvent value)?
        startEditingBorderStyle,
    TResult Function(TurnBackEditingEvent value)? turnBackEditing,
    TResult Function(StartColumnDeletingEvent value)? startColumnDeleting,
    TResult Function(StartColorThemeEditingEvent value)? startColorThemeEditing,
    TResult Function(DeleteColumnsEvent value)? deleteColumns,
    TResult Function(LoadThemesEvent value)? loadThemes,
    TResult Function(LoadFromThemeEvent value)? loadFromTheme,
    TResult Function(TakeThemeEvent value)? takeTheme,
    required TResult orElse(),
  }) {
    if (startColumnDeleting != null) {
      return startColumnDeleting(this);
    }
    return orElse();
  }
}

abstract class StartColumnDeletingEvent implements DiaryListEvent {
  const factory StartColumnDeletingEvent() = _$StartColumnDeletingEvent;
}

/// @nodoc
abstract class _$$StartColorThemeEditingEventCopyWith<$Res> {
  factory _$$StartColorThemeEditingEventCopyWith(
          _$StartColorThemeEditingEvent value,
          $Res Function(_$StartColorThemeEditingEvent) then) =
      __$$StartColorThemeEditingEventCopyWithImpl<$Res>;
}

/// @nodoc
class __$$StartColorThemeEditingEventCopyWithImpl<$Res>
    extends _$DiaryListEventCopyWithImpl<$Res, _$StartColorThemeEditingEvent>
    implements _$$StartColorThemeEditingEventCopyWith<$Res> {
  __$$StartColorThemeEditingEventCopyWithImpl(
      _$StartColorThemeEditingEvent _value,
      $Res Function(_$StartColorThemeEditingEvent) _then)
      : super(_value, _then);
}

/// @nodoc

class _$StartColorThemeEditingEvent implements StartColorThemeEditingEvent {
  const _$StartColorThemeEditingEvent();

  @override
  String toString() {
    return 'DiaryListEvent.startColorThemeEditing()';
  }

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$StartColorThemeEditingEvent);
  }

  @override
  int get hashCode => runtimeType.hashCode;

  @override
  @optionalTypeArgs
  TResult when<TResult extends Object?>({
    required TResult Function() createSample,
    required TResult Function() initialLoad,
    required TResult Function(DateTime date, int delay) getDiaryList,
    required TResult Function(DiaryList diaryList, List<DiaryList> lists)
        getDiaryColumns,
    required TResult Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells,
            List<DiaryList> lists)
        getDiaryCells,
    required TResult Function(DiaryCell diaryCell) selectDiaryCell,
    required TResult Function(List<DiaryCell> diaryCells) selectDiaryCells,
    required TResult Function(CapitalCell capitalCell) selectCapitalCell,
    required TResult Function(
            DiaryCell diaryCell,
            GlobalObjectKey<State<StatefulWidget>> cellKey,
            DragUpdateDetails details,
            double scaleFactor)
        onPanUpdate,
    required TResult Function(DiaryList? selectedList) startEditingList,
    required TResult Function(
            String? newName, String? addedColumnName, int? addedColumnCount)
        returnToLoaded,
    required TResult Function() returnToCellsSelected,
    required TResult Function(DiaryList diaryList, String newName)
        updateDiaryListName,
    required TResult Function(DiaryCell diaryCell, String? textFieldText)
        changeDiaryCell,
    required TResult Function(CapitalCell capitalCell, String? textFieldText)
        changeCapitalCell,
    required TResult Function(DiaryCell diaryCell, String? textFieldText)
        updateDiaryCellInFirebase,
    required TResult Function(
            FontWeightEnum? fontWeight,
            TextDecorationEnum? textDecoration,
            FontStyleEnum? fontStyle,
            double? fontSize,
            String? color,
            HorizontalAlignmentsEnum? horizontalAlignment,
            VerticalAlignmentsEnum? verticalAlignment,
            String? backgroundColor)
        changeDiaryCellsSettings,
    required TResult Function(BordersEditingEnum bordersEditingEnum,
            BordersStyleEnum bordersStyleEnum, Color bordersColor)
        changeDiaryCellsBordersSettings,
    required TResult Function(
            FontWeightEnum? fontWeight,
            TextDecorationEnum? textDecoration,
            FontStyleEnum? fontStyle,
            double? fontSize,
            String? color,
            HorizontalAlignmentsEnum? horizontalAlignment,
            VerticalAlignmentsEnum? verticalAlignment,
            String? backgroundColor,
            BordersStyleEnum? bordersStyleEnum,
            Color? bordersColor)
        changeCapitalCellSettings,
    required TResult Function(
            DiaryCell diaryCell,
            int index,
            DiaryCellTextSettings? newTextSettings,
            DiaryCellSettings? newSettings)
        updateDiaryCellSettingsInFirebase,
    required TResult Function(DiaryColumnSettings newSettings)
        updateCapitalCellSettingsInFirebase,
    required TResult Function(PointerMoveEvent details) updateCapitalCellWidth,
    required TResult Function(PointerUpEvent details)
        updateCapitalCellWidthInFirebase,
    required TResult Function(bool isTextEditing) startEditingCells,
    required TResult Function(DiaryList diaryList, String name,
            int columnsCount, List<DiaryColumn> diaryColumns)
        createDiaryColumn,
    required TResult Function(DiaryList diaryList, String columnId)
        deleteDiaryColumn,
    required TResult Function(DiaryList diaryList, String? themeColor,
            String? themeBorderColor, String? themePanelBackgroundColor)
        updateDiaryListSettings,
    required TResult Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<DiaryCell> diaryCells,
            List<CapitalCell> capitalCells,
            String themeName,
            String description)
        shareTheme,
    required TResult Function() startEditingColor,
    required TResult Function() startEditingBorders,
    required TResult Function() startEditingBorderStyle,
    required TResult Function() turnBackEditing,
    required TResult Function() startColumnDeleting,
    required TResult Function() startColorThemeEditing,
    required TResult Function() deleteColumns,
    required TResult Function() loadThemes,
    required TResult Function(ListTheme listTheme) loadFromTheme,
    required TResult Function(ListTheme listTheme) takeTheme,
  }) {
    return startColorThemeEditing();
  }

  @override
  @optionalTypeArgs
  TResult? whenOrNull<TResult extends Object?>({
    TResult? Function()? createSample,
    TResult? Function()? initialLoad,
    TResult? Function(DateTime date, int delay)? getDiaryList,
    TResult? Function(DiaryList diaryList, List<DiaryList> lists)?
        getDiaryColumns,
    TResult? Function(DiaryList diaryList, List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells, List<DiaryList> lists)?
        getDiaryCells,
    TResult? Function(DiaryCell diaryCell)? selectDiaryCell,
    TResult? Function(List<DiaryCell> diaryCells)? selectDiaryCells,
    TResult? Function(CapitalCell capitalCell)? selectCapitalCell,
    TResult? Function(
            DiaryCell diaryCell,
            GlobalObjectKey<State<StatefulWidget>> cellKey,
            DragUpdateDetails details,
            double scaleFactor)?
        onPanUpdate,
    TResult? Function(DiaryList? selectedList)? startEditingList,
    TResult? Function(
            String? newName, String? addedColumnName, int? addedColumnCount)?
        returnToLoaded,
    TResult? Function()? returnToCellsSelected,
    TResult? Function(DiaryList diaryList, String newName)? updateDiaryListName,
    TResult? Function(DiaryCell diaryCell, String? textFieldText)?
        changeDiaryCell,
    TResult? Function(CapitalCell capitalCell, String? textFieldText)?
        changeCapitalCell,
    TResult? Function(DiaryCell diaryCell, String? textFieldText)?
        updateDiaryCellInFirebase,
    TResult? Function(
            FontWeightEnum? fontWeight,
            TextDecorationEnum? textDecoration,
            FontStyleEnum? fontStyle,
            double? fontSize,
            String? color,
            HorizontalAlignmentsEnum? horizontalAlignment,
            VerticalAlignmentsEnum? verticalAlignment,
            String? backgroundColor)?
        changeDiaryCellsSettings,
    TResult? Function(BordersEditingEnum bordersEditingEnum,
            BordersStyleEnum bordersStyleEnum, Color bordersColor)?
        changeDiaryCellsBordersSettings,
    TResult? Function(
            FontWeightEnum? fontWeight,
            TextDecorationEnum? textDecoration,
            FontStyleEnum? fontStyle,
            double? fontSize,
            String? color,
            HorizontalAlignmentsEnum? horizontalAlignment,
            VerticalAlignmentsEnum? verticalAlignment,
            String? backgroundColor,
            BordersStyleEnum? bordersStyleEnum,
            Color? bordersColor)?
        changeCapitalCellSettings,
    TResult? Function(
            DiaryCell diaryCell,
            int index,
            DiaryCellTextSettings? newTextSettings,
            DiaryCellSettings? newSettings)?
        updateDiaryCellSettingsInFirebase,
    TResult? Function(DiaryColumnSettings newSettings)?
        updateCapitalCellSettingsInFirebase,
    TResult? Function(PointerMoveEvent details)? updateCapitalCellWidth,
    TResult? Function(PointerUpEvent details)? updateCapitalCellWidthInFirebase,
    TResult? Function(bool isTextEditing)? startEditingCells,
    TResult? Function(DiaryList diaryList, String name, int columnsCount,
            List<DiaryColumn> diaryColumns)?
        createDiaryColumn,
    TResult? Function(DiaryList diaryList, String columnId)? deleteDiaryColumn,
    TResult? Function(DiaryList diaryList, String? themeColor,
            String? themeBorderColor, String? themePanelBackgroundColor)?
        updateDiaryListSettings,
    TResult? Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<DiaryCell> diaryCells,
            List<CapitalCell> capitalCells,
            String themeName,
            String description)?
        shareTheme,
    TResult? Function()? startEditingColor,
    TResult? Function()? startEditingBorders,
    TResult? Function()? startEditingBorderStyle,
    TResult? Function()? turnBackEditing,
    TResult? Function()? startColumnDeleting,
    TResult? Function()? startColorThemeEditing,
    TResult? Function()? deleteColumns,
    TResult? Function()? loadThemes,
    TResult? Function(ListTheme listTheme)? loadFromTheme,
    TResult? Function(ListTheme listTheme)? takeTheme,
  }) {
    return startColorThemeEditing?.call();
  }

  @override
  @optionalTypeArgs
  TResult maybeWhen<TResult extends Object?>({
    TResult Function()? createSample,
    TResult Function()? initialLoad,
    TResult Function(DateTime date, int delay)? getDiaryList,
    TResult Function(DiaryList diaryList, List<DiaryList> lists)?
        getDiaryColumns,
    TResult Function(DiaryList diaryList, List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells, List<DiaryList> lists)?
        getDiaryCells,
    TResult Function(DiaryCell diaryCell)? selectDiaryCell,
    TResult Function(List<DiaryCell> diaryCells)? selectDiaryCells,
    TResult Function(CapitalCell capitalCell)? selectCapitalCell,
    TResult Function(
            DiaryCell diaryCell,
            GlobalObjectKey<State<StatefulWidget>> cellKey,
            DragUpdateDetails details,
            double scaleFactor)?
        onPanUpdate,
    TResult Function(DiaryList? selectedList)? startEditingList,
    TResult Function(
            String? newName, String? addedColumnName, int? addedColumnCount)?
        returnToLoaded,
    TResult Function()? returnToCellsSelected,
    TResult Function(DiaryList diaryList, String newName)? updateDiaryListName,
    TResult Function(DiaryCell diaryCell, String? textFieldText)?
        changeDiaryCell,
    TResult Function(CapitalCell capitalCell, String? textFieldText)?
        changeCapitalCell,
    TResult Function(DiaryCell diaryCell, String? textFieldText)?
        updateDiaryCellInFirebase,
    TResult Function(
            FontWeightEnum? fontWeight,
            TextDecorationEnum? textDecoration,
            FontStyleEnum? fontStyle,
            double? fontSize,
            String? color,
            HorizontalAlignmentsEnum? horizontalAlignment,
            VerticalAlignmentsEnum? verticalAlignment,
            String? backgroundColor)?
        changeDiaryCellsSettings,
    TResult Function(BordersEditingEnum bordersEditingEnum,
            BordersStyleEnum bordersStyleEnum, Color bordersColor)?
        changeDiaryCellsBordersSettings,
    TResult Function(
            FontWeightEnum? fontWeight,
            TextDecorationEnum? textDecoration,
            FontStyleEnum? fontStyle,
            double? fontSize,
            String? color,
            HorizontalAlignmentsEnum? horizontalAlignment,
            VerticalAlignmentsEnum? verticalAlignment,
            String? backgroundColor,
            BordersStyleEnum? bordersStyleEnum,
            Color? bordersColor)?
        changeCapitalCellSettings,
    TResult Function(
            DiaryCell diaryCell,
            int index,
            DiaryCellTextSettings? newTextSettings,
            DiaryCellSettings? newSettings)?
        updateDiaryCellSettingsInFirebase,
    TResult Function(DiaryColumnSettings newSettings)?
        updateCapitalCellSettingsInFirebase,
    TResult Function(PointerMoveEvent details)? updateCapitalCellWidth,
    TResult Function(PointerUpEvent details)? updateCapitalCellWidthInFirebase,
    TResult Function(bool isTextEditing)? startEditingCells,
    TResult Function(DiaryList diaryList, String name, int columnsCount,
            List<DiaryColumn> diaryColumns)?
        createDiaryColumn,
    TResult Function(DiaryList diaryList, String columnId)? deleteDiaryColumn,
    TResult Function(DiaryList diaryList, String? themeColor,
            String? themeBorderColor, String? themePanelBackgroundColor)?
        updateDiaryListSettings,
    TResult Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<DiaryCell> diaryCells,
            List<CapitalCell> capitalCells,
            String themeName,
            String description)?
        shareTheme,
    TResult Function()? startEditingColor,
    TResult Function()? startEditingBorders,
    TResult Function()? startEditingBorderStyle,
    TResult Function()? turnBackEditing,
    TResult Function()? startColumnDeleting,
    TResult Function()? startColorThemeEditing,
    TResult Function()? deleteColumns,
    TResult Function()? loadThemes,
    TResult Function(ListTheme listTheme)? loadFromTheme,
    TResult Function(ListTheme listTheme)? takeTheme,
    required TResult orElse(),
  }) {
    if (startColorThemeEditing != null) {
      return startColorThemeEditing();
    }
    return orElse();
  }

  @override
  @optionalTypeArgs
  TResult map<TResult extends Object?>({
    required TResult Function(CreateSampleEvent value) createSample,
    required TResult Function(InitialLoadEvent value) initialLoad,
    required TResult Function(GetDiaryListEvent value) getDiaryList,
    required TResult Function(GetDiaryColumnsEvent value) getDiaryColumns,
    required TResult Function(GetDiaryCellsEvent value) getDiaryCells,
    required TResult Function(SelectDiaryCellEvent value) selectDiaryCell,
    required TResult Function(SelectDiaryCellsEvent value) selectDiaryCells,
    required TResult Function(SelectCapitalCellEvent value) selectCapitalCell,
    required TResult Function(OnPanUpdateEvent value) onPanUpdate,
    required TResult Function(StartEditingListEvent value) startEditingList,
    required TResult Function(ReturnToLoadedEvent value) returnToLoaded,
    required TResult Function(ReturnToCellsSelectedEvent value)
        returnToCellsSelected,
    required TResult Function(UpdateDiaryListNameEvent value)
        updateDiaryListName,
    required TResult Function(ChangeDiaryCellEvent value) changeDiaryCell,
    required TResult Function(ChangeCapitalCellEvent value) changeCapitalCell,
    required TResult Function(UpdateDiaryCellInFirebaseEvent value)
        updateDiaryCellInFirebase,
    required TResult Function(ChangeDiaryCellsSettingsEvent value)
        changeDiaryCellsSettings,
    required TResult Function(ChangeDiaryCellsBordersSettingsEvent value)
        changeDiaryCellsBordersSettings,
    required TResult Function(ChangeCapitalCellSettingsEvent value)
        changeCapitalCellSettings,
    required TResult Function(UpdateDiaryCellSettingsInFirebaseEvent value)
        updateDiaryCellSettingsInFirebase,
    required TResult Function(UpdateCapitalCellSettingsInFirebaseEvent value)
        updateCapitalCellSettingsInFirebase,
    required TResult Function(UpdateCapitalCellWidthEvent value)
        updateCapitalCellWidth,
    required TResult Function(UpdateCapitalCellWidthInFirebaseEvent value)
        updateCapitalCellWidthInFirebase,
    required TResult Function(StartEditingCellsEvent value) startEditingCells,
    required TResult Function(CreateDiaryColumnEvent value) createDiaryColumn,
    required TResult Function(DeleteDiaryColumnEvent value) deleteDiaryColumn,
    required TResult Function(UpdateDiaryListSettingsEvent value)
        updateDiaryListSettings,
    required TResult Function(ShareThemeEvent value) shareTheme,
    required TResult Function(StartEditingColorEvent value) startEditingColor,
    required TResult Function(StartEditingBordersEvent value)
        startEditingBorders,
    required TResult Function(StartEditingBordersStyleEvent value)
        startEditingBorderStyle,
    required TResult Function(TurnBackEditingEvent value) turnBackEditing,
    required TResult Function(StartColumnDeletingEvent value)
        startColumnDeleting,
    required TResult Function(StartColorThemeEditingEvent value)
        startColorThemeEditing,
    required TResult Function(DeleteColumnsEvent value) deleteColumns,
    required TResult Function(LoadThemesEvent value) loadThemes,
    required TResult Function(LoadFromThemeEvent value) loadFromTheme,
    required TResult Function(TakeThemeEvent value) takeTheme,
  }) {
    return startColorThemeEditing(this);
  }

  @override
  @optionalTypeArgs
  TResult? mapOrNull<TResult extends Object?>({
    TResult? Function(CreateSampleEvent value)? createSample,
    TResult? Function(InitialLoadEvent value)? initialLoad,
    TResult? Function(GetDiaryListEvent value)? getDiaryList,
    TResult? Function(GetDiaryColumnsEvent value)? getDiaryColumns,
    TResult? Function(GetDiaryCellsEvent value)? getDiaryCells,
    TResult? Function(SelectDiaryCellEvent value)? selectDiaryCell,
    TResult? Function(SelectDiaryCellsEvent value)? selectDiaryCells,
    TResult? Function(SelectCapitalCellEvent value)? selectCapitalCell,
    TResult? Function(OnPanUpdateEvent value)? onPanUpdate,
    TResult? Function(StartEditingListEvent value)? startEditingList,
    TResult? Function(ReturnToLoadedEvent value)? returnToLoaded,
    TResult? Function(ReturnToCellsSelectedEvent value)? returnToCellsSelected,
    TResult? Function(UpdateDiaryListNameEvent value)? updateDiaryListName,
    TResult? Function(ChangeDiaryCellEvent value)? changeDiaryCell,
    TResult? Function(ChangeCapitalCellEvent value)? changeCapitalCell,
    TResult? Function(UpdateDiaryCellInFirebaseEvent value)?
        updateDiaryCellInFirebase,
    TResult? Function(ChangeDiaryCellsSettingsEvent value)?
        changeDiaryCellsSettings,
    TResult? Function(ChangeDiaryCellsBordersSettingsEvent value)?
        changeDiaryCellsBordersSettings,
    TResult? Function(ChangeCapitalCellSettingsEvent value)?
        changeCapitalCellSettings,
    TResult? Function(UpdateDiaryCellSettingsInFirebaseEvent value)?
        updateDiaryCellSettingsInFirebase,
    TResult? Function(UpdateCapitalCellSettingsInFirebaseEvent value)?
        updateCapitalCellSettingsInFirebase,
    TResult? Function(UpdateCapitalCellWidthEvent value)?
        updateCapitalCellWidth,
    TResult? Function(UpdateCapitalCellWidthInFirebaseEvent value)?
        updateCapitalCellWidthInFirebase,
    TResult? Function(StartEditingCellsEvent value)? startEditingCells,
    TResult? Function(CreateDiaryColumnEvent value)? createDiaryColumn,
    TResult? Function(DeleteDiaryColumnEvent value)? deleteDiaryColumn,
    TResult? Function(UpdateDiaryListSettingsEvent value)?
        updateDiaryListSettings,
    TResult? Function(ShareThemeEvent value)? shareTheme,
    TResult? Function(StartEditingColorEvent value)? startEditingColor,
    TResult? Function(StartEditingBordersEvent value)? startEditingBorders,
    TResult? Function(StartEditingBordersStyleEvent value)?
        startEditingBorderStyle,
    TResult? Function(TurnBackEditingEvent value)? turnBackEditing,
    TResult? Function(StartColumnDeletingEvent value)? startColumnDeleting,
    TResult? Function(StartColorThemeEditingEvent value)?
        startColorThemeEditing,
    TResult? Function(DeleteColumnsEvent value)? deleteColumns,
    TResult? Function(LoadThemesEvent value)? loadThemes,
    TResult? Function(LoadFromThemeEvent value)? loadFromTheme,
    TResult? Function(TakeThemeEvent value)? takeTheme,
  }) {
    return startColorThemeEditing?.call(this);
  }

  @override
  @optionalTypeArgs
  TResult maybeMap<TResult extends Object?>({
    TResult Function(CreateSampleEvent value)? createSample,
    TResult Function(InitialLoadEvent value)? initialLoad,
    TResult Function(GetDiaryListEvent value)? getDiaryList,
    TResult Function(GetDiaryColumnsEvent value)? getDiaryColumns,
    TResult Function(GetDiaryCellsEvent value)? getDiaryCells,
    TResult Function(SelectDiaryCellEvent value)? selectDiaryCell,
    TResult Function(SelectDiaryCellsEvent value)? selectDiaryCells,
    TResult Function(SelectCapitalCellEvent value)? selectCapitalCell,
    TResult Function(OnPanUpdateEvent value)? onPanUpdate,
    TResult Function(StartEditingListEvent value)? startEditingList,
    TResult Function(ReturnToLoadedEvent value)? returnToLoaded,
    TResult Function(ReturnToCellsSelectedEvent value)? returnToCellsSelected,
    TResult Function(UpdateDiaryListNameEvent value)? updateDiaryListName,
    TResult Function(ChangeDiaryCellEvent value)? changeDiaryCell,
    TResult Function(ChangeCapitalCellEvent value)? changeCapitalCell,
    TResult Function(UpdateDiaryCellInFirebaseEvent value)?
        updateDiaryCellInFirebase,
    TResult Function(ChangeDiaryCellsSettingsEvent value)?
        changeDiaryCellsSettings,
    TResult Function(ChangeDiaryCellsBordersSettingsEvent value)?
        changeDiaryCellsBordersSettings,
    TResult Function(ChangeCapitalCellSettingsEvent value)?
        changeCapitalCellSettings,
    TResult Function(UpdateDiaryCellSettingsInFirebaseEvent value)?
        updateDiaryCellSettingsInFirebase,
    TResult Function(UpdateCapitalCellSettingsInFirebaseEvent value)?
        updateCapitalCellSettingsInFirebase,
    TResult Function(UpdateCapitalCellWidthEvent value)? updateCapitalCellWidth,
    TResult Function(UpdateCapitalCellWidthInFirebaseEvent value)?
        updateCapitalCellWidthInFirebase,
    TResult Function(StartEditingCellsEvent value)? startEditingCells,
    TResult Function(CreateDiaryColumnEvent value)? createDiaryColumn,
    TResult Function(DeleteDiaryColumnEvent value)? deleteDiaryColumn,
    TResult Function(UpdateDiaryListSettingsEvent value)?
        updateDiaryListSettings,
    TResult Function(ShareThemeEvent value)? shareTheme,
    TResult Function(StartEditingColorEvent value)? startEditingColor,
    TResult Function(StartEditingBordersEvent value)? startEditingBorders,
    TResult Function(StartEditingBordersStyleEvent value)?
        startEditingBorderStyle,
    TResult Function(TurnBackEditingEvent value)? turnBackEditing,
    TResult Function(StartColumnDeletingEvent value)? startColumnDeleting,
    TResult Function(StartColorThemeEditingEvent value)? startColorThemeEditing,
    TResult Function(DeleteColumnsEvent value)? deleteColumns,
    TResult Function(LoadThemesEvent value)? loadThemes,
    TResult Function(LoadFromThemeEvent value)? loadFromTheme,
    TResult Function(TakeThemeEvent value)? takeTheme,
    required TResult orElse(),
  }) {
    if (startColorThemeEditing != null) {
      return startColorThemeEditing(this);
    }
    return orElse();
  }
}

abstract class StartColorThemeEditingEvent implements DiaryListEvent {
  const factory StartColorThemeEditingEvent() = _$StartColorThemeEditingEvent;
}

/// @nodoc
abstract class _$$DeleteColumnsEventCopyWith<$Res> {
  factory _$$DeleteColumnsEventCopyWith(_$DeleteColumnsEvent value,
          $Res Function(_$DeleteColumnsEvent) then) =
      __$$DeleteColumnsEventCopyWithImpl<$Res>;
}

/// @nodoc
class __$$DeleteColumnsEventCopyWithImpl<$Res>
    extends _$DiaryListEventCopyWithImpl<$Res, _$DeleteColumnsEvent>
    implements _$$DeleteColumnsEventCopyWith<$Res> {
  __$$DeleteColumnsEventCopyWithImpl(
      _$DeleteColumnsEvent _value, $Res Function(_$DeleteColumnsEvent) _then)
      : super(_value, _then);
}

/// @nodoc

class _$DeleteColumnsEvent implements DeleteColumnsEvent {
  const _$DeleteColumnsEvent();

  @override
  String toString() {
    return 'DiaryListEvent.deleteColumns()';
  }

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType && other is _$DeleteColumnsEvent);
  }

  @override
  int get hashCode => runtimeType.hashCode;

  @override
  @optionalTypeArgs
  TResult when<TResult extends Object?>({
    required TResult Function() createSample,
    required TResult Function() initialLoad,
    required TResult Function(DateTime date, int delay) getDiaryList,
    required TResult Function(DiaryList diaryList, List<DiaryList> lists)
        getDiaryColumns,
    required TResult Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells,
            List<DiaryList> lists)
        getDiaryCells,
    required TResult Function(DiaryCell diaryCell) selectDiaryCell,
    required TResult Function(List<DiaryCell> diaryCells) selectDiaryCells,
    required TResult Function(CapitalCell capitalCell) selectCapitalCell,
    required TResult Function(
            DiaryCell diaryCell,
            GlobalObjectKey<State<StatefulWidget>> cellKey,
            DragUpdateDetails details,
            double scaleFactor)
        onPanUpdate,
    required TResult Function(DiaryList? selectedList) startEditingList,
    required TResult Function(
            String? newName, String? addedColumnName, int? addedColumnCount)
        returnToLoaded,
    required TResult Function() returnToCellsSelected,
    required TResult Function(DiaryList diaryList, String newName)
        updateDiaryListName,
    required TResult Function(DiaryCell diaryCell, String? textFieldText)
        changeDiaryCell,
    required TResult Function(CapitalCell capitalCell, String? textFieldText)
        changeCapitalCell,
    required TResult Function(DiaryCell diaryCell, String? textFieldText)
        updateDiaryCellInFirebase,
    required TResult Function(
            FontWeightEnum? fontWeight,
            TextDecorationEnum? textDecoration,
            FontStyleEnum? fontStyle,
            double? fontSize,
            String? color,
            HorizontalAlignmentsEnum? horizontalAlignment,
            VerticalAlignmentsEnum? verticalAlignment,
            String? backgroundColor)
        changeDiaryCellsSettings,
    required TResult Function(BordersEditingEnum bordersEditingEnum,
            BordersStyleEnum bordersStyleEnum, Color bordersColor)
        changeDiaryCellsBordersSettings,
    required TResult Function(
            FontWeightEnum? fontWeight,
            TextDecorationEnum? textDecoration,
            FontStyleEnum? fontStyle,
            double? fontSize,
            String? color,
            HorizontalAlignmentsEnum? horizontalAlignment,
            VerticalAlignmentsEnum? verticalAlignment,
            String? backgroundColor,
            BordersStyleEnum? bordersStyleEnum,
            Color? bordersColor)
        changeCapitalCellSettings,
    required TResult Function(
            DiaryCell diaryCell,
            int index,
            DiaryCellTextSettings? newTextSettings,
            DiaryCellSettings? newSettings)
        updateDiaryCellSettingsInFirebase,
    required TResult Function(DiaryColumnSettings newSettings)
        updateCapitalCellSettingsInFirebase,
    required TResult Function(PointerMoveEvent details) updateCapitalCellWidth,
    required TResult Function(PointerUpEvent details)
        updateCapitalCellWidthInFirebase,
    required TResult Function(bool isTextEditing) startEditingCells,
    required TResult Function(DiaryList diaryList, String name,
            int columnsCount, List<DiaryColumn> diaryColumns)
        createDiaryColumn,
    required TResult Function(DiaryList diaryList, String columnId)
        deleteDiaryColumn,
    required TResult Function(DiaryList diaryList, String? themeColor,
            String? themeBorderColor, String? themePanelBackgroundColor)
        updateDiaryListSettings,
    required TResult Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<DiaryCell> diaryCells,
            List<CapitalCell> capitalCells,
            String themeName,
            String description)
        shareTheme,
    required TResult Function() startEditingColor,
    required TResult Function() startEditingBorders,
    required TResult Function() startEditingBorderStyle,
    required TResult Function() turnBackEditing,
    required TResult Function() startColumnDeleting,
    required TResult Function() startColorThemeEditing,
    required TResult Function() deleteColumns,
    required TResult Function() loadThemes,
    required TResult Function(ListTheme listTheme) loadFromTheme,
    required TResult Function(ListTheme listTheme) takeTheme,
  }) {
    return deleteColumns();
  }

  @override
  @optionalTypeArgs
  TResult? whenOrNull<TResult extends Object?>({
    TResult? Function()? createSample,
    TResult? Function()? initialLoad,
    TResult? Function(DateTime date, int delay)? getDiaryList,
    TResult? Function(DiaryList diaryList, List<DiaryList> lists)?
        getDiaryColumns,
    TResult? Function(DiaryList diaryList, List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells, List<DiaryList> lists)?
        getDiaryCells,
    TResult? Function(DiaryCell diaryCell)? selectDiaryCell,
    TResult? Function(List<DiaryCell> diaryCells)? selectDiaryCells,
    TResult? Function(CapitalCell capitalCell)? selectCapitalCell,
    TResult? Function(
            DiaryCell diaryCell,
            GlobalObjectKey<State<StatefulWidget>> cellKey,
            DragUpdateDetails details,
            double scaleFactor)?
        onPanUpdate,
    TResult? Function(DiaryList? selectedList)? startEditingList,
    TResult? Function(
            String? newName, String? addedColumnName, int? addedColumnCount)?
        returnToLoaded,
    TResult? Function()? returnToCellsSelected,
    TResult? Function(DiaryList diaryList, String newName)? updateDiaryListName,
    TResult? Function(DiaryCell diaryCell, String? textFieldText)?
        changeDiaryCell,
    TResult? Function(CapitalCell capitalCell, String? textFieldText)?
        changeCapitalCell,
    TResult? Function(DiaryCell diaryCell, String? textFieldText)?
        updateDiaryCellInFirebase,
    TResult? Function(
            FontWeightEnum? fontWeight,
            TextDecorationEnum? textDecoration,
            FontStyleEnum? fontStyle,
            double? fontSize,
            String? color,
            HorizontalAlignmentsEnum? horizontalAlignment,
            VerticalAlignmentsEnum? verticalAlignment,
            String? backgroundColor)?
        changeDiaryCellsSettings,
    TResult? Function(BordersEditingEnum bordersEditingEnum,
            BordersStyleEnum bordersStyleEnum, Color bordersColor)?
        changeDiaryCellsBordersSettings,
    TResult? Function(
            FontWeightEnum? fontWeight,
            TextDecorationEnum? textDecoration,
            FontStyleEnum? fontStyle,
            double? fontSize,
            String? color,
            HorizontalAlignmentsEnum? horizontalAlignment,
            VerticalAlignmentsEnum? verticalAlignment,
            String? backgroundColor,
            BordersStyleEnum? bordersStyleEnum,
            Color? bordersColor)?
        changeCapitalCellSettings,
    TResult? Function(
            DiaryCell diaryCell,
            int index,
            DiaryCellTextSettings? newTextSettings,
            DiaryCellSettings? newSettings)?
        updateDiaryCellSettingsInFirebase,
    TResult? Function(DiaryColumnSettings newSettings)?
        updateCapitalCellSettingsInFirebase,
    TResult? Function(PointerMoveEvent details)? updateCapitalCellWidth,
    TResult? Function(PointerUpEvent details)? updateCapitalCellWidthInFirebase,
    TResult? Function(bool isTextEditing)? startEditingCells,
    TResult? Function(DiaryList diaryList, String name, int columnsCount,
            List<DiaryColumn> diaryColumns)?
        createDiaryColumn,
    TResult? Function(DiaryList diaryList, String columnId)? deleteDiaryColumn,
    TResult? Function(DiaryList diaryList, String? themeColor,
            String? themeBorderColor, String? themePanelBackgroundColor)?
        updateDiaryListSettings,
    TResult? Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<DiaryCell> diaryCells,
            List<CapitalCell> capitalCells,
            String themeName,
            String description)?
        shareTheme,
    TResult? Function()? startEditingColor,
    TResult? Function()? startEditingBorders,
    TResult? Function()? startEditingBorderStyle,
    TResult? Function()? turnBackEditing,
    TResult? Function()? startColumnDeleting,
    TResult? Function()? startColorThemeEditing,
    TResult? Function()? deleteColumns,
    TResult? Function()? loadThemes,
    TResult? Function(ListTheme listTheme)? loadFromTheme,
    TResult? Function(ListTheme listTheme)? takeTheme,
  }) {
    return deleteColumns?.call();
  }

  @override
  @optionalTypeArgs
  TResult maybeWhen<TResult extends Object?>({
    TResult Function()? createSample,
    TResult Function()? initialLoad,
    TResult Function(DateTime date, int delay)? getDiaryList,
    TResult Function(DiaryList diaryList, List<DiaryList> lists)?
        getDiaryColumns,
    TResult Function(DiaryList diaryList, List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells, List<DiaryList> lists)?
        getDiaryCells,
    TResult Function(DiaryCell diaryCell)? selectDiaryCell,
    TResult Function(List<DiaryCell> diaryCells)? selectDiaryCells,
    TResult Function(CapitalCell capitalCell)? selectCapitalCell,
    TResult Function(
            DiaryCell diaryCell,
            GlobalObjectKey<State<StatefulWidget>> cellKey,
            DragUpdateDetails details,
            double scaleFactor)?
        onPanUpdate,
    TResult Function(DiaryList? selectedList)? startEditingList,
    TResult Function(
            String? newName, String? addedColumnName, int? addedColumnCount)?
        returnToLoaded,
    TResult Function()? returnToCellsSelected,
    TResult Function(DiaryList diaryList, String newName)? updateDiaryListName,
    TResult Function(DiaryCell diaryCell, String? textFieldText)?
        changeDiaryCell,
    TResult Function(CapitalCell capitalCell, String? textFieldText)?
        changeCapitalCell,
    TResult Function(DiaryCell diaryCell, String? textFieldText)?
        updateDiaryCellInFirebase,
    TResult Function(
            FontWeightEnum? fontWeight,
            TextDecorationEnum? textDecoration,
            FontStyleEnum? fontStyle,
            double? fontSize,
            String? color,
            HorizontalAlignmentsEnum? horizontalAlignment,
            VerticalAlignmentsEnum? verticalAlignment,
            String? backgroundColor)?
        changeDiaryCellsSettings,
    TResult Function(BordersEditingEnum bordersEditingEnum,
            BordersStyleEnum bordersStyleEnum, Color bordersColor)?
        changeDiaryCellsBordersSettings,
    TResult Function(
            FontWeightEnum? fontWeight,
            TextDecorationEnum? textDecoration,
            FontStyleEnum? fontStyle,
            double? fontSize,
            String? color,
            HorizontalAlignmentsEnum? horizontalAlignment,
            VerticalAlignmentsEnum? verticalAlignment,
            String? backgroundColor,
            BordersStyleEnum? bordersStyleEnum,
            Color? bordersColor)?
        changeCapitalCellSettings,
    TResult Function(
            DiaryCell diaryCell,
            int index,
            DiaryCellTextSettings? newTextSettings,
            DiaryCellSettings? newSettings)?
        updateDiaryCellSettingsInFirebase,
    TResult Function(DiaryColumnSettings newSettings)?
        updateCapitalCellSettingsInFirebase,
    TResult Function(PointerMoveEvent details)? updateCapitalCellWidth,
    TResult Function(PointerUpEvent details)? updateCapitalCellWidthInFirebase,
    TResult Function(bool isTextEditing)? startEditingCells,
    TResult Function(DiaryList diaryList, String name, int columnsCount,
            List<DiaryColumn> diaryColumns)?
        createDiaryColumn,
    TResult Function(DiaryList diaryList, String columnId)? deleteDiaryColumn,
    TResult Function(DiaryList diaryList, String? themeColor,
            String? themeBorderColor, String? themePanelBackgroundColor)?
        updateDiaryListSettings,
    TResult Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<DiaryCell> diaryCells,
            List<CapitalCell> capitalCells,
            String themeName,
            String description)?
        shareTheme,
    TResult Function()? startEditingColor,
    TResult Function()? startEditingBorders,
    TResult Function()? startEditingBorderStyle,
    TResult Function()? turnBackEditing,
    TResult Function()? startColumnDeleting,
    TResult Function()? startColorThemeEditing,
    TResult Function()? deleteColumns,
    TResult Function()? loadThemes,
    TResult Function(ListTheme listTheme)? loadFromTheme,
    TResult Function(ListTheme listTheme)? takeTheme,
    required TResult orElse(),
  }) {
    if (deleteColumns != null) {
      return deleteColumns();
    }
    return orElse();
  }

  @override
  @optionalTypeArgs
  TResult map<TResult extends Object?>({
    required TResult Function(CreateSampleEvent value) createSample,
    required TResult Function(InitialLoadEvent value) initialLoad,
    required TResult Function(GetDiaryListEvent value) getDiaryList,
    required TResult Function(GetDiaryColumnsEvent value) getDiaryColumns,
    required TResult Function(GetDiaryCellsEvent value) getDiaryCells,
    required TResult Function(SelectDiaryCellEvent value) selectDiaryCell,
    required TResult Function(SelectDiaryCellsEvent value) selectDiaryCells,
    required TResult Function(SelectCapitalCellEvent value) selectCapitalCell,
    required TResult Function(OnPanUpdateEvent value) onPanUpdate,
    required TResult Function(StartEditingListEvent value) startEditingList,
    required TResult Function(ReturnToLoadedEvent value) returnToLoaded,
    required TResult Function(ReturnToCellsSelectedEvent value)
        returnToCellsSelected,
    required TResult Function(UpdateDiaryListNameEvent value)
        updateDiaryListName,
    required TResult Function(ChangeDiaryCellEvent value) changeDiaryCell,
    required TResult Function(ChangeCapitalCellEvent value) changeCapitalCell,
    required TResult Function(UpdateDiaryCellInFirebaseEvent value)
        updateDiaryCellInFirebase,
    required TResult Function(ChangeDiaryCellsSettingsEvent value)
        changeDiaryCellsSettings,
    required TResult Function(ChangeDiaryCellsBordersSettingsEvent value)
        changeDiaryCellsBordersSettings,
    required TResult Function(ChangeCapitalCellSettingsEvent value)
        changeCapitalCellSettings,
    required TResult Function(UpdateDiaryCellSettingsInFirebaseEvent value)
        updateDiaryCellSettingsInFirebase,
    required TResult Function(UpdateCapitalCellSettingsInFirebaseEvent value)
        updateCapitalCellSettingsInFirebase,
    required TResult Function(UpdateCapitalCellWidthEvent value)
        updateCapitalCellWidth,
    required TResult Function(UpdateCapitalCellWidthInFirebaseEvent value)
        updateCapitalCellWidthInFirebase,
    required TResult Function(StartEditingCellsEvent value) startEditingCells,
    required TResult Function(CreateDiaryColumnEvent value) createDiaryColumn,
    required TResult Function(DeleteDiaryColumnEvent value) deleteDiaryColumn,
    required TResult Function(UpdateDiaryListSettingsEvent value)
        updateDiaryListSettings,
    required TResult Function(ShareThemeEvent value) shareTheme,
    required TResult Function(StartEditingColorEvent value) startEditingColor,
    required TResult Function(StartEditingBordersEvent value)
        startEditingBorders,
    required TResult Function(StartEditingBordersStyleEvent value)
        startEditingBorderStyle,
    required TResult Function(TurnBackEditingEvent value) turnBackEditing,
    required TResult Function(StartColumnDeletingEvent value)
        startColumnDeleting,
    required TResult Function(StartColorThemeEditingEvent value)
        startColorThemeEditing,
    required TResult Function(DeleteColumnsEvent value) deleteColumns,
    required TResult Function(LoadThemesEvent value) loadThemes,
    required TResult Function(LoadFromThemeEvent value) loadFromTheme,
    required TResult Function(TakeThemeEvent value) takeTheme,
  }) {
    return deleteColumns(this);
  }

  @override
  @optionalTypeArgs
  TResult? mapOrNull<TResult extends Object?>({
    TResult? Function(CreateSampleEvent value)? createSample,
    TResult? Function(InitialLoadEvent value)? initialLoad,
    TResult? Function(GetDiaryListEvent value)? getDiaryList,
    TResult? Function(GetDiaryColumnsEvent value)? getDiaryColumns,
    TResult? Function(GetDiaryCellsEvent value)? getDiaryCells,
    TResult? Function(SelectDiaryCellEvent value)? selectDiaryCell,
    TResult? Function(SelectDiaryCellsEvent value)? selectDiaryCells,
    TResult? Function(SelectCapitalCellEvent value)? selectCapitalCell,
    TResult? Function(OnPanUpdateEvent value)? onPanUpdate,
    TResult? Function(StartEditingListEvent value)? startEditingList,
    TResult? Function(ReturnToLoadedEvent value)? returnToLoaded,
    TResult? Function(ReturnToCellsSelectedEvent value)? returnToCellsSelected,
    TResult? Function(UpdateDiaryListNameEvent value)? updateDiaryListName,
    TResult? Function(ChangeDiaryCellEvent value)? changeDiaryCell,
    TResult? Function(ChangeCapitalCellEvent value)? changeCapitalCell,
    TResult? Function(UpdateDiaryCellInFirebaseEvent value)?
        updateDiaryCellInFirebase,
    TResult? Function(ChangeDiaryCellsSettingsEvent value)?
        changeDiaryCellsSettings,
    TResult? Function(ChangeDiaryCellsBordersSettingsEvent value)?
        changeDiaryCellsBordersSettings,
    TResult? Function(ChangeCapitalCellSettingsEvent value)?
        changeCapitalCellSettings,
    TResult? Function(UpdateDiaryCellSettingsInFirebaseEvent value)?
        updateDiaryCellSettingsInFirebase,
    TResult? Function(UpdateCapitalCellSettingsInFirebaseEvent value)?
        updateCapitalCellSettingsInFirebase,
    TResult? Function(UpdateCapitalCellWidthEvent value)?
        updateCapitalCellWidth,
    TResult? Function(UpdateCapitalCellWidthInFirebaseEvent value)?
        updateCapitalCellWidthInFirebase,
    TResult? Function(StartEditingCellsEvent value)? startEditingCells,
    TResult? Function(CreateDiaryColumnEvent value)? createDiaryColumn,
    TResult? Function(DeleteDiaryColumnEvent value)? deleteDiaryColumn,
    TResult? Function(UpdateDiaryListSettingsEvent value)?
        updateDiaryListSettings,
    TResult? Function(ShareThemeEvent value)? shareTheme,
    TResult? Function(StartEditingColorEvent value)? startEditingColor,
    TResult? Function(StartEditingBordersEvent value)? startEditingBorders,
    TResult? Function(StartEditingBordersStyleEvent value)?
        startEditingBorderStyle,
    TResult? Function(TurnBackEditingEvent value)? turnBackEditing,
    TResult? Function(StartColumnDeletingEvent value)? startColumnDeleting,
    TResult? Function(StartColorThemeEditingEvent value)?
        startColorThemeEditing,
    TResult? Function(DeleteColumnsEvent value)? deleteColumns,
    TResult? Function(LoadThemesEvent value)? loadThemes,
    TResult? Function(LoadFromThemeEvent value)? loadFromTheme,
    TResult? Function(TakeThemeEvent value)? takeTheme,
  }) {
    return deleteColumns?.call(this);
  }

  @override
  @optionalTypeArgs
  TResult maybeMap<TResult extends Object?>({
    TResult Function(CreateSampleEvent value)? createSample,
    TResult Function(InitialLoadEvent value)? initialLoad,
    TResult Function(GetDiaryListEvent value)? getDiaryList,
    TResult Function(GetDiaryColumnsEvent value)? getDiaryColumns,
    TResult Function(GetDiaryCellsEvent value)? getDiaryCells,
    TResult Function(SelectDiaryCellEvent value)? selectDiaryCell,
    TResult Function(SelectDiaryCellsEvent value)? selectDiaryCells,
    TResult Function(SelectCapitalCellEvent value)? selectCapitalCell,
    TResult Function(OnPanUpdateEvent value)? onPanUpdate,
    TResult Function(StartEditingListEvent value)? startEditingList,
    TResult Function(ReturnToLoadedEvent value)? returnToLoaded,
    TResult Function(ReturnToCellsSelectedEvent value)? returnToCellsSelected,
    TResult Function(UpdateDiaryListNameEvent value)? updateDiaryListName,
    TResult Function(ChangeDiaryCellEvent value)? changeDiaryCell,
    TResult Function(ChangeCapitalCellEvent value)? changeCapitalCell,
    TResult Function(UpdateDiaryCellInFirebaseEvent value)?
        updateDiaryCellInFirebase,
    TResult Function(ChangeDiaryCellsSettingsEvent value)?
        changeDiaryCellsSettings,
    TResult Function(ChangeDiaryCellsBordersSettingsEvent value)?
        changeDiaryCellsBordersSettings,
    TResult Function(ChangeCapitalCellSettingsEvent value)?
        changeCapitalCellSettings,
    TResult Function(UpdateDiaryCellSettingsInFirebaseEvent value)?
        updateDiaryCellSettingsInFirebase,
    TResult Function(UpdateCapitalCellSettingsInFirebaseEvent value)?
        updateCapitalCellSettingsInFirebase,
    TResult Function(UpdateCapitalCellWidthEvent value)? updateCapitalCellWidth,
    TResult Function(UpdateCapitalCellWidthInFirebaseEvent value)?
        updateCapitalCellWidthInFirebase,
    TResult Function(StartEditingCellsEvent value)? startEditingCells,
    TResult Function(CreateDiaryColumnEvent value)? createDiaryColumn,
    TResult Function(DeleteDiaryColumnEvent value)? deleteDiaryColumn,
    TResult Function(UpdateDiaryListSettingsEvent value)?
        updateDiaryListSettings,
    TResult Function(ShareThemeEvent value)? shareTheme,
    TResult Function(StartEditingColorEvent value)? startEditingColor,
    TResult Function(StartEditingBordersEvent value)? startEditingBorders,
    TResult Function(StartEditingBordersStyleEvent value)?
        startEditingBorderStyle,
    TResult Function(TurnBackEditingEvent value)? turnBackEditing,
    TResult Function(StartColumnDeletingEvent value)? startColumnDeleting,
    TResult Function(StartColorThemeEditingEvent value)? startColorThemeEditing,
    TResult Function(DeleteColumnsEvent value)? deleteColumns,
    TResult Function(LoadThemesEvent value)? loadThemes,
    TResult Function(LoadFromThemeEvent value)? loadFromTheme,
    TResult Function(TakeThemeEvent value)? takeTheme,
    required TResult orElse(),
  }) {
    if (deleteColumns != null) {
      return deleteColumns(this);
    }
    return orElse();
  }
}

abstract class DeleteColumnsEvent implements DiaryListEvent {
  const factory DeleteColumnsEvent() = _$DeleteColumnsEvent;
}

/// @nodoc
abstract class _$$LoadThemesEventCopyWith<$Res> {
  factory _$$LoadThemesEventCopyWith(
          _$LoadThemesEvent value, $Res Function(_$LoadThemesEvent) then) =
      __$$LoadThemesEventCopyWithImpl<$Res>;
}

/// @nodoc
class __$$LoadThemesEventCopyWithImpl<$Res>
    extends _$DiaryListEventCopyWithImpl<$Res, _$LoadThemesEvent>
    implements _$$LoadThemesEventCopyWith<$Res> {
  __$$LoadThemesEventCopyWithImpl(
      _$LoadThemesEvent _value, $Res Function(_$LoadThemesEvent) _then)
      : super(_value, _then);
}

/// @nodoc

class _$LoadThemesEvent implements LoadThemesEvent {
  const _$LoadThemesEvent();

  @override
  String toString() {
    return 'DiaryListEvent.loadThemes()';
  }

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType && other is _$LoadThemesEvent);
  }

  @override
  int get hashCode => runtimeType.hashCode;

  @override
  @optionalTypeArgs
  TResult when<TResult extends Object?>({
    required TResult Function() createSample,
    required TResult Function() initialLoad,
    required TResult Function(DateTime date, int delay) getDiaryList,
    required TResult Function(DiaryList diaryList, List<DiaryList> lists)
        getDiaryColumns,
    required TResult Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells,
            List<DiaryList> lists)
        getDiaryCells,
    required TResult Function(DiaryCell diaryCell) selectDiaryCell,
    required TResult Function(List<DiaryCell> diaryCells) selectDiaryCells,
    required TResult Function(CapitalCell capitalCell) selectCapitalCell,
    required TResult Function(
            DiaryCell diaryCell,
            GlobalObjectKey<State<StatefulWidget>> cellKey,
            DragUpdateDetails details,
            double scaleFactor)
        onPanUpdate,
    required TResult Function(DiaryList? selectedList) startEditingList,
    required TResult Function(
            String? newName, String? addedColumnName, int? addedColumnCount)
        returnToLoaded,
    required TResult Function() returnToCellsSelected,
    required TResult Function(DiaryList diaryList, String newName)
        updateDiaryListName,
    required TResult Function(DiaryCell diaryCell, String? textFieldText)
        changeDiaryCell,
    required TResult Function(CapitalCell capitalCell, String? textFieldText)
        changeCapitalCell,
    required TResult Function(DiaryCell diaryCell, String? textFieldText)
        updateDiaryCellInFirebase,
    required TResult Function(
            FontWeightEnum? fontWeight,
            TextDecorationEnum? textDecoration,
            FontStyleEnum? fontStyle,
            double? fontSize,
            String? color,
            HorizontalAlignmentsEnum? horizontalAlignment,
            VerticalAlignmentsEnum? verticalAlignment,
            String? backgroundColor)
        changeDiaryCellsSettings,
    required TResult Function(BordersEditingEnum bordersEditingEnum,
            BordersStyleEnum bordersStyleEnum, Color bordersColor)
        changeDiaryCellsBordersSettings,
    required TResult Function(
            FontWeightEnum? fontWeight,
            TextDecorationEnum? textDecoration,
            FontStyleEnum? fontStyle,
            double? fontSize,
            String? color,
            HorizontalAlignmentsEnum? horizontalAlignment,
            VerticalAlignmentsEnum? verticalAlignment,
            String? backgroundColor,
            BordersStyleEnum? bordersStyleEnum,
            Color? bordersColor)
        changeCapitalCellSettings,
    required TResult Function(
            DiaryCell diaryCell,
            int index,
            DiaryCellTextSettings? newTextSettings,
            DiaryCellSettings? newSettings)
        updateDiaryCellSettingsInFirebase,
    required TResult Function(DiaryColumnSettings newSettings)
        updateCapitalCellSettingsInFirebase,
    required TResult Function(PointerMoveEvent details) updateCapitalCellWidth,
    required TResult Function(PointerUpEvent details)
        updateCapitalCellWidthInFirebase,
    required TResult Function(bool isTextEditing) startEditingCells,
    required TResult Function(DiaryList diaryList, String name,
            int columnsCount, List<DiaryColumn> diaryColumns)
        createDiaryColumn,
    required TResult Function(DiaryList diaryList, String columnId)
        deleteDiaryColumn,
    required TResult Function(DiaryList diaryList, String? themeColor,
            String? themeBorderColor, String? themePanelBackgroundColor)
        updateDiaryListSettings,
    required TResult Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<DiaryCell> diaryCells,
            List<CapitalCell> capitalCells,
            String themeName,
            String description)
        shareTheme,
    required TResult Function() startEditingColor,
    required TResult Function() startEditingBorders,
    required TResult Function() startEditingBorderStyle,
    required TResult Function() turnBackEditing,
    required TResult Function() startColumnDeleting,
    required TResult Function() startColorThemeEditing,
    required TResult Function() deleteColumns,
    required TResult Function() loadThemes,
    required TResult Function(ListTheme listTheme) loadFromTheme,
    required TResult Function(ListTheme listTheme) takeTheme,
  }) {
    return loadThemes();
  }

  @override
  @optionalTypeArgs
  TResult? whenOrNull<TResult extends Object?>({
    TResult? Function()? createSample,
    TResult? Function()? initialLoad,
    TResult? Function(DateTime date, int delay)? getDiaryList,
    TResult? Function(DiaryList diaryList, List<DiaryList> lists)?
        getDiaryColumns,
    TResult? Function(DiaryList diaryList, List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells, List<DiaryList> lists)?
        getDiaryCells,
    TResult? Function(DiaryCell diaryCell)? selectDiaryCell,
    TResult? Function(List<DiaryCell> diaryCells)? selectDiaryCells,
    TResult? Function(CapitalCell capitalCell)? selectCapitalCell,
    TResult? Function(
            DiaryCell diaryCell,
            GlobalObjectKey<State<StatefulWidget>> cellKey,
            DragUpdateDetails details,
            double scaleFactor)?
        onPanUpdate,
    TResult? Function(DiaryList? selectedList)? startEditingList,
    TResult? Function(
            String? newName, String? addedColumnName, int? addedColumnCount)?
        returnToLoaded,
    TResult? Function()? returnToCellsSelected,
    TResult? Function(DiaryList diaryList, String newName)? updateDiaryListName,
    TResult? Function(DiaryCell diaryCell, String? textFieldText)?
        changeDiaryCell,
    TResult? Function(CapitalCell capitalCell, String? textFieldText)?
        changeCapitalCell,
    TResult? Function(DiaryCell diaryCell, String? textFieldText)?
        updateDiaryCellInFirebase,
    TResult? Function(
            FontWeightEnum? fontWeight,
            TextDecorationEnum? textDecoration,
            FontStyleEnum? fontStyle,
            double? fontSize,
            String? color,
            HorizontalAlignmentsEnum? horizontalAlignment,
            VerticalAlignmentsEnum? verticalAlignment,
            String? backgroundColor)?
        changeDiaryCellsSettings,
    TResult? Function(BordersEditingEnum bordersEditingEnum,
            BordersStyleEnum bordersStyleEnum, Color bordersColor)?
        changeDiaryCellsBordersSettings,
    TResult? Function(
            FontWeightEnum? fontWeight,
            TextDecorationEnum? textDecoration,
            FontStyleEnum? fontStyle,
            double? fontSize,
            String? color,
            HorizontalAlignmentsEnum? horizontalAlignment,
            VerticalAlignmentsEnum? verticalAlignment,
            String? backgroundColor,
            BordersStyleEnum? bordersStyleEnum,
            Color? bordersColor)?
        changeCapitalCellSettings,
    TResult? Function(
            DiaryCell diaryCell,
            int index,
            DiaryCellTextSettings? newTextSettings,
            DiaryCellSettings? newSettings)?
        updateDiaryCellSettingsInFirebase,
    TResult? Function(DiaryColumnSettings newSettings)?
        updateCapitalCellSettingsInFirebase,
    TResult? Function(PointerMoveEvent details)? updateCapitalCellWidth,
    TResult? Function(PointerUpEvent details)? updateCapitalCellWidthInFirebase,
    TResult? Function(bool isTextEditing)? startEditingCells,
    TResult? Function(DiaryList diaryList, String name, int columnsCount,
            List<DiaryColumn> diaryColumns)?
        createDiaryColumn,
    TResult? Function(DiaryList diaryList, String columnId)? deleteDiaryColumn,
    TResult? Function(DiaryList diaryList, String? themeColor,
            String? themeBorderColor, String? themePanelBackgroundColor)?
        updateDiaryListSettings,
    TResult? Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<DiaryCell> diaryCells,
            List<CapitalCell> capitalCells,
            String themeName,
            String description)?
        shareTheme,
    TResult? Function()? startEditingColor,
    TResult? Function()? startEditingBorders,
    TResult? Function()? startEditingBorderStyle,
    TResult? Function()? turnBackEditing,
    TResult? Function()? startColumnDeleting,
    TResult? Function()? startColorThemeEditing,
    TResult? Function()? deleteColumns,
    TResult? Function()? loadThemes,
    TResult? Function(ListTheme listTheme)? loadFromTheme,
    TResult? Function(ListTheme listTheme)? takeTheme,
  }) {
    return loadThemes?.call();
  }

  @override
  @optionalTypeArgs
  TResult maybeWhen<TResult extends Object?>({
    TResult Function()? createSample,
    TResult Function()? initialLoad,
    TResult Function(DateTime date, int delay)? getDiaryList,
    TResult Function(DiaryList diaryList, List<DiaryList> lists)?
        getDiaryColumns,
    TResult Function(DiaryList diaryList, List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells, List<DiaryList> lists)?
        getDiaryCells,
    TResult Function(DiaryCell diaryCell)? selectDiaryCell,
    TResult Function(List<DiaryCell> diaryCells)? selectDiaryCells,
    TResult Function(CapitalCell capitalCell)? selectCapitalCell,
    TResult Function(
            DiaryCell diaryCell,
            GlobalObjectKey<State<StatefulWidget>> cellKey,
            DragUpdateDetails details,
            double scaleFactor)?
        onPanUpdate,
    TResult Function(DiaryList? selectedList)? startEditingList,
    TResult Function(
            String? newName, String? addedColumnName, int? addedColumnCount)?
        returnToLoaded,
    TResult Function()? returnToCellsSelected,
    TResult Function(DiaryList diaryList, String newName)? updateDiaryListName,
    TResult Function(DiaryCell diaryCell, String? textFieldText)?
        changeDiaryCell,
    TResult Function(CapitalCell capitalCell, String? textFieldText)?
        changeCapitalCell,
    TResult Function(DiaryCell diaryCell, String? textFieldText)?
        updateDiaryCellInFirebase,
    TResult Function(
            FontWeightEnum? fontWeight,
            TextDecorationEnum? textDecoration,
            FontStyleEnum? fontStyle,
            double? fontSize,
            String? color,
            HorizontalAlignmentsEnum? horizontalAlignment,
            VerticalAlignmentsEnum? verticalAlignment,
            String? backgroundColor)?
        changeDiaryCellsSettings,
    TResult Function(BordersEditingEnum bordersEditingEnum,
            BordersStyleEnum bordersStyleEnum, Color bordersColor)?
        changeDiaryCellsBordersSettings,
    TResult Function(
            FontWeightEnum? fontWeight,
            TextDecorationEnum? textDecoration,
            FontStyleEnum? fontStyle,
            double? fontSize,
            String? color,
            HorizontalAlignmentsEnum? horizontalAlignment,
            VerticalAlignmentsEnum? verticalAlignment,
            String? backgroundColor,
            BordersStyleEnum? bordersStyleEnum,
            Color? bordersColor)?
        changeCapitalCellSettings,
    TResult Function(
            DiaryCell diaryCell,
            int index,
            DiaryCellTextSettings? newTextSettings,
            DiaryCellSettings? newSettings)?
        updateDiaryCellSettingsInFirebase,
    TResult Function(DiaryColumnSettings newSettings)?
        updateCapitalCellSettingsInFirebase,
    TResult Function(PointerMoveEvent details)? updateCapitalCellWidth,
    TResult Function(PointerUpEvent details)? updateCapitalCellWidthInFirebase,
    TResult Function(bool isTextEditing)? startEditingCells,
    TResult Function(DiaryList diaryList, String name, int columnsCount,
            List<DiaryColumn> diaryColumns)?
        createDiaryColumn,
    TResult Function(DiaryList diaryList, String columnId)? deleteDiaryColumn,
    TResult Function(DiaryList diaryList, String? themeColor,
            String? themeBorderColor, String? themePanelBackgroundColor)?
        updateDiaryListSettings,
    TResult Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<DiaryCell> diaryCells,
            List<CapitalCell> capitalCells,
            String themeName,
            String description)?
        shareTheme,
    TResult Function()? startEditingColor,
    TResult Function()? startEditingBorders,
    TResult Function()? startEditingBorderStyle,
    TResult Function()? turnBackEditing,
    TResult Function()? startColumnDeleting,
    TResult Function()? startColorThemeEditing,
    TResult Function()? deleteColumns,
    TResult Function()? loadThemes,
    TResult Function(ListTheme listTheme)? loadFromTheme,
    TResult Function(ListTheme listTheme)? takeTheme,
    required TResult orElse(),
  }) {
    if (loadThemes != null) {
      return loadThemes();
    }
    return orElse();
  }

  @override
  @optionalTypeArgs
  TResult map<TResult extends Object?>({
    required TResult Function(CreateSampleEvent value) createSample,
    required TResult Function(InitialLoadEvent value) initialLoad,
    required TResult Function(GetDiaryListEvent value) getDiaryList,
    required TResult Function(GetDiaryColumnsEvent value) getDiaryColumns,
    required TResult Function(GetDiaryCellsEvent value) getDiaryCells,
    required TResult Function(SelectDiaryCellEvent value) selectDiaryCell,
    required TResult Function(SelectDiaryCellsEvent value) selectDiaryCells,
    required TResult Function(SelectCapitalCellEvent value) selectCapitalCell,
    required TResult Function(OnPanUpdateEvent value) onPanUpdate,
    required TResult Function(StartEditingListEvent value) startEditingList,
    required TResult Function(ReturnToLoadedEvent value) returnToLoaded,
    required TResult Function(ReturnToCellsSelectedEvent value)
        returnToCellsSelected,
    required TResult Function(UpdateDiaryListNameEvent value)
        updateDiaryListName,
    required TResult Function(ChangeDiaryCellEvent value) changeDiaryCell,
    required TResult Function(ChangeCapitalCellEvent value) changeCapitalCell,
    required TResult Function(UpdateDiaryCellInFirebaseEvent value)
        updateDiaryCellInFirebase,
    required TResult Function(ChangeDiaryCellsSettingsEvent value)
        changeDiaryCellsSettings,
    required TResult Function(ChangeDiaryCellsBordersSettingsEvent value)
        changeDiaryCellsBordersSettings,
    required TResult Function(ChangeCapitalCellSettingsEvent value)
        changeCapitalCellSettings,
    required TResult Function(UpdateDiaryCellSettingsInFirebaseEvent value)
        updateDiaryCellSettingsInFirebase,
    required TResult Function(UpdateCapitalCellSettingsInFirebaseEvent value)
        updateCapitalCellSettingsInFirebase,
    required TResult Function(UpdateCapitalCellWidthEvent value)
        updateCapitalCellWidth,
    required TResult Function(UpdateCapitalCellWidthInFirebaseEvent value)
        updateCapitalCellWidthInFirebase,
    required TResult Function(StartEditingCellsEvent value) startEditingCells,
    required TResult Function(CreateDiaryColumnEvent value) createDiaryColumn,
    required TResult Function(DeleteDiaryColumnEvent value) deleteDiaryColumn,
    required TResult Function(UpdateDiaryListSettingsEvent value)
        updateDiaryListSettings,
    required TResult Function(ShareThemeEvent value) shareTheme,
    required TResult Function(StartEditingColorEvent value) startEditingColor,
    required TResult Function(StartEditingBordersEvent value)
        startEditingBorders,
    required TResult Function(StartEditingBordersStyleEvent value)
        startEditingBorderStyle,
    required TResult Function(TurnBackEditingEvent value) turnBackEditing,
    required TResult Function(StartColumnDeletingEvent value)
        startColumnDeleting,
    required TResult Function(StartColorThemeEditingEvent value)
        startColorThemeEditing,
    required TResult Function(DeleteColumnsEvent value) deleteColumns,
    required TResult Function(LoadThemesEvent value) loadThemes,
    required TResult Function(LoadFromThemeEvent value) loadFromTheme,
    required TResult Function(TakeThemeEvent value) takeTheme,
  }) {
    return loadThemes(this);
  }

  @override
  @optionalTypeArgs
  TResult? mapOrNull<TResult extends Object?>({
    TResult? Function(CreateSampleEvent value)? createSample,
    TResult? Function(InitialLoadEvent value)? initialLoad,
    TResult? Function(GetDiaryListEvent value)? getDiaryList,
    TResult? Function(GetDiaryColumnsEvent value)? getDiaryColumns,
    TResult? Function(GetDiaryCellsEvent value)? getDiaryCells,
    TResult? Function(SelectDiaryCellEvent value)? selectDiaryCell,
    TResult? Function(SelectDiaryCellsEvent value)? selectDiaryCells,
    TResult? Function(SelectCapitalCellEvent value)? selectCapitalCell,
    TResult? Function(OnPanUpdateEvent value)? onPanUpdate,
    TResult? Function(StartEditingListEvent value)? startEditingList,
    TResult? Function(ReturnToLoadedEvent value)? returnToLoaded,
    TResult? Function(ReturnToCellsSelectedEvent value)? returnToCellsSelected,
    TResult? Function(UpdateDiaryListNameEvent value)? updateDiaryListName,
    TResult? Function(ChangeDiaryCellEvent value)? changeDiaryCell,
    TResult? Function(ChangeCapitalCellEvent value)? changeCapitalCell,
    TResult? Function(UpdateDiaryCellInFirebaseEvent value)?
        updateDiaryCellInFirebase,
    TResult? Function(ChangeDiaryCellsSettingsEvent value)?
        changeDiaryCellsSettings,
    TResult? Function(ChangeDiaryCellsBordersSettingsEvent value)?
        changeDiaryCellsBordersSettings,
    TResult? Function(ChangeCapitalCellSettingsEvent value)?
        changeCapitalCellSettings,
    TResult? Function(UpdateDiaryCellSettingsInFirebaseEvent value)?
        updateDiaryCellSettingsInFirebase,
    TResult? Function(UpdateCapitalCellSettingsInFirebaseEvent value)?
        updateCapitalCellSettingsInFirebase,
    TResult? Function(UpdateCapitalCellWidthEvent value)?
        updateCapitalCellWidth,
    TResult? Function(UpdateCapitalCellWidthInFirebaseEvent value)?
        updateCapitalCellWidthInFirebase,
    TResult? Function(StartEditingCellsEvent value)? startEditingCells,
    TResult? Function(CreateDiaryColumnEvent value)? createDiaryColumn,
    TResult? Function(DeleteDiaryColumnEvent value)? deleteDiaryColumn,
    TResult? Function(UpdateDiaryListSettingsEvent value)?
        updateDiaryListSettings,
    TResult? Function(ShareThemeEvent value)? shareTheme,
    TResult? Function(StartEditingColorEvent value)? startEditingColor,
    TResult? Function(StartEditingBordersEvent value)? startEditingBorders,
    TResult? Function(StartEditingBordersStyleEvent value)?
        startEditingBorderStyle,
    TResult? Function(TurnBackEditingEvent value)? turnBackEditing,
    TResult? Function(StartColumnDeletingEvent value)? startColumnDeleting,
    TResult? Function(StartColorThemeEditingEvent value)?
        startColorThemeEditing,
    TResult? Function(DeleteColumnsEvent value)? deleteColumns,
    TResult? Function(LoadThemesEvent value)? loadThemes,
    TResult? Function(LoadFromThemeEvent value)? loadFromTheme,
    TResult? Function(TakeThemeEvent value)? takeTheme,
  }) {
    return loadThemes?.call(this);
  }

  @override
  @optionalTypeArgs
  TResult maybeMap<TResult extends Object?>({
    TResult Function(CreateSampleEvent value)? createSample,
    TResult Function(InitialLoadEvent value)? initialLoad,
    TResult Function(GetDiaryListEvent value)? getDiaryList,
    TResult Function(GetDiaryColumnsEvent value)? getDiaryColumns,
    TResult Function(GetDiaryCellsEvent value)? getDiaryCells,
    TResult Function(SelectDiaryCellEvent value)? selectDiaryCell,
    TResult Function(SelectDiaryCellsEvent value)? selectDiaryCells,
    TResult Function(SelectCapitalCellEvent value)? selectCapitalCell,
    TResult Function(OnPanUpdateEvent value)? onPanUpdate,
    TResult Function(StartEditingListEvent value)? startEditingList,
    TResult Function(ReturnToLoadedEvent value)? returnToLoaded,
    TResult Function(ReturnToCellsSelectedEvent value)? returnToCellsSelected,
    TResult Function(UpdateDiaryListNameEvent value)? updateDiaryListName,
    TResult Function(ChangeDiaryCellEvent value)? changeDiaryCell,
    TResult Function(ChangeCapitalCellEvent value)? changeCapitalCell,
    TResult Function(UpdateDiaryCellInFirebaseEvent value)?
        updateDiaryCellInFirebase,
    TResult Function(ChangeDiaryCellsSettingsEvent value)?
        changeDiaryCellsSettings,
    TResult Function(ChangeDiaryCellsBordersSettingsEvent value)?
        changeDiaryCellsBordersSettings,
    TResult Function(ChangeCapitalCellSettingsEvent value)?
        changeCapitalCellSettings,
    TResult Function(UpdateDiaryCellSettingsInFirebaseEvent value)?
        updateDiaryCellSettingsInFirebase,
    TResult Function(UpdateCapitalCellSettingsInFirebaseEvent value)?
        updateCapitalCellSettingsInFirebase,
    TResult Function(UpdateCapitalCellWidthEvent value)? updateCapitalCellWidth,
    TResult Function(UpdateCapitalCellWidthInFirebaseEvent value)?
        updateCapitalCellWidthInFirebase,
    TResult Function(StartEditingCellsEvent value)? startEditingCells,
    TResult Function(CreateDiaryColumnEvent value)? createDiaryColumn,
    TResult Function(DeleteDiaryColumnEvent value)? deleteDiaryColumn,
    TResult Function(UpdateDiaryListSettingsEvent value)?
        updateDiaryListSettings,
    TResult Function(ShareThemeEvent value)? shareTheme,
    TResult Function(StartEditingColorEvent value)? startEditingColor,
    TResult Function(StartEditingBordersEvent value)? startEditingBorders,
    TResult Function(StartEditingBordersStyleEvent value)?
        startEditingBorderStyle,
    TResult Function(TurnBackEditingEvent value)? turnBackEditing,
    TResult Function(StartColumnDeletingEvent value)? startColumnDeleting,
    TResult Function(StartColorThemeEditingEvent value)? startColorThemeEditing,
    TResult Function(DeleteColumnsEvent value)? deleteColumns,
    TResult Function(LoadThemesEvent value)? loadThemes,
    TResult Function(LoadFromThemeEvent value)? loadFromTheme,
    TResult Function(TakeThemeEvent value)? takeTheme,
    required TResult orElse(),
  }) {
    if (loadThemes != null) {
      return loadThemes(this);
    }
    return orElse();
  }
}

abstract class LoadThemesEvent implements DiaryListEvent {
  const factory LoadThemesEvent() = _$LoadThemesEvent;
}

/// @nodoc
abstract class _$$LoadFromThemeEventCopyWith<$Res> {
  factory _$$LoadFromThemeEventCopyWith(_$LoadFromThemeEvent value,
          $Res Function(_$LoadFromThemeEvent) then) =
      __$$LoadFromThemeEventCopyWithImpl<$Res>;
  @useResult
  $Res call({ListTheme listTheme});
}

/// @nodoc
class __$$LoadFromThemeEventCopyWithImpl<$Res>
    extends _$DiaryListEventCopyWithImpl<$Res, _$LoadFromThemeEvent>
    implements _$$LoadFromThemeEventCopyWith<$Res> {
  __$$LoadFromThemeEventCopyWithImpl(
      _$LoadFromThemeEvent _value, $Res Function(_$LoadFromThemeEvent) _then)
      : super(_value, _then);

  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? listTheme = null,
  }) {
    return _then(_$LoadFromThemeEvent(
      listTheme: null == listTheme
          ? _value.listTheme
          : listTheme // ignore: cast_nullable_to_non_nullable
              as ListTheme,
    ));
  }
}

/// @nodoc

class _$LoadFromThemeEvent implements LoadFromThemeEvent {
  const _$LoadFromThemeEvent({required this.listTheme});

  @override
  final ListTheme listTheme;

  @override
  String toString() {
    return 'DiaryListEvent.loadFromTheme(listTheme: $listTheme)';
  }

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$LoadFromThemeEvent &&
            (identical(other.listTheme, listTheme) ||
                other.listTheme == listTheme));
  }

  @override
  int get hashCode => Object.hash(runtimeType, listTheme);

  @JsonKey(ignore: true)
  @override
  @pragma('vm:prefer-inline')
  _$$LoadFromThemeEventCopyWith<_$LoadFromThemeEvent> get copyWith =>
      __$$LoadFromThemeEventCopyWithImpl<_$LoadFromThemeEvent>(
          this, _$identity);

  @override
  @optionalTypeArgs
  TResult when<TResult extends Object?>({
    required TResult Function() createSample,
    required TResult Function() initialLoad,
    required TResult Function(DateTime date, int delay) getDiaryList,
    required TResult Function(DiaryList diaryList, List<DiaryList> lists)
        getDiaryColumns,
    required TResult Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells,
            List<DiaryList> lists)
        getDiaryCells,
    required TResult Function(DiaryCell diaryCell) selectDiaryCell,
    required TResult Function(List<DiaryCell> diaryCells) selectDiaryCells,
    required TResult Function(CapitalCell capitalCell) selectCapitalCell,
    required TResult Function(
            DiaryCell diaryCell,
            GlobalObjectKey<State<StatefulWidget>> cellKey,
            DragUpdateDetails details,
            double scaleFactor)
        onPanUpdate,
    required TResult Function(DiaryList? selectedList) startEditingList,
    required TResult Function(
            String? newName, String? addedColumnName, int? addedColumnCount)
        returnToLoaded,
    required TResult Function() returnToCellsSelected,
    required TResult Function(DiaryList diaryList, String newName)
        updateDiaryListName,
    required TResult Function(DiaryCell diaryCell, String? textFieldText)
        changeDiaryCell,
    required TResult Function(CapitalCell capitalCell, String? textFieldText)
        changeCapitalCell,
    required TResult Function(DiaryCell diaryCell, String? textFieldText)
        updateDiaryCellInFirebase,
    required TResult Function(
            FontWeightEnum? fontWeight,
            TextDecorationEnum? textDecoration,
            FontStyleEnum? fontStyle,
            double? fontSize,
            String? color,
            HorizontalAlignmentsEnum? horizontalAlignment,
            VerticalAlignmentsEnum? verticalAlignment,
            String? backgroundColor)
        changeDiaryCellsSettings,
    required TResult Function(BordersEditingEnum bordersEditingEnum,
            BordersStyleEnum bordersStyleEnum, Color bordersColor)
        changeDiaryCellsBordersSettings,
    required TResult Function(
            FontWeightEnum? fontWeight,
            TextDecorationEnum? textDecoration,
            FontStyleEnum? fontStyle,
            double? fontSize,
            String? color,
            HorizontalAlignmentsEnum? horizontalAlignment,
            VerticalAlignmentsEnum? verticalAlignment,
            String? backgroundColor,
            BordersStyleEnum? bordersStyleEnum,
            Color? bordersColor)
        changeCapitalCellSettings,
    required TResult Function(
            DiaryCell diaryCell,
            int index,
            DiaryCellTextSettings? newTextSettings,
            DiaryCellSettings? newSettings)
        updateDiaryCellSettingsInFirebase,
    required TResult Function(DiaryColumnSettings newSettings)
        updateCapitalCellSettingsInFirebase,
    required TResult Function(PointerMoveEvent details) updateCapitalCellWidth,
    required TResult Function(PointerUpEvent details)
        updateCapitalCellWidthInFirebase,
    required TResult Function(bool isTextEditing) startEditingCells,
    required TResult Function(DiaryList diaryList, String name,
            int columnsCount, List<DiaryColumn> diaryColumns)
        createDiaryColumn,
    required TResult Function(DiaryList diaryList, String columnId)
        deleteDiaryColumn,
    required TResult Function(DiaryList diaryList, String? themeColor,
            String? themeBorderColor, String? themePanelBackgroundColor)
        updateDiaryListSettings,
    required TResult Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<DiaryCell> diaryCells,
            List<CapitalCell> capitalCells,
            String themeName,
            String description)
        shareTheme,
    required TResult Function() startEditingColor,
    required TResult Function() startEditingBorders,
    required TResult Function() startEditingBorderStyle,
    required TResult Function() turnBackEditing,
    required TResult Function() startColumnDeleting,
    required TResult Function() startColorThemeEditing,
    required TResult Function() deleteColumns,
    required TResult Function() loadThemes,
    required TResult Function(ListTheme listTheme) loadFromTheme,
    required TResult Function(ListTheme listTheme) takeTheme,
  }) {
    return loadFromTheme(listTheme);
  }

  @override
  @optionalTypeArgs
  TResult? whenOrNull<TResult extends Object?>({
    TResult? Function()? createSample,
    TResult? Function()? initialLoad,
    TResult? Function(DateTime date, int delay)? getDiaryList,
    TResult? Function(DiaryList diaryList, List<DiaryList> lists)?
        getDiaryColumns,
    TResult? Function(DiaryList diaryList, List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells, List<DiaryList> lists)?
        getDiaryCells,
    TResult? Function(DiaryCell diaryCell)? selectDiaryCell,
    TResult? Function(List<DiaryCell> diaryCells)? selectDiaryCells,
    TResult? Function(CapitalCell capitalCell)? selectCapitalCell,
    TResult? Function(
            DiaryCell diaryCell,
            GlobalObjectKey<State<StatefulWidget>> cellKey,
            DragUpdateDetails details,
            double scaleFactor)?
        onPanUpdate,
    TResult? Function(DiaryList? selectedList)? startEditingList,
    TResult? Function(
            String? newName, String? addedColumnName, int? addedColumnCount)?
        returnToLoaded,
    TResult? Function()? returnToCellsSelected,
    TResult? Function(DiaryList diaryList, String newName)? updateDiaryListName,
    TResult? Function(DiaryCell diaryCell, String? textFieldText)?
        changeDiaryCell,
    TResult? Function(CapitalCell capitalCell, String? textFieldText)?
        changeCapitalCell,
    TResult? Function(DiaryCell diaryCell, String? textFieldText)?
        updateDiaryCellInFirebase,
    TResult? Function(
            FontWeightEnum? fontWeight,
            TextDecorationEnum? textDecoration,
            FontStyleEnum? fontStyle,
            double? fontSize,
            String? color,
            HorizontalAlignmentsEnum? horizontalAlignment,
            VerticalAlignmentsEnum? verticalAlignment,
            String? backgroundColor)?
        changeDiaryCellsSettings,
    TResult? Function(BordersEditingEnum bordersEditingEnum,
            BordersStyleEnum bordersStyleEnum, Color bordersColor)?
        changeDiaryCellsBordersSettings,
    TResult? Function(
            FontWeightEnum? fontWeight,
            TextDecorationEnum? textDecoration,
            FontStyleEnum? fontStyle,
            double? fontSize,
            String? color,
            HorizontalAlignmentsEnum? horizontalAlignment,
            VerticalAlignmentsEnum? verticalAlignment,
            String? backgroundColor,
            BordersStyleEnum? bordersStyleEnum,
            Color? bordersColor)?
        changeCapitalCellSettings,
    TResult? Function(
            DiaryCell diaryCell,
            int index,
            DiaryCellTextSettings? newTextSettings,
            DiaryCellSettings? newSettings)?
        updateDiaryCellSettingsInFirebase,
    TResult? Function(DiaryColumnSettings newSettings)?
        updateCapitalCellSettingsInFirebase,
    TResult? Function(PointerMoveEvent details)? updateCapitalCellWidth,
    TResult? Function(PointerUpEvent details)? updateCapitalCellWidthInFirebase,
    TResult? Function(bool isTextEditing)? startEditingCells,
    TResult? Function(DiaryList diaryList, String name, int columnsCount,
            List<DiaryColumn> diaryColumns)?
        createDiaryColumn,
    TResult? Function(DiaryList diaryList, String columnId)? deleteDiaryColumn,
    TResult? Function(DiaryList diaryList, String? themeColor,
            String? themeBorderColor, String? themePanelBackgroundColor)?
        updateDiaryListSettings,
    TResult? Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<DiaryCell> diaryCells,
            List<CapitalCell> capitalCells,
            String themeName,
            String description)?
        shareTheme,
    TResult? Function()? startEditingColor,
    TResult? Function()? startEditingBorders,
    TResult? Function()? startEditingBorderStyle,
    TResult? Function()? turnBackEditing,
    TResult? Function()? startColumnDeleting,
    TResult? Function()? startColorThemeEditing,
    TResult? Function()? deleteColumns,
    TResult? Function()? loadThemes,
    TResult? Function(ListTheme listTheme)? loadFromTheme,
    TResult? Function(ListTheme listTheme)? takeTheme,
  }) {
    return loadFromTheme?.call(listTheme);
  }

  @override
  @optionalTypeArgs
  TResult maybeWhen<TResult extends Object?>({
    TResult Function()? createSample,
    TResult Function()? initialLoad,
    TResult Function(DateTime date, int delay)? getDiaryList,
    TResult Function(DiaryList diaryList, List<DiaryList> lists)?
        getDiaryColumns,
    TResult Function(DiaryList diaryList, List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells, List<DiaryList> lists)?
        getDiaryCells,
    TResult Function(DiaryCell diaryCell)? selectDiaryCell,
    TResult Function(List<DiaryCell> diaryCells)? selectDiaryCells,
    TResult Function(CapitalCell capitalCell)? selectCapitalCell,
    TResult Function(
            DiaryCell diaryCell,
            GlobalObjectKey<State<StatefulWidget>> cellKey,
            DragUpdateDetails details,
            double scaleFactor)?
        onPanUpdate,
    TResult Function(DiaryList? selectedList)? startEditingList,
    TResult Function(
            String? newName, String? addedColumnName, int? addedColumnCount)?
        returnToLoaded,
    TResult Function()? returnToCellsSelected,
    TResult Function(DiaryList diaryList, String newName)? updateDiaryListName,
    TResult Function(DiaryCell diaryCell, String? textFieldText)?
        changeDiaryCell,
    TResult Function(CapitalCell capitalCell, String? textFieldText)?
        changeCapitalCell,
    TResult Function(DiaryCell diaryCell, String? textFieldText)?
        updateDiaryCellInFirebase,
    TResult Function(
            FontWeightEnum? fontWeight,
            TextDecorationEnum? textDecoration,
            FontStyleEnum? fontStyle,
            double? fontSize,
            String? color,
            HorizontalAlignmentsEnum? horizontalAlignment,
            VerticalAlignmentsEnum? verticalAlignment,
            String? backgroundColor)?
        changeDiaryCellsSettings,
    TResult Function(BordersEditingEnum bordersEditingEnum,
            BordersStyleEnum bordersStyleEnum, Color bordersColor)?
        changeDiaryCellsBordersSettings,
    TResult Function(
            FontWeightEnum? fontWeight,
            TextDecorationEnum? textDecoration,
            FontStyleEnum? fontStyle,
            double? fontSize,
            String? color,
            HorizontalAlignmentsEnum? horizontalAlignment,
            VerticalAlignmentsEnum? verticalAlignment,
            String? backgroundColor,
            BordersStyleEnum? bordersStyleEnum,
            Color? bordersColor)?
        changeCapitalCellSettings,
    TResult Function(
            DiaryCell diaryCell,
            int index,
            DiaryCellTextSettings? newTextSettings,
            DiaryCellSettings? newSettings)?
        updateDiaryCellSettingsInFirebase,
    TResult Function(DiaryColumnSettings newSettings)?
        updateCapitalCellSettingsInFirebase,
    TResult Function(PointerMoveEvent details)? updateCapitalCellWidth,
    TResult Function(PointerUpEvent details)? updateCapitalCellWidthInFirebase,
    TResult Function(bool isTextEditing)? startEditingCells,
    TResult Function(DiaryList diaryList, String name, int columnsCount,
            List<DiaryColumn> diaryColumns)?
        createDiaryColumn,
    TResult Function(DiaryList diaryList, String columnId)? deleteDiaryColumn,
    TResult Function(DiaryList diaryList, String? themeColor,
            String? themeBorderColor, String? themePanelBackgroundColor)?
        updateDiaryListSettings,
    TResult Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<DiaryCell> diaryCells,
            List<CapitalCell> capitalCells,
            String themeName,
            String description)?
        shareTheme,
    TResult Function()? startEditingColor,
    TResult Function()? startEditingBorders,
    TResult Function()? startEditingBorderStyle,
    TResult Function()? turnBackEditing,
    TResult Function()? startColumnDeleting,
    TResult Function()? startColorThemeEditing,
    TResult Function()? deleteColumns,
    TResult Function()? loadThemes,
    TResult Function(ListTheme listTheme)? loadFromTheme,
    TResult Function(ListTheme listTheme)? takeTheme,
    required TResult orElse(),
  }) {
    if (loadFromTheme != null) {
      return loadFromTheme(listTheme);
    }
    return orElse();
  }

  @override
  @optionalTypeArgs
  TResult map<TResult extends Object?>({
    required TResult Function(CreateSampleEvent value) createSample,
    required TResult Function(InitialLoadEvent value) initialLoad,
    required TResult Function(GetDiaryListEvent value) getDiaryList,
    required TResult Function(GetDiaryColumnsEvent value) getDiaryColumns,
    required TResult Function(GetDiaryCellsEvent value) getDiaryCells,
    required TResult Function(SelectDiaryCellEvent value) selectDiaryCell,
    required TResult Function(SelectDiaryCellsEvent value) selectDiaryCells,
    required TResult Function(SelectCapitalCellEvent value) selectCapitalCell,
    required TResult Function(OnPanUpdateEvent value) onPanUpdate,
    required TResult Function(StartEditingListEvent value) startEditingList,
    required TResult Function(ReturnToLoadedEvent value) returnToLoaded,
    required TResult Function(ReturnToCellsSelectedEvent value)
        returnToCellsSelected,
    required TResult Function(UpdateDiaryListNameEvent value)
        updateDiaryListName,
    required TResult Function(ChangeDiaryCellEvent value) changeDiaryCell,
    required TResult Function(ChangeCapitalCellEvent value) changeCapitalCell,
    required TResult Function(UpdateDiaryCellInFirebaseEvent value)
        updateDiaryCellInFirebase,
    required TResult Function(ChangeDiaryCellsSettingsEvent value)
        changeDiaryCellsSettings,
    required TResult Function(ChangeDiaryCellsBordersSettingsEvent value)
        changeDiaryCellsBordersSettings,
    required TResult Function(ChangeCapitalCellSettingsEvent value)
        changeCapitalCellSettings,
    required TResult Function(UpdateDiaryCellSettingsInFirebaseEvent value)
        updateDiaryCellSettingsInFirebase,
    required TResult Function(UpdateCapitalCellSettingsInFirebaseEvent value)
        updateCapitalCellSettingsInFirebase,
    required TResult Function(UpdateCapitalCellWidthEvent value)
        updateCapitalCellWidth,
    required TResult Function(UpdateCapitalCellWidthInFirebaseEvent value)
        updateCapitalCellWidthInFirebase,
    required TResult Function(StartEditingCellsEvent value) startEditingCells,
    required TResult Function(CreateDiaryColumnEvent value) createDiaryColumn,
    required TResult Function(DeleteDiaryColumnEvent value) deleteDiaryColumn,
    required TResult Function(UpdateDiaryListSettingsEvent value)
        updateDiaryListSettings,
    required TResult Function(ShareThemeEvent value) shareTheme,
    required TResult Function(StartEditingColorEvent value) startEditingColor,
    required TResult Function(StartEditingBordersEvent value)
        startEditingBorders,
    required TResult Function(StartEditingBordersStyleEvent value)
        startEditingBorderStyle,
    required TResult Function(TurnBackEditingEvent value) turnBackEditing,
    required TResult Function(StartColumnDeletingEvent value)
        startColumnDeleting,
    required TResult Function(StartColorThemeEditingEvent value)
        startColorThemeEditing,
    required TResult Function(DeleteColumnsEvent value) deleteColumns,
    required TResult Function(LoadThemesEvent value) loadThemes,
    required TResult Function(LoadFromThemeEvent value) loadFromTheme,
    required TResult Function(TakeThemeEvent value) takeTheme,
  }) {
    return loadFromTheme(this);
  }

  @override
  @optionalTypeArgs
  TResult? mapOrNull<TResult extends Object?>({
    TResult? Function(CreateSampleEvent value)? createSample,
    TResult? Function(InitialLoadEvent value)? initialLoad,
    TResult? Function(GetDiaryListEvent value)? getDiaryList,
    TResult? Function(GetDiaryColumnsEvent value)? getDiaryColumns,
    TResult? Function(GetDiaryCellsEvent value)? getDiaryCells,
    TResult? Function(SelectDiaryCellEvent value)? selectDiaryCell,
    TResult? Function(SelectDiaryCellsEvent value)? selectDiaryCells,
    TResult? Function(SelectCapitalCellEvent value)? selectCapitalCell,
    TResult? Function(OnPanUpdateEvent value)? onPanUpdate,
    TResult? Function(StartEditingListEvent value)? startEditingList,
    TResult? Function(ReturnToLoadedEvent value)? returnToLoaded,
    TResult? Function(ReturnToCellsSelectedEvent value)? returnToCellsSelected,
    TResult? Function(UpdateDiaryListNameEvent value)? updateDiaryListName,
    TResult? Function(ChangeDiaryCellEvent value)? changeDiaryCell,
    TResult? Function(ChangeCapitalCellEvent value)? changeCapitalCell,
    TResult? Function(UpdateDiaryCellInFirebaseEvent value)?
        updateDiaryCellInFirebase,
    TResult? Function(ChangeDiaryCellsSettingsEvent value)?
        changeDiaryCellsSettings,
    TResult? Function(ChangeDiaryCellsBordersSettingsEvent value)?
        changeDiaryCellsBordersSettings,
    TResult? Function(ChangeCapitalCellSettingsEvent value)?
        changeCapitalCellSettings,
    TResult? Function(UpdateDiaryCellSettingsInFirebaseEvent value)?
        updateDiaryCellSettingsInFirebase,
    TResult? Function(UpdateCapitalCellSettingsInFirebaseEvent value)?
        updateCapitalCellSettingsInFirebase,
    TResult? Function(UpdateCapitalCellWidthEvent value)?
        updateCapitalCellWidth,
    TResult? Function(UpdateCapitalCellWidthInFirebaseEvent value)?
        updateCapitalCellWidthInFirebase,
    TResult? Function(StartEditingCellsEvent value)? startEditingCells,
    TResult? Function(CreateDiaryColumnEvent value)? createDiaryColumn,
    TResult? Function(DeleteDiaryColumnEvent value)? deleteDiaryColumn,
    TResult? Function(UpdateDiaryListSettingsEvent value)?
        updateDiaryListSettings,
    TResult? Function(ShareThemeEvent value)? shareTheme,
    TResult? Function(StartEditingColorEvent value)? startEditingColor,
    TResult? Function(StartEditingBordersEvent value)? startEditingBorders,
    TResult? Function(StartEditingBordersStyleEvent value)?
        startEditingBorderStyle,
    TResult? Function(TurnBackEditingEvent value)? turnBackEditing,
    TResult? Function(StartColumnDeletingEvent value)? startColumnDeleting,
    TResult? Function(StartColorThemeEditingEvent value)?
        startColorThemeEditing,
    TResult? Function(DeleteColumnsEvent value)? deleteColumns,
    TResult? Function(LoadThemesEvent value)? loadThemes,
    TResult? Function(LoadFromThemeEvent value)? loadFromTheme,
    TResult? Function(TakeThemeEvent value)? takeTheme,
  }) {
    return loadFromTheme?.call(this);
  }

  @override
  @optionalTypeArgs
  TResult maybeMap<TResult extends Object?>({
    TResult Function(CreateSampleEvent value)? createSample,
    TResult Function(InitialLoadEvent value)? initialLoad,
    TResult Function(GetDiaryListEvent value)? getDiaryList,
    TResult Function(GetDiaryColumnsEvent value)? getDiaryColumns,
    TResult Function(GetDiaryCellsEvent value)? getDiaryCells,
    TResult Function(SelectDiaryCellEvent value)? selectDiaryCell,
    TResult Function(SelectDiaryCellsEvent value)? selectDiaryCells,
    TResult Function(SelectCapitalCellEvent value)? selectCapitalCell,
    TResult Function(OnPanUpdateEvent value)? onPanUpdate,
    TResult Function(StartEditingListEvent value)? startEditingList,
    TResult Function(ReturnToLoadedEvent value)? returnToLoaded,
    TResult Function(ReturnToCellsSelectedEvent value)? returnToCellsSelected,
    TResult Function(UpdateDiaryListNameEvent value)? updateDiaryListName,
    TResult Function(ChangeDiaryCellEvent value)? changeDiaryCell,
    TResult Function(ChangeCapitalCellEvent value)? changeCapitalCell,
    TResult Function(UpdateDiaryCellInFirebaseEvent value)?
        updateDiaryCellInFirebase,
    TResult Function(ChangeDiaryCellsSettingsEvent value)?
        changeDiaryCellsSettings,
    TResult Function(ChangeDiaryCellsBordersSettingsEvent value)?
        changeDiaryCellsBordersSettings,
    TResult Function(ChangeCapitalCellSettingsEvent value)?
        changeCapitalCellSettings,
    TResult Function(UpdateDiaryCellSettingsInFirebaseEvent value)?
        updateDiaryCellSettingsInFirebase,
    TResult Function(UpdateCapitalCellSettingsInFirebaseEvent value)?
        updateCapitalCellSettingsInFirebase,
    TResult Function(UpdateCapitalCellWidthEvent value)? updateCapitalCellWidth,
    TResult Function(UpdateCapitalCellWidthInFirebaseEvent value)?
        updateCapitalCellWidthInFirebase,
    TResult Function(StartEditingCellsEvent value)? startEditingCells,
    TResult Function(CreateDiaryColumnEvent value)? createDiaryColumn,
    TResult Function(DeleteDiaryColumnEvent value)? deleteDiaryColumn,
    TResult Function(UpdateDiaryListSettingsEvent value)?
        updateDiaryListSettings,
    TResult Function(ShareThemeEvent value)? shareTheme,
    TResult Function(StartEditingColorEvent value)? startEditingColor,
    TResult Function(StartEditingBordersEvent value)? startEditingBorders,
    TResult Function(StartEditingBordersStyleEvent value)?
        startEditingBorderStyle,
    TResult Function(TurnBackEditingEvent value)? turnBackEditing,
    TResult Function(StartColumnDeletingEvent value)? startColumnDeleting,
    TResult Function(StartColorThemeEditingEvent value)? startColorThemeEditing,
    TResult Function(DeleteColumnsEvent value)? deleteColumns,
    TResult Function(LoadThemesEvent value)? loadThemes,
    TResult Function(LoadFromThemeEvent value)? loadFromTheme,
    TResult Function(TakeThemeEvent value)? takeTheme,
    required TResult orElse(),
  }) {
    if (loadFromTheme != null) {
      return loadFromTheme(this);
    }
    return orElse();
  }
}

abstract class LoadFromThemeEvent implements DiaryListEvent {
  const factory LoadFromThemeEvent({required final ListTheme listTheme}) =
      _$LoadFromThemeEvent;

  ListTheme get listTheme;
  @JsonKey(ignore: true)
  _$$LoadFromThemeEventCopyWith<_$LoadFromThemeEvent> get copyWith =>
      throw _privateConstructorUsedError;
}

/// @nodoc
abstract class _$$TakeThemeEventCopyWith<$Res> {
  factory _$$TakeThemeEventCopyWith(
          _$TakeThemeEvent value, $Res Function(_$TakeThemeEvent) then) =
      __$$TakeThemeEventCopyWithImpl<$Res>;
  @useResult
  $Res call({ListTheme listTheme});
}

/// @nodoc
class __$$TakeThemeEventCopyWithImpl<$Res>
    extends _$DiaryListEventCopyWithImpl<$Res, _$TakeThemeEvent>
    implements _$$TakeThemeEventCopyWith<$Res> {
  __$$TakeThemeEventCopyWithImpl(
      _$TakeThemeEvent _value, $Res Function(_$TakeThemeEvent) _then)
      : super(_value, _then);

  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? listTheme = null,
  }) {
    return _then(_$TakeThemeEvent(
      listTheme: null == listTheme
          ? _value.listTheme
          : listTheme // ignore: cast_nullable_to_non_nullable
              as ListTheme,
    ));
  }
}

/// @nodoc

class _$TakeThemeEvent implements TakeThemeEvent {
  const _$TakeThemeEvent({required this.listTheme});

  @override
  final ListTheme listTheme;

  @override
  String toString() {
    return 'DiaryListEvent.takeTheme(listTheme: $listTheme)';
  }

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$TakeThemeEvent &&
            (identical(other.listTheme, listTheme) ||
                other.listTheme == listTheme));
  }

  @override
  int get hashCode => Object.hash(runtimeType, listTheme);

  @JsonKey(ignore: true)
  @override
  @pragma('vm:prefer-inline')
  _$$TakeThemeEventCopyWith<_$TakeThemeEvent> get copyWith =>
      __$$TakeThemeEventCopyWithImpl<_$TakeThemeEvent>(this, _$identity);

  @override
  @optionalTypeArgs
  TResult when<TResult extends Object?>({
    required TResult Function() createSample,
    required TResult Function() initialLoad,
    required TResult Function(DateTime date, int delay) getDiaryList,
    required TResult Function(DiaryList diaryList, List<DiaryList> lists)
        getDiaryColumns,
    required TResult Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells,
            List<DiaryList> lists)
        getDiaryCells,
    required TResult Function(DiaryCell diaryCell) selectDiaryCell,
    required TResult Function(List<DiaryCell> diaryCells) selectDiaryCells,
    required TResult Function(CapitalCell capitalCell) selectCapitalCell,
    required TResult Function(
            DiaryCell diaryCell,
            GlobalObjectKey<State<StatefulWidget>> cellKey,
            DragUpdateDetails details,
            double scaleFactor)
        onPanUpdate,
    required TResult Function(DiaryList? selectedList) startEditingList,
    required TResult Function(
            String? newName, String? addedColumnName, int? addedColumnCount)
        returnToLoaded,
    required TResult Function() returnToCellsSelected,
    required TResult Function(DiaryList diaryList, String newName)
        updateDiaryListName,
    required TResult Function(DiaryCell diaryCell, String? textFieldText)
        changeDiaryCell,
    required TResult Function(CapitalCell capitalCell, String? textFieldText)
        changeCapitalCell,
    required TResult Function(DiaryCell diaryCell, String? textFieldText)
        updateDiaryCellInFirebase,
    required TResult Function(
            FontWeightEnum? fontWeight,
            TextDecorationEnum? textDecoration,
            FontStyleEnum? fontStyle,
            double? fontSize,
            String? color,
            HorizontalAlignmentsEnum? horizontalAlignment,
            VerticalAlignmentsEnum? verticalAlignment,
            String? backgroundColor)
        changeDiaryCellsSettings,
    required TResult Function(BordersEditingEnum bordersEditingEnum,
            BordersStyleEnum bordersStyleEnum, Color bordersColor)
        changeDiaryCellsBordersSettings,
    required TResult Function(
            FontWeightEnum? fontWeight,
            TextDecorationEnum? textDecoration,
            FontStyleEnum? fontStyle,
            double? fontSize,
            String? color,
            HorizontalAlignmentsEnum? horizontalAlignment,
            VerticalAlignmentsEnum? verticalAlignment,
            String? backgroundColor,
            BordersStyleEnum? bordersStyleEnum,
            Color? bordersColor)
        changeCapitalCellSettings,
    required TResult Function(
            DiaryCell diaryCell,
            int index,
            DiaryCellTextSettings? newTextSettings,
            DiaryCellSettings? newSettings)
        updateDiaryCellSettingsInFirebase,
    required TResult Function(DiaryColumnSettings newSettings)
        updateCapitalCellSettingsInFirebase,
    required TResult Function(PointerMoveEvent details) updateCapitalCellWidth,
    required TResult Function(PointerUpEvent details)
        updateCapitalCellWidthInFirebase,
    required TResult Function(bool isTextEditing) startEditingCells,
    required TResult Function(DiaryList diaryList, String name,
            int columnsCount, List<DiaryColumn> diaryColumns)
        createDiaryColumn,
    required TResult Function(DiaryList diaryList, String columnId)
        deleteDiaryColumn,
    required TResult Function(DiaryList diaryList, String? themeColor,
            String? themeBorderColor, String? themePanelBackgroundColor)
        updateDiaryListSettings,
    required TResult Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<DiaryCell> diaryCells,
            List<CapitalCell> capitalCells,
            String themeName,
            String description)
        shareTheme,
    required TResult Function() startEditingColor,
    required TResult Function() startEditingBorders,
    required TResult Function() startEditingBorderStyle,
    required TResult Function() turnBackEditing,
    required TResult Function() startColumnDeleting,
    required TResult Function() startColorThemeEditing,
    required TResult Function() deleteColumns,
    required TResult Function() loadThemes,
    required TResult Function(ListTheme listTheme) loadFromTheme,
    required TResult Function(ListTheme listTheme) takeTheme,
  }) {
    return takeTheme(listTheme);
  }

  @override
  @optionalTypeArgs
  TResult? whenOrNull<TResult extends Object?>({
    TResult? Function()? createSample,
    TResult? Function()? initialLoad,
    TResult? Function(DateTime date, int delay)? getDiaryList,
    TResult? Function(DiaryList diaryList, List<DiaryList> lists)?
        getDiaryColumns,
    TResult? Function(DiaryList diaryList, List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells, List<DiaryList> lists)?
        getDiaryCells,
    TResult? Function(DiaryCell diaryCell)? selectDiaryCell,
    TResult? Function(List<DiaryCell> diaryCells)? selectDiaryCells,
    TResult? Function(CapitalCell capitalCell)? selectCapitalCell,
    TResult? Function(
            DiaryCell diaryCell,
            GlobalObjectKey<State<StatefulWidget>> cellKey,
            DragUpdateDetails details,
            double scaleFactor)?
        onPanUpdate,
    TResult? Function(DiaryList? selectedList)? startEditingList,
    TResult? Function(
            String? newName, String? addedColumnName, int? addedColumnCount)?
        returnToLoaded,
    TResult? Function()? returnToCellsSelected,
    TResult? Function(DiaryList diaryList, String newName)? updateDiaryListName,
    TResult? Function(DiaryCell diaryCell, String? textFieldText)?
        changeDiaryCell,
    TResult? Function(CapitalCell capitalCell, String? textFieldText)?
        changeCapitalCell,
    TResult? Function(DiaryCell diaryCell, String? textFieldText)?
        updateDiaryCellInFirebase,
    TResult? Function(
            FontWeightEnum? fontWeight,
            TextDecorationEnum? textDecoration,
            FontStyleEnum? fontStyle,
            double? fontSize,
            String? color,
            HorizontalAlignmentsEnum? horizontalAlignment,
            VerticalAlignmentsEnum? verticalAlignment,
            String? backgroundColor)?
        changeDiaryCellsSettings,
    TResult? Function(BordersEditingEnum bordersEditingEnum,
            BordersStyleEnum bordersStyleEnum, Color bordersColor)?
        changeDiaryCellsBordersSettings,
    TResult? Function(
            FontWeightEnum? fontWeight,
            TextDecorationEnum? textDecoration,
            FontStyleEnum? fontStyle,
            double? fontSize,
            String? color,
            HorizontalAlignmentsEnum? horizontalAlignment,
            VerticalAlignmentsEnum? verticalAlignment,
            String? backgroundColor,
            BordersStyleEnum? bordersStyleEnum,
            Color? bordersColor)?
        changeCapitalCellSettings,
    TResult? Function(
            DiaryCell diaryCell,
            int index,
            DiaryCellTextSettings? newTextSettings,
            DiaryCellSettings? newSettings)?
        updateDiaryCellSettingsInFirebase,
    TResult? Function(DiaryColumnSettings newSettings)?
        updateCapitalCellSettingsInFirebase,
    TResult? Function(PointerMoveEvent details)? updateCapitalCellWidth,
    TResult? Function(PointerUpEvent details)? updateCapitalCellWidthInFirebase,
    TResult? Function(bool isTextEditing)? startEditingCells,
    TResult? Function(DiaryList diaryList, String name, int columnsCount,
            List<DiaryColumn> diaryColumns)?
        createDiaryColumn,
    TResult? Function(DiaryList diaryList, String columnId)? deleteDiaryColumn,
    TResult? Function(DiaryList diaryList, String? themeColor,
            String? themeBorderColor, String? themePanelBackgroundColor)?
        updateDiaryListSettings,
    TResult? Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<DiaryCell> diaryCells,
            List<CapitalCell> capitalCells,
            String themeName,
            String description)?
        shareTheme,
    TResult? Function()? startEditingColor,
    TResult? Function()? startEditingBorders,
    TResult? Function()? startEditingBorderStyle,
    TResult? Function()? turnBackEditing,
    TResult? Function()? startColumnDeleting,
    TResult? Function()? startColorThemeEditing,
    TResult? Function()? deleteColumns,
    TResult? Function()? loadThemes,
    TResult? Function(ListTheme listTheme)? loadFromTheme,
    TResult? Function(ListTheme listTheme)? takeTheme,
  }) {
    return takeTheme?.call(listTheme);
  }

  @override
  @optionalTypeArgs
  TResult maybeWhen<TResult extends Object?>({
    TResult Function()? createSample,
    TResult Function()? initialLoad,
    TResult Function(DateTime date, int delay)? getDiaryList,
    TResult Function(DiaryList diaryList, List<DiaryList> lists)?
        getDiaryColumns,
    TResult Function(DiaryList diaryList, List<DiaryColumn> diaryColumns,
            List<CapitalCell> capitalCells, List<DiaryList> lists)?
        getDiaryCells,
    TResult Function(DiaryCell diaryCell)? selectDiaryCell,
    TResult Function(List<DiaryCell> diaryCells)? selectDiaryCells,
    TResult Function(CapitalCell capitalCell)? selectCapitalCell,
    TResult Function(
            DiaryCell diaryCell,
            GlobalObjectKey<State<StatefulWidget>> cellKey,
            DragUpdateDetails details,
            double scaleFactor)?
        onPanUpdate,
    TResult Function(DiaryList? selectedList)? startEditingList,
    TResult Function(
            String? newName, String? addedColumnName, int? addedColumnCount)?
        returnToLoaded,
    TResult Function()? returnToCellsSelected,
    TResult Function(DiaryList diaryList, String newName)? updateDiaryListName,
    TResult Function(DiaryCell diaryCell, String? textFieldText)?
        changeDiaryCell,
    TResult Function(CapitalCell capitalCell, String? textFieldText)?
        changeCapitalCell,
    TResult Function(DiaryCell diaryCell, String? textFieldText)?
        updateDiaryCellInFirebase,
    TResult Function(
            FontWeightEnum? fontWeight,
            TextDecorationEnum? textDecoration,
            FontStyleEnum? fontStyle,
            double? fontSize,
            String? color,
            HorizontalAlignmentsEnum? horizontalAlignment,
            VerticalAlignmentsEnum? verticalAlignment,
            String? backgroundColor)?
        changeDiaryCellsSettings,
    TResult Function(BordersEditingEnum bordersEditingEnum,
            BordersStyleEnum bordersStyleEnum, Color bordersColor)?
        changeDiaryCellsBordersSettings,
    TResult Function(
            FontWeightEnum? fontWeight,
            TextDecorationEnum? textDecoration,
            FontStyleEnum? fontStyle,
            double? fontSize,
            String? color,
            HorizontalAlignmentsEnum? horizontalAlignment,
            VerticalAlignmentsEnum? verticalAlignment,
            String? backgroundColor,
            BordersStyleEnum? bordersStyleEnum,
            Color? bordersColor)?
        changeCapitalCellSettings,
    TResult Function(
            DiaryCell diaryCell,
            int index,
            DiaryCellTextSettings? newTextSettings,
            DiaryCellSettings? newSettings)?
        updateDiaryCellSettingsInFirebase,
    TResult Function(DiaryColumnSettings newSettings)?
        updateCapitalCellSettingsInFirebase,
    TResult Function(PointerMoveEvent details)? updateCapitalCellWidth,
    TResult Function(PointerUpEvent details)? updateCapitalCellWidthInFirebase,
    TResult Function(bool isTextEditing)? startEditingCells,
    TResult Function(DiaryList diaryList, String name, int columnsCount,
            List<DiaryColumn> diaryColumns)?
        createDiaryColumn,
    TResult Function(DiaryList diaryList, String columnId)? deleteDiaryColumn,
    TResult Function(DiaryList diaryList, String? themeColor,
            String? themeBorderColor, String? themePanelBackgroundColor)?
        updateDiaryListSettings,
    TResult Function(
            DiaryList diaryList,
            List<DiaryColumn> diaryColumns,
            List<DiaryCell> diaryCells,
            List<CapitalCell> capitalCells,
            String themeName,
            String description)?
        shareTheme,
    TResult Function()? startEditingColor,
    TResult Function()? startEditingBorders,
    TResult Function()? startEditingBorderStyle,
    TResult Function()? turnBackEditing,
    TResult Function()? startColumnDeleting,
    TResult Function()? startColorThemeEditing,
    TResult Function()? deleteColumns,
    TResult Function()? loadThemes,
    TResult Function(ListTheme listTheme)? loadFromTheme,
    TResult Function(ListTheme listTheme)? takeTheme,
    required TResult orElse(),
  }) {
    if (takeTheme != null) {
      return takeTheme(listTheme);
    }
    return orElse();
  }

  @override
  @optionalTypeArgs
  TResult map<TResult extends Object?>({
    required TResult Function(CreateSampleEvent value) createSample,
    required TResult Function(InitialLoadEvent value) initialLoad,
    required TResult Function(GetDiaryListEvent value) getDiaryList,
    required TResult Function(GetDiaryColumnsEvent value) getDiaryColumns,
    required TResult Function(GetDiaryCellsEvent value) getDiaryCells,
    required TResult Function(SelectDiaryCellEvent value) selectDiaryCell,
    required TResult Function(SelectDiaryCellsEvent value) selectDiaryCells,
    required TResult Function(SelectCapitalCellEvent value) selectCapitalCell,
    required TResult Function(OnPanUpdateEvent value) onPanUpdate,
    required TResult Function(StartEditingListEvent value) startEditingList,
    required TResult Function(ReturnToLoadedEvent value) returnToLoaded,
    required TResult Function(ReturnToCellsSelectedEvent value)
        returnToCellsSelected,
    required TResult Function(UpdateDiaryListNameEvent value)
        updateDiaryListName,
    required TResult Function(ChangeDiaryCellEvent value) changeDiaryCell,
    required TResult Function(ChangeCapitalCellEvent value) changeCapitalCell,
    required TResult Function(UpdateDiaryCellInFirebaseEvent value)
        updateDiaryCellInFirebase,
    required TResult Function(ChangeDiaryCellsSettingsEvent value)
        changeDiaryCellsSettings,
    required TResult Function(ChangeDiaryCellsBordersSettingsEvent value)
        changeDiaryCellsBordersSettings,
    required TResult Function(ChangeCapitalCellSettingsEvent value)
        changeCapitalCellSettings,
    required TResult Function(UpdateDiaryCellSettingsInFirebaseEvent value)
        updateDiaryCellSettingsInFirebase,
    required TResult Function(UpdateCapitalCellSettingsInFirebaseEvent value)
        updateCapitalCellSettingsInFirebase,
    required TResult Function(UpdateCapitalCellWidthEvent value)
        updateCapitalCellWidth,
    required TResult Function(UpdateCapitalCellWidthInFirebaseEvent value)
        updateCapitalCellWidthInFirebase,
    required TResult Function(StartEditingCellsEvent value) startEditingCells,
    required TResult Function(CreateDiaryColumnEvent value) createDiaryColumn,
    required TResult Function(DeleteDiaryColumnEvent value) deleteDiaryColumn,
    required TResult Function(UpdateDiaryListSettingsEvent value)
        updateDiaryListSettings,
    required TResult Function(ShareThemeEvent value) shareTheme,
    required TResult Function(StartEditingColorEvent value) startEditingColor,
    required TResult Function(StartEditingBordersEvent value)
        startEditingBorders,
    required TResult Function(StartEditingBordersStyleEvent value)
        startEditingBorderStyle,
    required TResult Function(TurnBackEditingEvent value) turnBackEditing,
    required TResult Function(StartColumnDeletingEvent value)
        startColumnDeleting,
    required TResult Function(StartColorThemeEditingEvent value)
        startColorThemeEditing,
    required TResult Function(DeleteColumnsEvent value) deleteColumns,
    required TResult Function(LoadThemesEvent value) loadThemes,
    required TResult Function(LoadFromThemeEvent value) loadFromTheme,
    required TResult Function(TakeThemeEvent value) takeTheme,
  }) {
    return takeTheme(this);
  }

  @override
  @optionalTypeArgs
  TResult? mapOrNull<TResult extends Object?>({
    TResult? Function(CreateSampleEvent value)? createSample,
    TResult? Function(InitialLoadEvent value)? initialLoad,
    TResult? Function(GetDiaryListEvent value)? getDiaryList,
    TResult? Function(GetDiaryColumnsEvent value)? getDiaryColumns,
    TResult? Function(GetDiaryCellsEvent value)? getDiaryCells,
    TResult? Function(SelectDiaryCellEvent value)? selectDiaryCell,
    TResult? Function(SelectDiaryCellsEvent value)? selectDiaryCells,
    TResult? Function(SelectCapitalCellEvent value)? selectCapitalCell,
    TResult? Function(OnPanUpdateEvent value)? onPanUpdate,
    TResult? Function(StartEditingListEvent value)? startEditingList,
    TResult? Function(ReturnToLoadedEvent value)? returnToLoaded,
    TResult? Function(ReturnToCellsSelectedEvent value)? returnToCellsSelected,
    TResult? Function(UpdateDiaryListNameEvent value)? updateDiaryListName,
    TResult? Function(ChangeDiaryCellEvent value)? changeDiaryCell,
    TResult? Function(ChangeCapitalCellEvent value)? changeCapitalCell,
    TResult? Function(UpdateDiaryCellInFirebaseEvent value)?
        updateDiaryCellInFirebase,
    TResult? Function(ChangeDiaryCellsSettingsEvent value)?
        changeDiaryCellsSettings,
    TResult? Function(ChangeDiaryCellsBordersSettingsEvent value)?
        changeDiaryCellsBordersSettings,
    TResult? Function(ChangeCapitalCellSettingsEvent value)?
        changeCapitalCellSettings,
    TResult? Function(UpdateDiaryCellSettingsInFirebaseEvent value)?
        updateDiaryCellSettingsInFirebase,
    TResult? Function(UpdateCapitalCellSettingsInFirebaseEvent value)?
        updateCapitalCellSettingsInFirebase,
    TResult? Function(UpdateCapitalCellWidthEvent value)?
        updateCapitalCellWidth,
    TResult? Function(UpdateCapitalCellWidthInFirebaseEvent value)?
        updateCapitalCellWidthInFirebase,
    TResult? Function(StartEditingCellsEvent value)? startEditingCells,
    TResult? Function(CreateDiaryColumnEvent value)? createDiaryColumn,
    TResult? Function(DeleteDiaryColumnEvent value)? deleteDiaryColumn,
    TResult? Function(UpdateDiaryListSettingsEvent value)?
        updateDiaryListSettings,
    TResult? Function(ShareThemeEvent value)? shareTheme,
    TResult? Function(StartEditingColorEvent value)? startEditingColor,
    TResult? Function(StartEditingBordersEvent value)? startEditingBorders,
    TResult? Function(StartEditingBordersStyleEvent value)?
        startEditingBorderStyle,
    TResult? Function(TurnBackEditingEvent value)? turnBackEditing,
    TResult? Function(StartColumnDeletingEvent value)? startColumnDeleting,
    TResult? Function(StartColorThemeEditingEvent value)?
        startColorThemeEditing,
    TResult? Function(DeleteColumnsEvent value)? deleteColumns,
    TResult? Function(LoadThemesEvent value)? loadThemes,
    TResult? Function(LoadFromThemeEvent value)? loadFromTheme,
    TResult? Function(TakeThemeEvent value)? takeTheme,
  }) {
    return takeTheme?.call(this);
  }

  @override
  @optionalTypeArgs
  TResult maybeMap<TResult extends Object?>({
    TResult Function(CreateSampleEvent value)? createSample,
    TResult Function(InitialLoadEvent value)? initialLoad,
    TResult Function(GetDiaryListEvent value)? getDiaryList,
    TResult Function(GetDiaryColumnsEvent value)? getDiaryColumns,
    TResult Function(GetDiaryCellsEvent value)? getDiaryCells,
    TResult Function(SelectDiaryCellEvent value)? selectDiaryCell,
    TResult Function(SelectDiaryCellsEvent value)? selectDiaryCells,
    TResult Function(SelectCapitalCellEvent value)? selectCapitalCell,
    TResult Function(OnPanUpdateEvent value)? onPanUpdate,
    TResult Function(StartEditingListEvent value)? startEditingList,
    TResult Function(ReturnToLoadedEvent value)? returnToLoaded,
    TResult Function(ReturnToCellsSelectedEvent value)? returnToCellsSelected,
    TResult Function(UpdateDiaryListNameEvent value)? updateDiaryListName,
    TResult Function(ChangeDiaryCellEvent value)? changeDiaryCell,
    TResult Function(ChangeCapitalCellEvent value)? changeCapitalCell,
    TResult Function(UpdateDiaryCellInFirebaseEvent value)?
        updateDiaryCellInFirebase,
    TResult Function(ChangeDiaryCellsSettingsEvent value)?
        changeDiaryCellsSettings,
    TResult Function(ChangeDiaryCellsBordersSettingsEvent value)?
        changeDiaryCellsBordersSettings,
    TResult Function(ChangeCapitalCellSettingsEvent value)?
        changeCapitalCellSettings,
    TResult Function(UpdateDiaryCellSettingsInFirebaseEvent value)?
        updateDiaryCellSettingsInFirebase,
    TResult Function(UpdateCapitalCellSettingsInFirebaseEvent value)?
        updateCapitalCellSettingsInFirebase,
    TResult Function(UpdateCapitalCellWidthEvent value)? updateCapitalCellWidth,
    TResult Function(UpdateCapitalCellWidthInFirebaseEvent value)?
        updateCapitalCellWidthInFirebase,
    TResult Function(StartEditingCellsEvent value)? startEditingCells,
    TResult Function(CreateDiaryColumnEvent value)? createDiaryColumn,
    TResult Function(DeleteDiaryColumnEvent value)? deleteDiaryColumn,
    TResult Function(UpdateDiaryListSettingsEvent value)?
        updateDiaryListSettings,
    TResult Function(ShareThemeEvent value)? shareTheme,
    TResult Function(StartEditingColorEvent value)? startEditingColor,
    TResult Function(StartEditingBordersEvent value)? startEditingBorders,
    TResult Function(StartEditingBordersStyleEvent value)?
        startEditingBorderStyle,
    TResult Function(TurnBackEditingEvent value)? turnBackEditing,
    TResult Function(StartColumnDeletingEvent value)? startColumnDeleting,
    TResult Function(StartColorThemeEditingEvent value)? startColorThemeEditing,
    TResult Function(DeleteColumnsEvent value)? deleteColumns,
    TResult Function(LoadThemesEvent value)? loadThemes,
    TResult Function(LoadFromThemeEvent value)? loadFromTheme,
    TResult Function(TakeThemeEvent value)? takeTheme,
    required TResult orElse(),
  }) {
    if (takeTheme != null) {
      return takeTheme(this);
    }
    return orElse();
  }
}

abstract class TakeThemeEvent implements DiaryListEvent {
  const factory TakeThemeEvent({required final ListTheme listTheme}) =
      _$TakeThemeEvent;

  ListTheme get listTheme;
  @JsonKey(ignore: true)
  _$$TakeThemeEventCopyWith<_$TakeThemeEvent> get copyWith =>
      throw _privateConstructorUsedError;
}
